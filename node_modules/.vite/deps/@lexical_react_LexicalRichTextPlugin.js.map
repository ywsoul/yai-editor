{
  "version": 3,
  "sources": ["../../.pnpm/@lexical+react@0.22.0_react-dom@18.3.1_react@18.3.1__react@18.3.1_yjs@13.6.21/node_modules/@lexical/react/useLexicalEditable.dev.mjs", "../../.pnpm/@lexical+react@0.22.0_react-dom@18.3.1_react@18.3.1__react@18.3.1_yjs@13.6.21/node_modules/@lexical/react/LexicalRichTextPlugin.dev.mjs", "../../.pnpm/@lexical+dragon@0.22.0/node_modules/@lexical/dragon/LexicalDragon.dev.mjs", "../../.pnpm/@lexical+html@0.22.0/node_modules/@lexical/html/LexicalHtml.dev.mjs", "../../.pnpm/@lexical+clipboard@0.22.0/node_modules/@lexical/clipboard/LexicalClipboard.dev.mjs", "../../.pnpm/@lexical+rich-text@0.22.0/node_modules/@lexical/rich-text/LexicalRichText.dev.mjs"],
  "sourcesContent": ["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport { useLayoutEffect, useEffect, useMemo, useState, useRef } from 'react';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n// This workaround is no longer necessary in React 19,\n// but we currently support React >=17.x\n// https://github.com/facebook/react/pull/26395\nconst useLayoutEffectImpl = CAN_USE_DOM ? useLayoutEffect : useEffect;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Shortcut to Lexical subscriptions when values are used for render.\n * @param subscription - The function to create the {@link LexicalSubscription}. This function's identity must be stable (e.g. defined at module scope or with useCallback).\n */\nfunction useLexicalSubscription(subscription) {\n  const [editor] = useLexicalComposerContext();\n  const initializedSubscription = useMemo(() => subscription(editor), [editor, subscription]);\n  const [value, setValue] = useState(() => initializedSubscription.initialValueFn());\n  const valueRef = useRef(value);\n  useLayoutEffectImpl(() => {\n    const {\n      initialValueFn,\n      subscribe\n    } = initializedSubscription;\n    const currentValue = initialValueFn();\n    if (valueRef.current !== currentValue) {\n      valueRef.current = currentValue;\n      setValue(currentValue);\n    }\n    return subscribe(newValue => {\n      valueRef.current = newValue;\n      setValue(newValue);\n    });\n  }, [initializedSubscription, subscription]);\n  return value;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction subscription(editor) {\n  return {\n    initialValueFn: () => editor.isEditable(),\n    subscribe: callback => {\n      return editor.registerEditableListener(callback);\n    }\n  };\n}\n\n/**\n * Get the current value for {@link LexicalEditor.isEditable}\n * using {@link useLexicalSubscription}.\n * You should prefer this over manually observing the value with\n * {@link LexicalEditor.registerEditableListener},\n * which is a bit tricky to do correctly, particularly when using\n * React StrictMode (the default for development) or concurrency.\n */\nfunction useLexicalEditable() {\n  return useLexicalSubscription(subscription);\n}\n\nexport { useLexicalEditable as default, useLexicalEditable };\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport { useLexicalEditable } from '@lexical/react/useLexicalEditable';\nimport { $canShowPlaceholderCurry } from '@lexical/text';\nimport { mergeRegister } from '@lexical/utils';\nimport { useLayoutEffect, useEffect, useState, useMemo, Suspense } from 'react';\nimport { flushSync, createPortal } from 'react-dom';\nimport { jsx, jsxs, Fragment } from 'react/jsx-runtime';\nimport { registerDragonSupport } from '@lexical/dragon';\nimport { registerRichText } from '@lexical/rich-text';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n// This workaround is no longer necessary in React 19,\n// but we currently support React >=17.x\n// https://github.com/facebook/react/pull/26395\nconst useLayoutEffectImpl = CAN_USE_DOM ? useLayoutEffect : useEffect;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction canShowPlaceholderFromCurrentEditorState(editor) {\n  const currentCanShowPlaceholder = editor.getEditorState().read($canShowPlaceholderCurry(editor.isComposing()));\n  return currentCanShowPlaceholder;\n}\nfunction useCanShowPlaceholder(editor) {\n  const [canShowPlaceholder, setCanShowPlaceholder] = useState(() => canShowPlaceholderFromCurrentEditorState(editor));\n  useLayoutEffectImpl(() => {\n    function resetCanShowPlaceholder() {\n      const currentCanShowPlaceholder = canShowPlaceholderFromCurrentEditorState(editor);\n      setCanShowPlaceholder(currentCanShowPlaceholder);\n    }\n    resetCanShowPlaceholder();\n    return mergeRegister(editor.registerUpdateListener(() => {\n      resetCanShowPlaceholder();\n    }), editor.registerEditableListener(() => {\n      resetCanShowPlaceholder();\n    }));\n  }, [editor]);\n  return canShowPlaceholder;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction useDecorators(editor, ErrorBoundary) {\n  const [decorators, setDecorators] = useState(() => editor.getDecorators());\n\n  // Subscribe to changes\n  useLayoutEffectImpl(() => {\n    return editor.registerDecoratorListener(nextDecorators => {\n      flushSync(() => {\n        setDecorators(nextDecorators);\n      });\n    });\n  }, [editor]);\n  useEffect(() => {\n    // If the content editable mounts before the subscription is added, then\n    // nothing will be rendered on initial pass. We can get around that by\n    // ensuring that we set the value.\n    setDecorators(editor.getDecorators());\n  }, [editor]);\n\n  // Return decorators defined as React Portals\n  return useMemo(() => {\n    const decoratedPortals = [];\n    const decoratorKeys = Object.keys(decorators);\n    for (let i = 0; i < decoratorKeys.length; i++) {\n      const nodeKey = decoratorKeys[i];\n      const reactDecorator = /*#__PURE__*/jsx(ErrorBoundary, {\n        onError: e => editor._onError(e),\n        children: /*#__PURE__*/jsx(Suspense, {\n          fallback: null,\n          children: decorators[nodeKey]\n        })\n      });\n      const element = editor.getElementByKey(nodeKey);\n      if (element !== null) {\n        decoratedPortals.push(/*#__PURE__*/createPortal(reactDecorator, element, nodeKey));\n      }\n    }\n    return decoratedPortals;\n  }, [ErrorBoundary, decorators, editor]);\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction useRichTextSetup(editor) {\n  useLayoutEffectImpl(() => {\n    return mergeRegister(registerRichText(editor), registerDragonSupport(editor));\n\n    // We only do this for init\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [editor]);\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction RichTextPlugin({\n  contentEditable,\n  // TODO Remove. This property is now part of ContentEditable\n  placeholder = null,\n  ErrorBoundary\n}) {\n  const [editor] = useLexicalComposerContext();\n  const decorators = useDecorators(editor, ErrorBoundary);\n  useRichTextSetup(editor);\n  return /*#__PURE__*/jsxs(Fragment, {\n    children: [contentEditable, /*#__PURE__*/jsx(Placeholder, {\n      content: placeholder\n    }), decorators]\n  });\n}\n\n// TODO remove\nfunction Placeholder({\n  content\n}) {\n  const [editor] = useLexicalComposerContext();\n  const showPlaceholder = useCanShowPlaceholder(editor);\n  const editable = useLexicalEditable();\n  if (!showPlaceholder) {\n    return null;\n  }\n  if (typeof content === 'function') {\n    return content(editable);\n  } else {\n    return content;\n  }\n}\n\nexport { RichTextPlugin };\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { $getSelection, $isRangeSelection, $isTextNode } from 'lexical';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction registerDragonSupport(editor) {\n  const origin = window.location.origin;\n  const handler = event => {\n    if (event.origin !== origin) {\n      return;\n    }\n    const rootElement = editor.getRootElement();\n    if (document.activeElement !== rootElement) {\n      return;\n    }\n    const data = event.data;\n    if (typeof data === 'string') {\n      let parsedData;\n      try {\n        parsedData = JSON.parse(data);\n      } catch (e) {\n        return;\n      }\n      if (parsedData && parsedData.protocol === 'nuanria_messaging' && parsedData.type === 'request') {\n        const payload = parsedData.payload;\n        if (payload && payload.functionId === 'makeChanges') {\n          const args = payload.args;\n          if (args) {\n            const [elementStart, elementLength, text, selStart, selLength, formatCommand] = args;\n            editor.update(() => {\n              const selection = $getSelection();\n              if ($isRangeSelection(selection)) {\n                const anchor = selection.anchor;\n                let anchorNode = anchor.getNode();\n                let setSelStart = 0;\n                let setSelEnd = 0;\n                if ($isTextNode(anchorNode)) {\n                  // set initial selection\n                  if (elementStart >= 0 && elementLength >= 0) {\n                    setSelStart = elementStart;\n                    setSelEnd = elementStart + elementLength;\n                    // If the offset is more than the end, make it the end\n                    selection.setTextNodeRange(anchorNode, setSelStart, anchorNode, setSelEnd);\n                  }\n                }\n                if (setSelStart !== setSelEnd || text !== '') {\n                  selection.insertRawText(text);\n                  anchorNode = anchor.getNode();\n                }\n                if ($isTextNode(anchorNode)) {\n                  // set final selection\n                  setSelStart = selStart;\n                  setSelEnd = selStart + selLength;\n                  const anchorNodeTextLength = anchorNode.getTextContentSize();\n                  // If the offset is more than the end, make it the end\n                  setSelStart = setSelStart > anchorNodeTextLength ? anchorNodeTextLength : setSelStart;\n                  setSelEnd = setSelEnd > anchorNodeTextLength ? anchorNodeTextLength : setSelEnd;\n                  selection.setTextNodeRange(anchorNode, setSelStart, anchorNode, setSelEnd);\n                }\n\n                // block the chrome extension from handling this event\n                event.stopImmediatePropagation();\n              }\n            });\n          }\n        }\n      }\n    }\n  };\n  window.addEventListener('message', handler, true);\n  return () => {\n    window.removeEventListener('message', handler, true);\n  };\n}\n\nexport { registerDragonSupport };\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { $sliceSelectedTextNodeContent } from '@lexical/selection';\nimport { isHTMLElement, isBlockDomNode } from '@lexical/utils';\nimport { $getRoot, $isElementNode, $cloneWithProperties, $isTextNode, isDocumentFragment, $isRootOrShadowRoot, $isBlockElementNode, $createLineBreakNode, ArtificialNode__DO_NOT_USE, isInlineDomNode, $createParagraphNode } from 'lexical';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n/**\n * How you parse your html string to get a document is left up to you. In the browser you can use the native\n * DOMParser API to generate a document (see clipboard.ts), but to use in a headless environment you can use JSDom\n * or an equivalent library and pass in the document here.\n */\nfunction $generateNodesFromDOM(editor, dom) {\n  const elements = dom.body ? dom.body.childNodes : [];\n  let lexicalNodes = [];\n  const allArtificialNodes = [];\n  for (let i = 0; i < elements.length; i++) {\n    const element = elements[i];\n    if (!IGNORE_TAGS.has(element.nodeName)) {\n      const lexicalNode = $createNodesFromDOM(element, editor, allArtificialNodes, false);\n      if (lexicalNode !== null) {\n        lexicalNodes = lexicalNodes.concat(lexicalNode);\n      }\n    }\n  }\n  $unwrapArtificalNodes(allArtificialNodes);\n  return lexicalNodes;\n}\nfunction $generateHtmlFromNodes(editor, selection) {\n  if (typeof document === 'undefined' || typeof window === 'undefined' && typeof global.window === 'undefined') {\n    throw new Error('To use $generateHtmlFromNodes in headless mode please initialize a headless browser implementation such as JSDom before calling this function.');\n  }\n  const container = document.createElement('div');\n  const root = $getRoot();\n  const topLevelChildren = root.getChildren();\n  for (let i = 0; i < topLevelChildren.length; i++) {\n    const topLevelNode = topLevelChildren[i];\n    $appendNodesToHTML(editor, topLevelNode, container, selection);\n  }\n  return container.innerHTML;\n}\nfunction $appendNodesToHTML(editor, currentNode, parentElement, selection = null) {\n  let shouldInclude = selection !== null ? currentNode.isSelected(selection) : true;\n  const shouldExclude = $isElementNode(currentNode) && currentNode.excludeFromCopy('html');\n  let target = currentNode;\n  if (selection !== null) {\n    let clone = $cloneWithProperties(currentNode);\n    clone = $isTextNode(clone) && selection !== null ? $sliceSelectedTextNodeContent(selection, clone) : clone;\n    target = clone;\n  }\n  const children = $isElementNode(target) ? target.getChildren() : [];\n  const registeredNode = editor._nodes.get(target.getType());\n  let exportOutput;\n\n  // Use HTMLConfig overrides, if available.\n  if (registeredNode && registeredNode.exportDOM !== undefined) {\n    exportOutput = registeredNode.exportDOM(editor, target);\n  } else {\n    exportOutput = target.exportDOM(editor);\n  }\n  const {\n    element,\n    after\n  } = exportOutput;\n  if (!element) {\n    return false;\n  }\n  const fragment = document.createDocumentFragment();\n  for (let i = 0; i < children.length; i++) {\n    const childNode = children[i];\n    const shouldIncludeChild = $appendNodesToHTML(editor, childNode, fragment, selection);\n    if (!shouldInclude && $isElementNode(currentNode) && shouldIncludeChild && currentNode.extractWithChild(childNode, selection, 'html')) {\n      shouldInclude = true;\n    }\n  }\n  if (shouldInclude && !shouldExclude) {\n    if (isHTMLElement(element) || isDocumentFragment(element)) {\n      element.append(fragment);\n    }\n    parentElement.append(element);\n    if (after) {\n      const newElement = after.call(target, element);\n      if (newElement) {\n        if (isDocumentFragment(element)) {\n          element.replaceChildren(newElement);\n        } else {\n          element.replaceWith(newElement);\n        }\n      }\n    }\n  } else {\n    parentElement.append(fragment);\n  }\n  return shouldInclude;\n}\nfunction getConversionFunction(domNode, editor) {\n  const {\n    nodeName\n  } = domNode;\n  const cachedConversions = editor._htmlConversions.get(nodeName.toLowerCase());\n  let currentConversion = null;\n  if (cachedConversions !== undefined) {\n    for (const cachedConversion of cachedConversions) {\n      const domConversion = cachedConversion(domNode);\n      if (domConversion !== null && (currentConversion === null ||\n      // Given equal priority, prefer the last registered importer\n      // which is typically an application custom node or HTMLConfig['import']\n      (currentConversion.priority || 0) <= (domConversion.priority || 0))) {\n        currentConversion = domConversion;\n      }\n    }\n  }\n  return currentConversion !== null ? currentConversion.conversion : null;\n}\nconst IGNORE_TAGS = new Set(['STYLE', 'SCRIPT']);\nfunction $createNodesFromDOM(node, editor, allArtificialNodes, hasBlockAncestorLexicalNode, forChildMap = new Map(), parentLexicalNode) {\n  let lexicalNodes = [];\n  if (IGNORE_TAGS.has(node.nodeName)) {\n    return lexicalNodes;\n  }\n  let currentLexicalNode = null;\n  const transformFunction = getConversionFunction(node, editor);\n  const transformOutput = transformFunction ? transformFunction(node) : null;\n  let postTransform = null;\n  if (transformOutput !== null) {\n    postTransform = transformOutput.after;\n    const transformNodes = transformOutput.node;\n    currentLexicalNode = Array.isArray(transformNodes) ? transformNodes[transformNodes.length - 1] : transformNodes;\n    if (currentLexicalNode !== null) {\n      for (const [, forChildFunction] of forChildMap) {\n        currentLexicalNode = forChildFunction(currentLexicalNode, parentLexicalNode);\n        if (!currentLexicalNode) {\n          break;\n        }\n      }\n      if (currentLexicalNode) {\n        lexicalNodes.push(...(Array.isArray(transformNodes) ? transformNodes : [currentLexicalNode]));\n      }\n    }\n    if (transformOutput.forChild != null) {\n      forChildMap.set(node.nodeName, transformOutput.forChild);\n    }\n  }\n\n  // If the DOM node doesn't have a transformer, we don't know what\n  // to do with it but we still need to process any childNodes.\n  const children = node.childNodes;\n  let childLexicalNodes = [];\n  const hasBlockAncestorLexicalNodeForChildren = currentLexicalNode != null && $isRootOrShadowRoot(currentLexicalNode) ? false : currentLexicalNode != null && $isBlockElementNode(currentLexicalNode) || hasBlockAncestorLexicalNode;\n  for (let i = 0; i < children.length; i++) {\n    childLexicalNodes.push(...$createNodesFromDOM(children[i], editor, allArtificialNodes, hasBlockAncestorLexicalNodeForChildren, new Map(forChildMap), currentLexicalNode));\n  }\n  if (postTransform != null) {\n    childLexicalNodes = postTransform(childLexicalNodes);\n  }\n  if (isBlockDomNode(node)) {\n    if (!hasBlockAncestorLexicalNodeForChildren) {\n      childLexicalNodes = wrapContinuousInlines(node, childLexicalNodes, $createParagraphNode);\n    } else {\n      childLexicalNodes = wrapContinuousInlines(node, childLexicalNodes, () => {\n        const artificialNode = new ArtificialNode__DO_NOT_USE();\n        allArtificialNodes.push(artificialNode);\n        return artificialNode;\n      });\n    }\n  }\n  if (currentLexicalNode == null) {\n    if (childLexicalNodes.length > 0) {\n      // If it hasn't been converted to a LexicalNode, we hoist its children\n      // up to the same level as it.\n      lexicalNodes = lexicalNodes.concat(childLexicalNodes);\n    } else {\n      if (isBlockDomNode(node) && isDomNodeBetweenTwoInlineNodes(node)) {\n        // Empty block dom node that hasnt been converted, we replace it with a linebreak if its between inline nodes\n        lexicalNodes = lexicalNodes.concat($createLineBreakNode());\n      }\n    }\n  } else {\n    if ($isElementNode(currentLexicalNode)) {\n      // If the current node is a ElementNode after conversion,\n      // we can append all the children to it.\n      currentLexicalNode.append(...childLexicalNodes);\n    }\n  }\n  return lexicalNodes;\n}\nfunction wrapContinuousInlines(domNode, nodes, createWrapperFn) {\n  const textAlign = domNode.style.textAlign;\n  const out = [];\n  let continuousInlines = [];\n  // wrap contiguous inline child nodes in para\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    if ($isBlockElementNode(node)) {\n      if (textAlign && !node.getFormat()) {\n        node.setFormat(textAlign);\n      }\n      out.push(node);\n    } else {\n      continuousInlines.push(node);\n      if (i === nodes.length - 1 || i < nodes.length - 1 && $isBlockElementNode(nodes[i + 1])) {\n        const wrapper = createWrapperFn();\n        wrapper.setFormat(textAlign);\n        wrapper.append(...continuousInlines);\n        out.push(wrapper);\n        continuousInlines = [];\n      }\n    }\n  }\n  return out;\n}\nfunction $unwrapArtificalNodes(allArtificialNodes) {\n  for (const node of allArtificialNodes) {\n    if (node.getNextSibling() instanceof ArtificialNode__DO_NOT_USE) {\n      node.insertAfter($createLineBreakNode());\n    }\n  }\n  // Replace artificial node with it's children\n  for (const node of allArtificialNodes) {\n    const children = node.getChildren();\n    for (const child of children) {\n      node.insertBefore(child);\n    }\n    node.remove();\n  }\n}\nfunction isDomNodeBetweenTwoInlineNodes(node) {\n  if (node.nextSibling == null || node.previousSibling == null) {\n    return false;\n  }\n  return isInlineDomNode(node.nextSibling) && isInlineDomNode(node.previousSibling);\n}\n\nexport { $generateHtmlFromNodes, $generateNodesFromDOM };\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { $generateHtmlFromNodes, $generateNodesFromDOM } from '@lexical/html';\nimport { $addNodeStyle, $sliceSelectedTextNodeContent } from '@lexical/selection';\nimport { objectKlassEquals } from '@lexical/utils';\nimport { $isRangeSelection, $getSelection, $createTabNode, SELECTION_INSERT_CLIPBOARD_NODES_COMMAND, $getRoot, $parseSerializedNode, $isTextNode, getDOMSelection, COPY_COMMAND, COMMAND_PRIORITY_CRITICAL, isSelectionWithinEditor, $getEditor, $isElementNode, $cloneWithProperties } from 'lexical';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Returns the *currently selected* Lexical content as an HTML string, relying on the\n * logic defined in the exportDOM methods on the LexicalNode classes. Note that\n * this will not return the HTML content of the entire editor (unless all the content is included\n * in the current selection).\n *\n * @param editor - LexicalEditor instance to get HTML content from\n * @param selection - The selection to use (default is $getSelection())\n * @returns a string of HTML content\n */\nfunction $getHtmlContent(editor, selection = $getSelection()) {\n  if (selection == null) {\n    {\n      throw Error(`Expected valid LexicalSelection`);\n    }\n  }\n\n  // If we haven't selected anything\n  if ($isRangeSelection(selection) && selection.isCollapsed() || selection.getNodes().length === 0) {\n    return '';\n  }\n  return $generateHtmlFromNodes(editor, selection);\n}\n\n/**\n * Returns the *currently selected* Lexical content as a JSON string, relying on the\n * logic defined in the exportJSON methods on the LexicalNode classes. Note that\n * this will not return the JSON content of the entire editor (unless all the content is included\n * in the current selection).\n *\n * @param editor  - LexicalEditor instance to get the JSON content from\n * @param selection - The selection to use (default is $getSelection())\n * @returns\n */\nfunction $getLexicalContent(editor, selection = $getSelection()) {\n  if (selection == null) {\n    {\n      throw Error(`Expected valid LexicalSelection`);\n    }\n  }\n\n  // If we haven't selected anything\n  if ($isRangeSelection(selection) && selection.isCollapsed() || selection.getNodes().length === 0) {\n    return null;\n  }\n  return JSON.stringify($generateJSONFromSelectedNodes(editor, selection));\n}\n\n/**\n * Attempts to insert content of the mime-types text/plain or text/uri-list from\n * the provided DataTransfer object into the editor at the provided selection.\n * text/uri-list is only used if text/plain is not also provided.\n *\n * @param dataTransfer an object conforming to the [DataTransfer interface] (https://html.spec.whatwg.org/multipage/dnd.html#the-datatransfer-interface)\n * @param selection the selection to use as the insertion point for the content in the DataTransfer object\n */\nfunction $insertDataTransferForPlainText(dataTransfer, selection) {\n  const text = dataTransfer.getData('text/plain') || dataTransfer.getData('text/uri-list');\n  if (text != null) {\n    selection.insertRawText(text);\n  }\n}\n\n/**\n * Attempts to insert content of the mime-types application/x-lexical-editor, text/html,\n * text/plain, or text/uri-list (in descending order of priority) from the provided DataTransfer\n * object into the editor at the provided selection.\n *\n * @param dataTransfer an object conforming to the [DataTransfer interface] (https://html.spec.whatwg.org/multipage/dnd.html#the-datatransfer-interface)\n * @param selection the selection to use as the insertion point for the content in the DataTransfer object\n * @param editor the LexicalEditor the content is being inserted into.\n */\nfunction $insertDataTransferForRichText(dataTransfer, selection, editor) {\n  const lexicalString = dataTransfer.getData('application/x-lexical-editor');\n  if (lexicalString) {\n    try {\n      const payload = JSON.parse(lexicalString);\n      if (payload.namespace === editor._config.namespace && Array.isArray(payload.nodes)) {\n        const nodes = $generateNodesFromSerializedNodes(payload.nodes);\n        return $insertGeneratedNodes(editor, nodes, selection);\n      }\n    } catch (_unused) {\n      // Fail silently.\n    }\n  }\n  const htmlString = dataTransfer.getData('text/html');\n  if (htmlString) {\n    try {\n      const parser = new DOMParser();\n      const dom = parser.parseFromString(trustHTML(htmlString), 'text/html');\n      const nodes = $generateNodesFromDOM(editor, dom);\n      return $insertGeneratedNodes(editor, nodes, selection);\n    } catch (_unused2) {\n      // Fail silently.\n    }\n  }\n\n  // Multi-line plain text in rich text mode pasted as separate paragraphs\n  // instead of single paragraph with linebreaks.\n  // Webkit-specific: Supports read 'text/uri-list' in clipboard.\n  const text = dataTransfer.getData('text/plain') || dataTransfer.getData('text/uri-list');\n  if (text != null) {\n    if ($isRangeSelection(selection)) {\n      const parts = text.split(/(\\r?\\n|\\t)/);\n      if (parts[parts.length - 1] === '') {\n        parts.pop();\n      }\n      for (let i = 0; i < parts.length; i++) {\n        const currentSelection = $getSelection();\n        if ($isRangeSelection(currentSelection)) {\n          const part = parts[i];\n          if (part === '\\n' || part === '\\r\\n') {\n            currentSelection.insertParagraph();\n          } else if (part === '\\t') {\n            currentSelection.insertNodes([$createTabNode()]);\n          } else {\n            currentSelection.insertText(part);\n          }\n        }\n      }\n    } else {\n      selection.insertRawText(text);\n    }\n  }\n}\nfunction trustHTML(html) {\n  if (window.trustedTypes && window.trustedTypes.createPolicy) {\n    const policy = window.trustedTypes.createPolicy('lexical', {\n      createHTML: input => input\n    });\n    return policy.createHTML(html);\n  }\n  return html;\n}\n\n/**\n * Inserts Lexical nodes into the editor using different strategies depending on\n * some simple selection-based heuristics. If you're looking for a generic way to\n * to insert nodes into the editor at a specific selection point, you probably want\n * {@link lexical.$insertNodes}\n *\n * @param editor LexicalEditor instance to insert the nodes into.\n * @param nodes The nodes to insert.\n * @param selection The selection to insert the nodes into.\n */\nfunction $insertGeneratedNodes(editor, nodes, selection) {\n  if (!editor.dispatchCommand(SELECTION_INSERT_CLIPBOARD_NODES_COMMAND, {\n    nodes,\n    selection\n  })) {\n    selection.insertNodes(nodes);\n  }\n  return;\n}\nfunction exportNodeToJSON(node) {\n  const serializedNode = node.exportJSON();\n  const nodeClass = node.constructor;\n  if (serializedNode.type !== nodeClass.getType()) {\n    {\n      throw Error(`LexicalNode: Node ${nodeClass.name} does not implement .exportJSON().`);\n    }\n  }\n  if ($isElementNode(node)) {\n    const serializedChildren = serializedNode.children;\n    if (!Array.isArray(serializedChildren)) {\n      {\n        throw Error(`LexicalNode: Node ${nodeClass.name} is an element but .exportJSON() does not have a children array.`);\n      }\n    }\n  }\n  return serializedNode;\n}\nfunction $appendNodesToJSON(editor, selection, currentNode, targetArray = []) {\n  let shouldInclude = selection !== null ? currentNode.isSelected(selection) : true;\n  const shouldExclude = $isElementNode(currentNode) && currentNode.excludeFromCopy('html');\n  let target = currentNode;\n  if (selection !== null) {\n    let clone = $cloneWithProperties(currentNode);\n    clone = $isTextNode(clone) && selection !== null ? $sliceSelectedTextNodeContent(selection, clone) : clone;\n    target = clone;\n  }\n  const children = $isElementNode(target) ? target.getChildren() : [];\n  const serializedNode = exportNodeToJSON(target);\n\n  // TODO: TextNode calls getTextContent() (NOT node.__text) within its exportJSON method\n  // which uses getLatest() to get the text from the original node with the same key.\n  // This is a deeper issue with the word \"clone\" here, it's still a reference to the\n  // same node as far as the LexicalEditor is concerned since it shares a key.\n  // We need a way to create a clone of a Node in memory with its own key, but\n  // until then this hack will work for the selected text extract use case.\n  if ($isTextNode(target)) {\n    const text = target.__text;\n    // If an uncollapsed selection ends or starts at the end of a line of specialized,\n    // TextNodes, such as code tokens, we will get a 'blank' TextNode here, i.e., one\n    // with text of length 0. We don't want this, it makes a confusing mess. Reset!\n    if (text.length > 0) {\n      serializedNode.text = text;\n    } else {\n      shouldInclude = false;\n    }\n  }\n  for (let i = 0; i < children.length; i++) {\n    const childNode = children[i];\n    const shouldIncludeChild = $appendNodesToJSON(editor, selection, childNode, serializedNode.children);\n    if (!shouldInclude && $isElementNode(currentNode) && shouldIncludeChild && currentNode.extractWithChild(childNode, selection, 'clone')) {\n      shouldInclude = true;\n    }\n  }\n  if (shouldInclude && !shouldExclude) {\n    targetArray.push(serializedNode);\n  } else if (Array.isArray(serializedNode.children)) {\n    for (let i = 0; i < serializedNode.children.length; i++) {\n      const serializedChildNode = serializedNode.children[i];\n      targetArray.push(serializedChildNode);\n    }\n  }\n  return shouldInclude;\n}\n\n// TODO why $ function with Editor instance?\n/**\n * Gets the Lexical JSON of the nodes inside the provided Selection.\n *\n * @param editor LexicalEditor to get the JSON content from.\n * @param selection Selection to get the JSON content from.\n * @returns an object with the editor namespace and a list of serializable nodes as JavaScript objects.\n */\nfunction $generateJSONFromSelectedNodes(editor, selection) {\n  const nodes = [];\n  const root = $getRoot();\n  const topLevelChildren = root.getChildren();\n  for (let i = 0; i < topLevelChildren.length; i++) {\n    const topLevelNode = topLevelChildren[i];\n    $appendNodesToJSON(editor, selection, topLevelNode, nodes);\n  }\n  return {\n    namespace: editor._config.namespace,\n    nodes\n  };\n}\n\n/**\n * This method takes an array of objects conforming to the BaseSeralizedNode interface and returns\n * an Array containing instances of the corresponding LexicalNode classes registered on the editor.\n * Normally, you'd get an Array of BaseSerialized nodes from {@link $generateJSONFromSelectedNodes}\n *\n * @param serializedNodes an Array of objects conforming to the BaseSerializedNode interface.\n * @returns an Array of Lexical Node objects.\n */\nfunction $generateNodesFromSerializedNodes(serializedNodes) {\n  const nodes = [];\n  for (let i = 0; i < serializedNodes.length; i++) {\n    const serializedNode = serializedNodes[i];\n    const node = $parseSerializedNode(serializedNode);\n    if ($isTextNode(node)) {\n      $addNodeStyle(node);\n    }\n    nodes.push(node);\n  }\n  return nodes;\n}\nconst EVENT_LATENCY = 50;\nlet clipboardEventTimeout = null;\n\n// TODO custom selection\n// TODO potentially have a node customizable version for plain text\n/**\n * Copies the content of the current selection to the clipboard in\n * text/plain, text/html, and application/x-lexical-editor (Lexical JSON)\n * formats.\n *\n * @param editor the LexicalEditor instance to copy content from\n * @param event the native browser ClipboardEvent to add the content to.\n * @returns\n */\nasync function copyToClipboard(editor, event, data) {\n  if (clipboardEventTimeout !== null) {\n    // Prevent weird race conditions that can happen when this function is run multiple times\n    // synchronously. In the future, we can do better, we can cancel/override the previously running job.\n    return false;\n  }\n  if (event !== null) {\n    return new Promise((resolve, reject) => {\n      editor.update(() => {\n        resolve($copyToClipboardEvent(editor, event, data));\n      });\n    });\n  }\n  const rootElement = editor.getRootElement();\n  const windowDocument = editor._window == null ? window.document : editor._window.document;\n  const domSelection = getDOMSelection(editor._window);\n  if (rootElement === null || domSelection === null) {\n    return false;\n  }\n  const element = windowDocument.createElement('span');\n  element.style.cssText = 'position: fixed; top: -1000px;';\n  element.append(windowDocument.createTextNode('#'));\n  rootElement.append(element);\n  const range = new Range();\n  range.setStart(element, 0);\n  range.setEnd(element, 1);\n  domSelection.removeAllRanges();\n  domSelection.addRange(range);\n  return new Promise((resolve, reject) => {\n    const removeListener = editor.registerCommand(COPY_COMMAND, secondEvent => {\n      if (objectKlassEquals(secondEvent, ClipboardEvent)) {\n        removeListener();\n        if (clipboardEventTimeout !== null) {\n          window.clearTimeout(clipboardEventTimeout);\n          clipboardEventTimeout = null;\n        }\n        resolve($copyToClipboardEvent(editor, secondEvent, data));\n      }\n      // Block the entire copy flow while we wait for the next ClipboardEvent\n      return true;\n    }, COMMAND_PRIORITY_CRITICAL);\n    // If the above hack execCommand hack works, this timeout code should never fire. Otherwise,\n    // the listener will be quickly freed so that the user can reuse it again\n    clipboardEventTimeout = window.setTimeout(() => {\n      removeListener();\n      clipboardEventTimeout = null;\n      resolve(false);\n    }, EVENT_LATENCY);\n    windowDocument.execCommand('copy');\n    element.remove();\n  });\n}\n\n// TODO shouldn't pass editor (pass namespace directly)\nfunction $copyToClipboardEvent(editor, event, data) {\n  if (data === undefined) {\n    const domSelection = getDOMSelection(editor._window);\n    if (!domSelection) {\n      return false;\n    }\n    const anchorDOM = domSelection.anchorNode;\n    const focusDOM = domSelection.focusNode;\n    if (anchorDOM !== null && focusDOM !== null && !isSelectionWithinEditor(editor, anchorDOM, focusDOM)) {\n      return false;\n    }\n    const selection = $getSelection();\n    if (selection === null) {\n      return false;\n    }\n    data = $getClipboardDataFromSelection(selection);\n  }\n  event.preventDefault();\n  const clipboardData = event.clipboardData;\n  if (clipboardData === null) {\n    return false;\n  }\n  setLexicalClipboardDataTransfer(clipboardData, data);\n  return true;\n}\nconst clipboardDataFunctions = [['text/html', $getHtmlContent], ['application/x-lexical-editor', $getLexicalContent]];\n\n/**\n * Serialize the content of the current selection to strings in\n * text/plain, text/html, and application/x-lexical-editor (Lexical JSON)\n * formats (as available).\n *\n * @param selection the selection to serialize (defaults to $getSelection())\n * @returns LexicalClipboardData\n */\nfunction $getClipboardDataFromSelection(selection = $getSelection()) {\n  const clipboardData = {\n    'text/plain': selection ? selection.getTextContent() : ''\n  };\n  if (selection) {\n    const editor = $getEditor();\n    for (const [mimeType, $editorFn] of clipboardDataFunctions) {\n      const v = $editorFn(editor, selection);\n      if (v !== null) {\n        clipboardData[mimeType] = v;\n      }\n    }\n  }\n  return clipboardData;\n}\n\n/**\n * Call setData on the given clipboardData for each MIME type present\n * in the given data (from {@link $getClipboardDataFromSelection})\n *\n * @param clipboardData the event.clipboardData to populate from data\n * @param data The lexical data\n */\nfunction setLexicalClipboardDataTransfer(clipboardData, data) {\n  for (const k in data) {\n    const v = data[k];\n    if (v !== undefined) {\n      clipboardData.setData(k, v);\n    }\n  }\n}\n\nexport { $generateJSONFromSelectedNodes, $generateNodesFromSerializedNodes, $getClipboardDataFromSelection, $getHtmlContent, $getLexicalContent, $insertDataTransferForPlainText, $insertDataTransferForRichText, $insertGeneratedNodes, copyToClipboard, setLexicalClipboardDataTransfer };\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { $insertDataTransferForRichText, copyToClipboard } from '@lexical/clipboard';\nimport { $shouldOverrideDefaultCharacterSelection, $moveCharacter } from '@lexical/selection';\nimport { addClassNamesToElement, isHTMLElement, objectKlassEquals, mergeRegister, $findMatchingParent, $getNearestBlockElementAncestorOrThrow } from '@lexical/utils';\nimport { createCommand, ElementNode, $createParagraphNode, $applyNodeReplacement, setNodeIndentFromDOM, CLICK_COMMAND, $getSelection, $isNodeSelection, DELETE_CHARACTER_COMMAND, $isRangeSelection, COMMAND_PRIORITY_EDITOR, DELETE_WORD_COMMAND, DELETE_LINE_COMMAND, CONTROLLED_TEXT_INSERTION_COMMAND, REMOVE_TEXT_COMMAND, FORMAT_TEXT_COMMAND, FORMAT_ELEMENT_COMMAND, $isElementNode, INSERT_LINE_BREAK_COMMAND, INSERT_PARAGRAPH_COMMAND, INSERT_TAB_COMMAND, $insertNodes, $createTabNode, INDENT_CONTENT_COMMAND, OUTDENT_CONTENT_COMMAND, KEY_ARROW_UP_COMMAND, $getAdjacentNode, $isDecoratorNode, KEY_ARROW_DOWN_COMMAND, KEY_ARROW_LEFT_COMMAND, KEY_ARROW_RIGHT_COMMAND, KEY_BACKSPACE_COMMAND, $isRootNode, KEY_DELETE_COMMAND, KEY_ENTER_COMMAND, KEY_ESCAPE_COMMAND, DROP_COMMAND, $getNearestNodeFromDOMNode, $createRangeSelection, $isTextNode, $normalizeSelection__EXPERIMENTAL, $setSelection, DRAGSTART_COMMAND, DRAGOVER_COMMAND, SELECT_ALL_COMMAND, $selectAll, COPY_COMMAND, CUT_COMMAND, PASTE_COMMAND, isDOMNode, isSelectionCapturedInDecoratorInput, KEY_SPACE_COMMAND, KEY_TAB_COMMAND, $getRoot } from 'lexical';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction caretFromPoint(x, y) {\n  if (typeof document.caretRangeFromPoint !== 'undefined') {\n    const range = document.caretRangeFromPoint(x, y);\n    if (range === null) {\n      return null;\n    }\n    return {\n      node: range.startContainer,\n      offset: range.startOffset\n    };\n    // @ts-ignore\n  } else if (document.caretPositionFromPoint !== 'undefined') {\n    // @ts-ignore FF - no types\n    const range = document.caretPositionFromPoint(x, y);\n    if (range === null) {\n      return null;\n    }\n    return {\n      node: range.offsetNode,\n      offset: range.offset\n    };\n  } else {\n    // Gracefully handle IE\n    return null;\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst documentMode = CAN_USE_DOM && 'documentMode' in document ? document.documentMode : null;\nconst CAN_USE_BEFORE_INPUT = CAN_USE_DOM && 'InputEvent' in window && !documentMode ? 'getTargetRanges' in new window.InputEvent('input') : false;\nconst IS_SAFARI = CAN_USE_DOM && /Version\\/[\\d.]+.*Safari/.test(navigator.userAgent);\nconst IS_IOS = CAN_USE_DOM && /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n\n// Keep these in case we need to use them in the future.\n// export const IS_WINDOWS: boolean = CAN_USE_DOM && /Win/.test(navigator.platform);\nconst IS_CHROME = CAN_USE_DOM && /^(?=.*Chrome).*/i.test(navigator.userAgent);\nconst IS_APPLE_WEBKIT = CAN_USE_DOM && /AppleWebKit\\/[\\d.]+/.test(navigator.userAgent) && !IS_CHROME;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst DRAG_DROP_PASTE = createCommand('DRAG_DROP_PASTE_FILE');\n/** @noInheritDoc */\nclass QuoteNode extends ElementNode {\n  static getType() {\n    return 'quote';\n  }\n  static clone(node) {\n    return new QuoteNode(node.__key);\n  }\n  constructor(key) {\n    super(key);\n  }\n\n  // View\n\n  createDOM(config) {\n    const element = document.createElement('blockquote');\n    addClassNamesToElement(element, config.theme.quote);\n    return element;\n  }\n  updateDOM(prevNode, dom) {\n    return false;\n  }\n  static importDOM() {\n    return {\n      blockquote: node => ({\n        conversion: $convertBlockquoteElement,\n        priority: 0\n      })\n    };\n  }\n  exportDOM(editor) {\n    const {\n      element\n    } = super.exportDOM(editor);\n    if (isHTMLElement(element)) {\n      if (this.isEmpty()) {\n        element.append(document.createElement('br'));\n      }\n      const formatType = this.getFormatType();\n      element.style.textAlign = formatType;\n      const direction = this.getDirection();\n      if (direction) {\n        element.dir = direction;\n      }\n    }\n    return {\n      element\n    };\n  }\n  static importJSON(serializedNode) {\n    const node = $createQuoteNode();\n    node.setFormat(serializedNode.format);\n    node.setIndent(serializedNode.indent);\n    node.setDirection(serializedNode.direction);\n    return node;\n  }\n\n  // Mutation\n\n  insertNewAfter(_, restoreSelection) {\n    const newBlock = $createParagraphNode();\n    const direction = this.getDirection();\n    newBlock.setDirection(direction);\n    this.insertAfter(newBlock, restoreSelection);\n    return newBlock;\n  }\n  collapseAtStart() {\n    const paragraph = $createParagraphNode();\n    const children = this.getChildren();\n    children.forEach(child => paragraph.append(child));\n    this.replace(paragraph);\n    return true;\n  }\n  canMergeWhenEmpty() {\n    return true;\n  }\n}\nfunction $createQuoteNode() {\n  return $applyNodeReplacement(new QuoteNode());\n}\nfunction $isQuoteNode(node) {\n  return node instanceof QuoteNode;\n}\n/** @noInheritDoc */\nclass HeadingNode extends ElementNode {\n  /** @internal */\n\n  static getType() {\n    return 'heading';\n  }\n  static clone(node) {\n    return new HeadingNode(node.__tag, node.__key);\n  }\n  constructor(tag, key) {\n    super(key);\n    this.__tag = tag;\n  }\n  getTag() {\n    return this.__tag;\n  }\n\n  // View\n\n  createDOM(config) {\n    const tag = this.__tag;\n    const element = document.createElement(tag);\n    const theme = config.theme;\n    const classNames = theme.heading;\n    if (classNames !== undefined) {\n      const className = classNames[tag];\n      addClassNamesToElement(element, className);\n    }\n    return element;\n  }\n  updateDOM(prevNode, dom) {\n    return false;\n  }\n  static importDOM() {\n    return {\n      h1: node => ({\n        conversion: $convertHeadingElement,\n        priority: 0\n      }),\n      h2: node => ({\n        conversion: $convertHeadingElement,\n        priority: 0\n      }),\n      h3: node => ({\n        conversion: $convertHeadingElement,\n        priority: 0\n      }),\n      h4: node => ({\n        conversion: $convertHeadingElement,\n        priority: 0\n      }),\n      h5: node => ({\n        conversion: $convertHeadingElement,\n        priority: 0\n      }),\n      h6: node => ({\n        conversion: $convertHeadingElement,\n        priority: 0\n      }),\n      p: node => {\n        // domNode is a <p> since we matched it by nodeName\n        const paragraph = node;\n        const firstChild = paragraph.firstChild;\n        if (firstChild !== null && isGoogleDocsTitle(firstChild)) {\n          return {\n            conversion: () => ({\n              node: null\n            }),\n            priority: 3\n          };\n        }\n        return null;\n      },\n      span: node => {\n        if (isGoogleDocsTitle(node)) {\n          return {\n            conversion: domNode => {\n              return {\n                node: $createHeadingNode('h1')\n              };\n            },\n            priority: 3\n          };\n        }\n        return null;\n      }\n    };\n  }\n  exportDOM(editor) {\n    const {\n      element\n    } = super.exportDOM(editor);\n    if (isHTMLElement(element)) {\n      if (this.isEmpty()) {\n        element.append(document.createElement('br'));\n      }\n      const formatType = this.getFormatType();\n      element.style.textAlign = formatType;\n      const direction = this.getDirection();\n      if (direction) {\n        element.dir = direction;\n      }\n    }\n    return {\n      element\n    };\n  }\n  static importJSON(serializedNode) {\n    const node = $createHeadingNode(serializedNode.tag);\n    node.setFormat(serializedNode.format);\n    node.setIndent(serializedNode.indent);\n    node.setDirection(serializedNode.direction);\n    return node;\n  }\n  exportJSON() {\n    return {\n      ...super.exportJSON(),\n      tag: this.getTag()\n    };\n  }\n\n  // Mutation\n  insertNewAfter(selection, restoreSelection = true) {\n    const anchorOffet = selection ? selection.anchor.offset : 0;\n    const lastDesc = this.getLastDescendant();\n    const isAtEnd = !lastDesc || selection && selection.anchor.key === lastDesc.getKey() && anchorOffet === lastDesc.getTextContentSize();\n    const newElement = isAtEnd || !selection ? $createParagraphNode() : $createHeadingNode(this.getTag());\n    const direction = this.getDirection();\n    newElement.setDirection(direction);\n    this.insertAfter(newElement, restoreSelection);\n    if (anchorOffet === 0 && !this.isEmpty() && selection) {\n      const paragraph = $createParagraphNode();\n      paragraph.select();\n      this.replace(paragraph, true);\n    }\n    return newElement;\n  }\n  collapseAtStart() {\n    const newElement = !this.isEmpty() ? $createHeadingNode(this.getTag()) : $createParagraphNode();\n    const children = this.getChildren();\n    children.forEach(child => newElement.append(child));\n    this.replace(newElement);\n    return true;\n  }\n  extractWithChild() {\n    return true;\n  }\n}\nfunction isGoogleDocsTitle(domNode) {\n  if (domNode.nodeName.toLowerCase() === 'span') {\n    return domNode.style.fontSize === '26pt';\n  }\n  return false;\n}\nfunction $convertHeadingElement(element) {\n  const nodeName = element.nodeName.toLowerCase();\n  let node = null;\n  if (nodeName === 'h1' || nodeName === 'h2' || nodeName === 'h3' || nodeName === 'h4' || nodeName === 'h5' || nodeName === 'h6') {\n    node = $createHeadingNode(nodeName);\n    if (element.style !== null) {\n      setNodeIndentFromDOM(element, node);\n      node.setFormat(element.style.textAlign);\n    }\n  }\n  return {\n    node\n  };\n}\nfunction $convertBlockquoteElement(element) {\n  const node = $createQuoteNode();\n  if (element.style !== null) {\n    node.setFormat(element.style.textAlign);\n    setNodeIndentFromDOM(element, node);\n  }\n  return {\n    node\n  };\n}\nfunction $createHeadingNode(headingTag) {\n  return $applyNodeReplacement(new HeadingNode(headingTag));\n}\nfunction $isHeadingNode(node) {\n  return node instanceof HeadingNode;\n}\nfunction onPasteForRichText(event, editor) {\n  event.preventDefault();\n  editor.update(() => {\n    const selection = $getSelection();\n    const clipboardData = objectKlassEquals(event, InputEvent) || objectKlassEquals(event, KeyboardEvent) ? null : event.clipboardData;\n    if (clipboardData != null && selection !== null) {\n      $insertDataTransferForRichText(clipboardData, selection, editor);\n    }\n  }, {\n    tag: 'paste'\n  });\n}\nasync function onCutForRichText(event, editor) {\n  await copyToClipboard(editor, objectKlassEquals(event, ClipboardEvent) ? event : null);\n  editor.update(() => {\n    const selection = $getSelection();\n    if ($isRangeSelection(selection)) {\n      selection.removeText();\n    } else if ($isNodeSelection(selection)) {\n      selection.getNodes().forEach(node => node.remove());\n    }\n  });\n}\n\n// Clipboard may contain files that we aren't allowed to read. While the event is arguably useless,\n// in certain occasions, we want to know whether it was a file transfer, as opposed to text. We\n// control this with the first boolean flag.\nfunction eventFiles(event) {\n  let dataTransfer = null;\n  if (objectKlassEquals(event, DragEvent)) {\n    dataTransfer = event.dataTransfer;\n  } else if (objectKlassEquals(event, ClipboardEvent)) {\n    dataTransfer = event.clipboardData;\n  }\n  if (dataTransfer === null) {\n    return [false, [], false];\n  }\n  const types = dataTransfer.types;\n  const hasFiles = types.includes('Files');\n  const hasContent = types.includes('text/html') || types.includes('text/plain');\n  return [hasFiles, Array.from(dataTransfer.files), hasContent];\n}\nfunction $handleIndentAndOutdent(indentOrOutdent) {\n  const selection = $getSelection();\n  if (!$isRangeSelection(selection)) {\n    return false;\n  }\n  const alreadyHandled = new Set();\n  const nodes = selection.getNodes();\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    const key = node.getKey();\n    if (alreadyHandled.has(key)) {\n      continue;\n    }\n    const parentBlock = $findMatchingParent(node, parentNode => $isElementNode(parentNode) && !parentNode.isInline());\n    if (parentBlock === null) {\n      continue;\n    }\n    const parentKey = parentBlock.getKey();\n    if (parentBlock.canIndent() && !alreadyHandled.has(parentKey)) {\n      alreadyHandled.add(parentKey);\n      indentOrOutdent(parentBlock);\n    }\n  }\n  return alreadyHandled.size > 0;\n}\nfunction $isTargetWithinDecorator(target) {\n  const node = $getNearestNodeFromDOMNode(target);\n  return $isDecoratorNode(node);\n}\nfunction $isSelectionAtEndOfRoot(selection) {\n  const focus = selection.focus;\n  return focus.key === 'root' && focus.offset === $getRoot().getChildrenSize();\n}\n\n/**\n * Resets the capitalization of the selection to default.\n * Called when the user presses space, tab, or enter key.\n * @param selection The selection to reset the capitalization of.\n */\nfunction $resetCapitalization(selection) {\n  for (const format of ['lowercase', 'uppercase', 'capitalize']) {\n    if (selection.hasFormat(format)) {\n      selection.toggleFormat(format);\n    }\n  }\n}\nfunction registerRichText(editor) {\n  const removeListener = mergeRegister(editor.registerCommand(CLICK_COMMAND, payload => {\n    const selection = $getSelection();\n    if ($isNodeSelection(selection)) {\n      selection.clear();\n      return true;\n    }\n    return false;\n  }, 0), editor.registerCommand(DELETE_CHARACTER_COMMAND, isBackward => {\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    selection.deleteCharacter(isBackward);\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(DELETE_WORD_COMMAND, isBackward => {\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    selection.deleteWord(isBackward);\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(DELETE_LINE_COMMAND, isBackward => {\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    selection.deleteLine(isBackward);\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(CONTROLLED_TEXT_INSERTION_COMMAND, eventOrText => {\n    const selection = $getSelection();\n    if (typeof eventOrText === 'string') {\n      if (selection !== null) {\n        selection.insertText(eventOrText);\n      }\n    } else {\n      if (selection === null) {\n        return false;\n      }\n      const dataTransfer = eventOrText.dataTransfer;\n      if (dataTransfer != null) {\n        $insertDataTransferForRichText(dataTransfer, selection, editor);\n      } else if ($isRangeSelection(selection)) {\n        const data = eventOrText.data;\n        if (data) {\n          selection.insertText(data);\n        }\n        return true;\n      }\n    }\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(REMOVE_TEXT_COMMAND, () => {\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    selection.removeText();\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(FORMAT_TEXT_COMMAND, format => {\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    selection.formatText(format);\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(FORMAT_ELEMENT_COMMAND, format => {\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection) && !$isNodeSelection(selection)) {\n      return false;\n    }\n    const nodes = selection.getNodes();\n    for (const node of nodes) {\n      const element = $findMatchingParent(node, parentNode => $isElementNode(parentNode) && !parentNode.isInline());\n      if (element !== null) {\n        element.setFormat(format);\n      }\n    }\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(INSERT_LINE_BREAK_COMMAND, selectStart => {\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    selection.insertLineBreak(selectStart);\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(INSERT_PARAGRAPH_COMMAND, () => {\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    selection.insertParagraph();\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(INSERT_TAB_COMMAND, () => {\n    $insertNodes([$createTabNode()]);\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(INDENT_CONTENT_COMMAND, () => {\n    return $handleIndentAndOutdent(block => {\n      const indent = block.getIndent();\n      block.setIndent(indent + 1);\n    });\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(OUTDENT_CONTENT_COMMAND, () => {\n    return $handleIndentAndOutdent(block => {\n      const indent = block.getIndent();\n      if (indent > 0) {\n        block.setIndent(indent - 1);\n      }\n    });\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(KEY_ARROW_UP_COMMAND, event => {\n    const selection = $getSelection();\n    if ($isNodeSelection(selection) && !$isTargetWithinDecorator(event.target)) {\n      // If selection is on a node, let's try and move selection\n      // back to being a range selection.\n      const nodes = selection.getNodes();\n      if (nodes.length > 0) {\n        nodes[0].selectPrevious();\n        return true;\n      }\n    } else if ($isRangeSelection(selection)) {\n      const possibleNode = $getAdjacentNode(selection.focus, true);\n      if (!event.shiftKey && $isDecoratorNode(possibleNode) && !possibleNode.isIsolated() && !possibleNode.isInline()) {\n        possibleNode.selectPrevious();\n        event.preventDefault();\n        return true;\n      }\n    }\n    return false;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(KEY_ARROW_DOWN_COMMAND, event => {\n    const selection = $getSelection();\n    if ($isNodeSelection(selection)) {\n      // If selection is on a node, let's try and move selection\n      // back to being a range selection.\n      const nodes = selection.getNodes();\n      if (nodes.length > 0) {\n        nodes[0].selectNext(0, 0);\n        return true;\n      }\n    } else if ($isRangeSelection(selection)) {\n      if ($isSelectionAtEndOfRoot(selection)) {\n        event.preventDefault();\n        return true;\n      }\n      const possibleNode = $getAdjacentNode(selection.focus, false);\n      if (!event.shiftKey && $isDecoratorNode(possibleNode) && !possibleNode.isIsolated() && !possibleNode.isInline()) {\n        possibleNode.selectNext();\n        event.preventDefault();\n        return true;\n      }\n    }\n    return false;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(KEY_ARROW_LEFT_COMMAND, event => {\n    const selection = $getSelection();\n    if ($isNodeSelection(selection)) {\n      // If selection is on a node, let's try and move selection\n      // back to being a range selection.\n      const nodes = selection.getNodes();\n      if (nodes.length > 0) {\n        event.preventDefault();\n        nodes[0].selectPrevious();\n        return true;\n      }\n    }\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    if ($shouldOverrideDefaultCharacterSelection(selection, true)) {\n      const isHoldingShift = event.shiftKey;\n      event.preventDefault();\n      $moveCharacter(selection, isHoldingShift, true);\n      return true;\n    }\n    return false;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(KEY_ARROW_RIGHT_COMMAND, event => {\n    const selection = $getSelection();\n    if ($isNodeSelection(selection) && !$isTargetWithinDecorator(event.target)) {\n      // If selection is on a node, let's try and move selection\n      // back to being a range selection.\n      const nodes = selection.getNodes();\n      if (nodes.length > 0) {\n        event.preventDefault();\n        nodes[0].selectNext(0, 0);\n        return true;\n      }\n    }\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    const isHoldingShift = event.shiftKey;\n    if ($shouldOverrideDefaultCharacterSelection(selection, false)) {\n      event.preventDefault();\n      $moveCharacter(selection, isHoldingShift, false);\n      return true;\n    }\n    return false;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(KEY_BACKSPACE_COMMAND, event => {\n    if ($isTargetWithinDecorator(event.target)) {\n      return false;\n    }\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    const {\n      anchor\n    } = selection;\n    const anchorNode = anchor.getNode();\n    if (selection.isCollapsed() && anchor.offset === 0 && !$isRootNode(anchorNode)) {\n      const element = $getNearestBlockElementAncestorOrThrow(anchorNode);\n      if (element.getIndent() > 0) {\n        event.preventDefault();\n        return editor.dispatchCommand(OUTDENT_CONTENT_COMMAND, undefined);\n      }\n    }\n\n    // Exception handling for iOS native behavior instead of Lexical's behavior when using Korean on iOS devices.\n    // more details - https://github.com/facebook/lexical/issues/5841\n    if (IS_IOS && navigator.language === 'ko-KR') {\n      return false;\n    }\n    event.preventDefault();\n    return editor.dispatchCommand(DELETE_CHARACTER_COMMAND, true);\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(KEY_DELETE_COMMAND, event => {\n    if ($isTargetWithinDecorator(event.target)) {\n      return false;\n    }\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    event.preventDefault();\n    return editor.dispatchCommand(DELETE_CHARACTER_COMMAND, false);\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(KEY_ENTER_COMMAND, event => {\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    $resetCapitalization(selection);\n    if (event !== null) {\n      // If we have beforeinput, then we can avoid blocking\n      // the default behavior. This ensures that the iOS can\n      // intercept that we're actually inserting a paragraph,\n      // and autocomplete, autocapitalize etc work as intended.\n      // This can also cause a strange performance issue in\n      // Safari, where there is a noticeable pause due to\n      // preventing the key down of enter.\n      if ((IS_IOS || IS_SAFARI || IS_APPLE_WEBKIT) && CAN_USE_BEFORE_INPUT) {\n        return false;\n      }\n      event.preventDefault();\n      if (event.shiftKey) {\n        return editor.dispatchCommand(INSERT_LINE_BREAK_COMMAND, false);\n      }\n    }\n    return editor.dispatchCommand(INSERT_PARAGRAPH_COMMAND, undefined);\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(KEY_ESCAPE_COMMAND, () => {\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    editor.blur();\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(DROP_COMMAND, event => {\n    const [, files] = eventFiles(event);\n    if (files.length > 0) {\n      const x = event.clientX;\n      const y = event.clientY;\n      const eventRange = caretFromPoint(x, y);\n      if (eventRange !== null) {\n        const {\n          offset: domOffset,\n          node: domNode\n        } = eventRange;\n        const node = $getNearestNodeFromDOMNode(domNode);\n        if (node !== null) {\n          const selection = $createRangeSelection();\n          if ($isTextNode(node)) {\n            selection.anchor.set(node.getKey(), domOffset, 'text');\n            selection.focus.set(node.getKey(), domOffset, 'text');\n          } else {\n            const parentKey = node.getParentOrThrow().getKey();\n            const offset = node.getIndexWithinParent() + 1;\n            selection.anchor.set(parentKey, offset, 'element');\n            selection.focus.set(parentKey, offset, 'element');\n          }\n          const normalizedSelection = $normalizeSelection__EXPERIMENTAL(selection);\n          $setSelection(normalizedSelection);\n        }\n        editor.dispatchCommand(DRAG_DROP_PASTE, files);\n      }\n      event.preventDefault();\n      return true;\n    }\n    const selection = $getSelection();\n    if ($isRangeSelection(selection)) {\n      return true;\n    }\n    return false;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(DRAGSTART_COMMAND, event => {\n    const [isFileTransfer] = eventFiles(event);\n    const selection = $getSelection();\n    if (isFileTransfer && !$isRangeSelection(selection)) {\n      return false;\n    }\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(DRAGOVER_COMMAND, event => {\n    const [isFileTransfer] = eventFiles(event);\n    const selection = $getSelection();\n    if (isFileTransfer && !$isRangeSelection(selection)) {\n      return false;\n    }\n    const x = event.clientX;\n    const y = event.clientY;\n    const eventRange = caretFromPoint(x, y);\n    if (eventRange !== null) {\n      const node = $getNearestNodeFromDOMNode(eventRange.node);\n      if ($isDecoratorNode(node)) {\n        // Show browser caret as the user is dragging the media across the screen. Won't work\n        // for DecoratorNode nor it's relevant.\n        event.preventDefault();\n      }\n    }\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(SELECT_ALL_COMMAND, () => {\n    $selectAll();\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(COPY_COMMAND, event => {\n    copyToClipboard(editor, objectKlassEquals(event, ClipboardEvent) ? event : null);\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(CUT_COMMAND, event => {\n    onCutForRichText(event, editor);\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(PASTE_COMMAND, event => {\n    const [, files, hasTextContent] = eventFiles(event);\n    if (files.length > 0 && !hasTextContent) {\n      editor.dispatchCommand(DRAG_DROP_PASTE, files);\n      return true;\n    }\n\n    // if inputs then paste within the input ignore creating a new node on paste event\n    if (isDOMNode(event.target) && isSelectionCapturedInDecoratorInput(event.target)) {\n      return false;\n    }\n    const selection = $getSelection();\n    if (selection !== null) {\n      onPasteForRichText(event, editor);\n      return true;\n    }\n    return false;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(KEY_SPACE_COMMAND, _ => {\n    const selection = $getSelection();\n    if ($isRangeSelection(selection)) {\n      $resetCapitalization(selection);\n    }\n    return false;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(KEY_TAB_COMMAND, _ => {\n    const selection = $getSelection();\n    if ($isRangeSelection(selection)) {\n      $resetCapitalization(selection);\n    }\n    return false;\n  }, COMMAND_PRIORITY_EDITOR));\n  return removeListener;\n}\n\nexport { $createHeadingNode, $createQuoteNode, $isHeadingNode, $isQuoteNode, DRAG_DROP_PASTE, HeadingNode, QuoteNode, eventFiles, registerRichText };\n"],
  "mappings": "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",
  "names": ["subscription", "import_react", "CAN_USE_DOM", "selection", "CAN_USE_DOM", "useLayoutEffectImpl"]
}
