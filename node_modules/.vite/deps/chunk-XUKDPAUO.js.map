{
  "version": 3,
  "sources": ["../../.pnpm/lexical@0.22.0/node_modules/lexical/Lexical.dev.mjs"],
  "sourcesContent": ["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction createCommand(type) {\n  return {\n    type\n  } ;\n}\nconst SELECTION_CHANGE_COMMAND = createCommand('SELECTION_CHANGE_COMMAND');\nconst SELECTION_INSERT_CLIPBOARD_NODES_COMMAND = createCommand('SELECTION_INSERT_CLIPBOARD_NODES_COMMAND');\nconst CLICK_COMMAND = createCommand('CLICK_COMMAND');\nconst DELETE_CHARACTER_COMMAND = createCommand('DELETE_CHARACTER_COMMAND');\nconst INSERT_LINE_BREAK_COMMAND = createCommand('INSERT_LINE_BREAK_COMMAND');\nconst INSERT_PARAGRAPH_COMMAND = createCommand('INSERT_PARAGRAPH_COMMAND');\nconst CONTROLLED_TEXT_INSERTION_COMMAND = createCommand('CONTROLLED_TEXT_INSERTION_COMMAND');\nconst PASTE_COMMAND = createCommand('PASTE_COMMAND');\nconst REMOVE_TEXT_COMMAND = createCommand('REMOVE_TEXT_COMMAND');\nconst DELETE_WORD_COMMAND = createCommand('DELETE_WORD_COMMAND');\nconst DELETE_LINE_COMMAND = createCommand('DELETE_LINE_COMMAND');\nconst FORMAT_TEXT_COMMAND = createCommand('FORMAT_TEXT_COMMAND');\nconst UNDO_COMMAND = createCommand('UNDO_COMMAND');\nconst REDO_COMMAND = createCommand('REDO_COMMAND');\nconst KEY_DOWN_COMMAND = createCommand('KEYDOWN_COMMAND');\nconst KEY_ARROW_RIGHT_COMMAND = createCommand('KEY_ARROW_RIGHT_COMMAND');\nconst MOVE_TO_END = createCommand('MOVE_TO_END');\nconst KEY_ARROW_LEFT_COMMAND = createCommand('KEY_ARROW_LEFT_COMMAND');\nconst MOVE_TO_START = createCommand('MOVE_TO_START');\nconst KEY_ARROW_UP_COMMAND = createCommand('KEY_ARROW_UP_COMMAND');\nconst KEY_ARROW_DOWN_COMMAND = createCommand('KEY_ARROW_DOWN_COMMAND');\nconst KEY_ENTER_COMMAND = createCommand('KEY_ENTER_COMMAND');\nconst KEY_SPACE_COMMAND = createCommand('KEY_SPACE_COMMAND');\nconst KEY_BACKSPACE_COMMAND = createCommand('KEY_BACKSPACE_COMMAND');\nconst KEY_ESCAPE_COMMAND = createCommand('KEY_ESCAPE_COMMAND');\nconst KEY_DELETE_COMMAND = createCommand('KEY_DELETE_COMMAND');\nconst KEY_TAB_COMMAND = createCommand('KEY_TAB_COMMAND');\nconst INSERT_TAB_COMMAND = createCommand('INSERT_TAB_COMMAND');\nconst INDENT_CONTENT_COMMAND = createCommand('INDENT_CONTENT_COMMAND');\nconst OUTDENT_CONTENT_COMMAND = createCommand('OUTDENT_CONTENT_COMMAND');\nconst DROP_COMMAND = createCommand('DROP_COMMAND');\nconst FORMAT_ELEMENT_COMMAND = createCommand('FORMAT_ELEMENT_COMMAND');\nconst DRAGSTART_COMMAND = createCommand('DRAGSTART_COMMAND');\nconst DRAGOVER_COMMAND = createCommand('DRAGOVER_COMMAND');\nconst DRAGEND_COMMAND = createCommand('DRAGEND_COMMAND');\nconst COPY_COMMAND = createCommand('COPY_COMMAND');\nconst CUT_COMMAND = createCommand('CUT_COMMAND');\nconst SELECT_ALL_COMMAND = createCommand('SELECT_ALL_COMMAND');\nconst CLEAR_EDITOR_COMMAND = createCommand('CLEAR_EDITOR_COMMAND');\nconst CLEAR_HISTORY_COMMAND = createCommand('CLEAR_HISTORY_COMMAND');\nconst CAN_REDO_COMMAND = createCommand('CAN_REDO_COMMAND');\nconst CAN_UNDO_COMMAND = createCommand('CAN_UNDO_COMMAND');\nconst FOCUS_COMMAND = createCommand('FOCUS_COMMAND');\nconst BLUR_COMMAND = createCommand('BLUR_COMMAND');\nconst KEY_MODIFIER_COMMAND = createCommand('KEY_MODIFIER_COMMAND');\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst documentMode = CAN_USE_DOM && 'documentMode' in document ? document.documentMode : null;\nconst IS_APPLE = CAN_USE_DOM && /Mac|iPod|iPhone|iPad/.test(navigator.platform);\nconst IS_FIREFOX = CAN_USE_DOM && /^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent);\nconst CAN_USE_BEFORE_INPUT = CAN_USE_DOM && 'InputEvent' in window && !documentMode ? 'getTargetRanges' in new window.InputEvent('input') : false;\nconst IS_SAFARI = CAN_USE_DOM && /Version\\/[\\d.]+.*Safari/.test(navigator.userAgent);\nconst IS_IOS = CAN_USE_DOM && /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\nconst IS_ANDROID = CAN_USE_DOM && /Android/.test(navigator.userAgent);\n\n// Keep these in case we need to use them in the future.\n// export const IS_WINDOWS: boolean = CAN_USE_DOM && /Win/.test(navigator.platform);\nconst IS_CHROME = CAN_USE_DOM && /^(?=.*Chrome).*/i.test(navigator.userAgent);\n// export const canUseTextInputEvent: boolean = CAN_USE_DOM && 'TextEvent' in window && !documentMode;\n\nconst IS_ANDROID_CHROME = CAN_USE_DOM && IS_ANDROID && IS_CHROME;\nconst IS_APPLE_WEBKIT = CAN_USE_DOM && /AppleWebKit\\/[\\d.]+/.test(navigator.userAgent) && !IS_CHROME;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n// DOM\nconst DOM_ELEMENT_TYPE = 1;\nconst DOM_TEXT_TYPE = 3;\n\n// Reconciling\nconst NO_DIRTY_NODES = 0;\nconst HAS_DIRTY_NODES = 1;\nconst FULL_RECONCILE = 2;\n\n// Text node modes\nconst IS_NORMAL = 0;\nconst IS_TOKEN = 1;\nconst IS_SEGMENTED = 2;\n// IS_INERT = 3\n\n// Text node formatting\nconst IS_BOLD = 1;\nconst IS_ITALIC = 1 << 1;\nconst IS_STRIKETHROUGH = 1 << 2;\nconst IS_UNDERLINE = 1 << 3;\nconst IS_CODE = 1 << 4;\nconst IS_SUBSCRIPT = 1 << 5;\nconst IS_SUPERSCRIPT = 1 << 6;\nconst IS_HIGHLIGHT = 1 << 7;\nconst IS_LOWERCASE = 1 << 8;\nconst IS_UPPERCASE = 1 << 9;\nconst IS_CAPITALIZE = 1 << 10;\nconst IS_ALL_FORMATTING = IS_BOLD | IS_ITALIC | IS_STRIKETHROUGH | IS_UNDERLINE | IS_CODE | IS_SUBSCRIPT | IS_SUPERSCRIPT | IS_HIGHLIGHT | IS_LOWERCASE | IS_UPPERCASE | IS_CAPITALIZE;\n\n// Text node details\nconst IS_DIRECTIONLESS = 1;\nconst IS_UNMERGEABLE = 1 << 1;\n\n// Element node formatting\nconst IS_ALIGN_LEFT = 1;\nconst IS_ALIGN_CENTER = 2;\nconst IS_ALIGN_RIGHT = 3;\nconst IS_ALIGN_JUSTIFY = 4;\nconst IS_ALIGN_START = 5;\nconst IS_ALIGN_END = 6;\n\n// Reconciliation\nconst NON_BREAKING_SPACE = '\\u00A0';\nconst ZERO_WIDTH_SPACE = '\\u200b';\n\n// For iOS/Safari we use a non breaking space, otherwise the cursor appears\n// overlapping the composed text.\nconst COMPOSITION_SUFFIX = IS_SAFARI || IS_IOS || IS_APPLE_WEBKIT ? NON_BREAKING_SPACE : ZERO_WIDTH_SPACE;\nconst DOUBLE_LINE_BREAK = '\\n\\n';\n\n// For FF, we need to use a non-breaking space, or it gets composition\n// in a stuck state.\nconst COMPOSITION_START_CHAR = IS_FIREFOX ? NON_BREAKING_SPACE : COMPOSITION_SUFFIX;\nconst RTL = '\\u0591-\\u07FF\\uFB1D-\\uFDFD\\uFE70-\\uFEFC';\nconst LTR = 'A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6' + '\\u00F8-\\u02B8\\u0300-\\u0590\\u0800-\\u1FFF\\u200E\\u2C00-\\uFB1C' + '\\uFE00-\\uFE6F\\uFEFD-\\uFFFF';\n\n// eslint-disable-next-line no-misleading-character-class\nconst RTL_REGEX = new RegExp('^[^' + LTR + ']*[' + RTL + ']');\n// eslint-disable-next-line no-misleading-character-class\nconst LTR_REGEX = new RegExp('^[^' + RTL + ']*[' + LTR + ']');\nconst TEXT_TYPE_TO_FORMAT = {\n  bold: IS_BOLD,\n  capitalize: IS_CAPITALIZE,\n  code: IS_CODE,\n  highlight: IS_HIGHLIGHT,\n  italic: IS_ITALIC,\n  lowercase: IS_LOWERCASE,\n  strikethrough: IS_STRIKETHROUGH,\n  subscript: IS_SUBSCRIPT,\n  superscript: IS_SUPERSCRIPT,\n  underline: IS_UNDERLINE,\n  uppercase: IS_UPPERCASE\n};\nconst DETAIL_TYPE_TO_DETAIL = {\n  directionless: IS_DIRECTIONLESS,\n  unmergeable: IS_UNMERGEABLE\n};\nconst ELEMENT_TYPE_TO_FORMAT = {\n  center: IS_ALIGN_CENTER,\n  end: IS_ALIGN_END,\n  justify: IS_ALIGN_JUSTIFY,\n  left: IS_ALIGN_LEFT,\n  right: IS_ALIGN_RIGHT,\n  start: IS_ALIGN_START\n};\nconst ELEMENT_FORMAT_TO_TYPE = {\n  [IS_ALIGN_CENTER]: 'center',\n  [IS_ALIGN_END]: 'end',\n  [IS_ALIGN_JUSTIFY]: 'justify',\n  [IS_ALIGN_LEFT]: 'left',\n  [IS_ALIGN_RIGHT]: 'right',\n  [IS_ALIGN_START]: 'start'\n};\nconst TEXT_MODE_TO_TYPE = {\n  normal: IS_NORMAL,\n  segmented: IS_SEGMENTED,\n  token: IS_TOKEN\n};\nconst TEXT_TYPE_TO_MODE = {\n  [IS_NORMAL]: 'normal',\n  [IS_SEGMENTED]: 'segmented',\n  [IS_TOKEN]: 'token'\n};\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction normalizeClassNames(...classNames) {\n  const rval = [];\n  for (const className of classNames) {\n    if (className && typeof className === 'string') {\n      for (const [s] of className.matchAll(/\\S+/g)) {\n        rval.push(s);\n      }\n    }\n  }\n  return rval;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// The time between a text entry event and the mutation observer firing.\nconst TEXT_MUTATION_VARIANCE = 100;\nlet isProcessingMutations = false;\nlet lastTextEntryTimeStamp = 0;\nfunction getIsProcessingMutations() {\n  return isProcessingMutations;\n}\nfunction updateTimeStamp(event) {\n  lastTextEntryTimeStamp = event.timeStamp;\n}\nfunction initTextEntryListener(editor) {\n  if (lastTextEntryTimeStamp === 0) {\n    getWindow(editor).addEventListener('textInput', updateTimeStamp, true);\n  }\n}\nfunction isManagedLineBreak(dom, target, editor) {\n  const isBR = dom.nodeName === 'BR';\n  const lexicalLineBreak = target.__lexicalLineBreak;\n  return lexicalLineBreak && (dom === lexicalLineBreak || isBR && dom.previousSibling === lexicalLineBreak) || isBR && getNodeKeyFromDOMNode(dom, editor) !== undefined;\n}\nfunction getLastSelection(editor) {\n  return editor.getEditorState().read(() => {\n    const selection = $getSelection();\n    return selection !== null ? selection.clone() : null;\n  });\n}\nfunction $handleTextMutation(target, node, editor) {\n  const domSelection = getDOMSelection(editor._window);\n  let anchorOffset = null;\n  let focusOffset = null;\n  if (domSelection !== null && domSelection.anchorNode === target) {\n    anchorOffset = domSelection.anchorOffset;\n    focusOffset = domSelection.focusOffset;\n  }\n  const text = target.nodeValue;\n  if (text !== null) {\n    $updateTextNodeFromDOMContent(node, text, anchorOffset, focusOffset, false);\n  }\n}\nfunction shouldUpdateTextNodeFromMutation(selection, targetDOM, targetNode) {\n  if ($isRangeSelection(selection)) {\n    const anchorNode = selection.anchor.getNode();\n    if (anchorNode.is(targetNode) && selection.format !== anchorNode.getFormat()) {\n      return false;\n    }\n  }\n  return targetDOM.nodeType === DOM_TEXT_TYPE && targetNode.isAttached();\n}\nfunction $getNearestManagedNodePairFromDOMNode(startingDOM, editor, editorState, rootElement) {\n  for (let dom = startingDOM; dom && !isDOMUnmanaged(dom); dom = getParentElement(dom)) {\n    const key = getNodeKeyFromDOMNode(dom, editor);\n    if (key !== undefined) {\n      const node = $getNodeByKey(key, editorState);\n      if (node) {\n        // All decorator nodes are unmanaged\n        return $isDecoratorNode(node) || !isHTMLElement(dom) ? undefined : [dom, node];\n      }\n    } else if (dom === rootElement) {\n      return [rootElement, internalGetRoot(editorState)];\n    }\n  }\n}\nfunction $flushMutations$1(editor, mutations, observer) {\n  isProcessingMutations = true;\n  const shouldFlushTextMutations = performance.now() - lastTextEntryTimeStamp > TEXT_MUTATION_VARIANCE;\n  try {\n    updateEditor(editor, () => {\n      const selection = $getSelection() || getLastSelection(editor);\n      const badDOMTargets = new Map();\n      const rootElement = editor.getRootElement();\n      // We use the current editor state, as that reflects what is\n      // actually \"on screen\".\n      const currentEditorState = editor._editorState;\n      const blockCursorElement = editor._blockCursorElement;\n      let shouldRevertSelection = false;\n      let possibleTextForFirefoxPaste = '';\n      for (let i = 0; i < mutations.length; i++) {\n        const mutation = mutations[i];\n        const type = mutation.type;\n        const targetDOM = mutation.target;\n        const pair = $getNearestManagedNodePairFromDOMNode(targetDOM, editor, currentEditorState, rootElement);\n        if (!pair) {\n          continue;\n        }\n        const [nodeDOM, targetNode] = pair;\n        if (type === 'characterData') {\n          // Text mutations are deferred and passed to mutation listeners to be\n          // processed outside of the Lexical engine.\n          if (shouldFlushTextMutations && $isTextNode(targetNode) && shouldUpdateTextNodeFromMutation(selection, targetDOM, targetNode)) {\n            $handleTextMutation(\n            // nodeType === DOM_TEXT_TYPE is a Text DOM node\n            targetDOM, targetNode, editor);\n          }\n        } else if (type === 'childList') {\n          shouldRevertSelection = true;\n          // We attempt to \"undo\" any changes that have occurred outside\n          // of Lexical. We want Lexical's editor state to be source of truth.\n          // To the user, these will look like no-ops.\n          const addedDOMs = mutation.addedNodes;\n          for (let s = 0; s < addedDOMs.length; s++) {\n            const addedDOM = addedDOMs[s];\n            const node = $getNodeFromDOMNode(addedDOM);\n            const parentDOM = addedDOM.parentNode;\n            if (parentDOM != null && addedDOM !== blockCursorElement && node === null && !isManagedLineBreak(addedDOM, parentDOM, editor)) {\n              if (IS_FIREFOX) {\n                const possibleText = (isHTMLElement(addedDOM) ? addedDOM.innerText : null) || addedDOM.nodeValue;\n                if (possibleText) {\n                  possibleTextForFirefoxPaste += possibleText;\n                }\n              }\n              parentDOM.removeChild(addedDOM);\n            }\n          }\n          const removedDOMs = mutation.removedNodes;\n          const removedDOMsLength = removedDOMs.length;\n          if (removedDOMsLength > 0) {\n            let unremovedBRs = 0;\n            for (let s = 0; s < removedDOMsLength; s++) {\n              const removedDOM = removedDOMs[s];\n              if (isManagedLineBreak(removedDOM, targetDOM, editor) || blockCursorElement === removedDOM) {\n                targetDOM.appendChild(removedDOM);\n                unremovedBRs++;\n              }\n            }\n            if (removedDOMsLength !== unremovedBRs) {\n              badDOMTargets.set(nodeDOM, targetNode);\n            }\n          }\n        }\n      }\n\n      // Now we process each of the unique target nodes, attempting\n      // to restore their contents back to the source of truth, which\n      // is Lexical's \"current\" editor state. This is basically like\n      // an internal revert on the DOM.\n      if (badDOMTargets.size > 0) {\n        for (const [nodeDOM, targetNode] of badDOMTargets) {\n          targetNode.reconcileObservedMutation(nodeDOM, editor);\n        }\n      }\n\n      // Capture all the mutations made during this function. This\n      // also prevents us having to process them on the next cycle\n      // of onMutation, as these mutations were made by us.\n      const records = observer.takeRecords();\n\n      // Check for any random auto-added <br> elements, and remove them.\n      // These get added by the browser when we undo the above mutations\n      // and this can lead to a broken UI.\n      if (records.length > 0) {\n        for (let i = 0; i < records.length; i++) {\n          const record = records[i];\n          const addedNodes = record.addedNodes;\n          const target = record.target;\n          for (let s = 0; s < addedNodes.length; s++) {\n            const addedDOM = addedNodes[s];\n            const parentDOM = addedDOM.parentNode;\n            if (parentDOM != null && addedDOM.nodeName === 'BR' && !isManagedLineBreak(addedDOM, target, editor)) {\n              parentDOM.removeChild(addedDOM);\n            }\n          }\n        }\n\n        // Clear any of those removal mutations\n        observer.takeRecords();\n      }\n      if (selection !== null) {\n        if (shouldRevertSelection) {\n          selection.dirty = true;\n          $setSelection(selection);\n        }\n        if (IS_FIREFOX && isFirefoxClipboardEvents(editor)) {\n          selection.insertRawText(possibleTextForFirefoxPaste);\n        }\n      }\n    });\n  } finally {\n    isProcessingMutations = false;\n  }\n}\nfunction $flushRootMutations(editor) {\n  const observer = editor._observer;\n  if (observer !== null) {\n    const mutations = observer.takeRecords();\n    $flushMutations$1(editor, mutations, observer);\n  }\n}\nfunction initMutationObserver(editor) {\n  initTextEntryListener(editor);\n  editor._observer = new MutationObserver((mutations, observer) => {\n    $flushMutations$1(editor, mutations, observer);\n  });\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction $canSimpleTextNodesBeMerged(node1, node2) {\n  const node1Mode = node1.__mode;\n  const node1Format = node1.__format;\n  const node1Style = node1.__style;\n  const node2Mode = node2.__mode;\n  const node2Format = node2.__format;\n  const node2Style = node2.__style;\n  return (node1Mode === null || node1Mode === node2Mode) && (node1Format === null || node1Format === node2Format) && (node1Style === null || node1Style === node2Style);\n}\nfunction $mergeTextNodes(node1, node2) {\n  const writableNode1 = node1.mergeWithSibling(node2);\n  const normalizedNodes = getActiveEditor()._normalizedNodes;\n  normalizedNodes.add(node1.__key);\n  normalizedNodes.add(node2.__key);\n  return writableNode1;\n}\nfunction $normalizeTextNode(textNode) {\n  let node = textNode;\n  if (node.__text === '' && node.isSimpleText() && !node.isUnmergeable()) {\n    node.remove();\n    return;\n  }\n\n  // Backward\n  let previousNode;\n  while ((previousNode = node.getPreviousSibling()) !== null && $isTextNode(previousNode) && previousNode.isSimpleText() && !previousNode.isUnmergeable()) {\n    if (previousNode.__text === '') {\n      previousNode.remove();\n    } else if ($canSimpleTextNodesBeMerged(previousNode, node)) {\n      node = $mergeTextNodes(previousNode, node);\n      break;\n    } else {\n      break;\n    }\n  }\n\n  // Forward\n  let nextNode;\n  while ((nextNode = node.getNextSibling()) !== null && $isTextNode(nextNode) && nextNode.isSimpleText() && !nextNode.isUnmergeable()) {\n    if (nextNode.__text === '') {\n      nextNode.remove();\n    } else if ($canSimpleTextNodesBeMerged(node, nextNode)) {\n      node = $mergeTextNodes(node, nextNode);\n      break;\n    } else {\n      break;\n    }\n  }\n}\nfunction $normalizeSelection(selection) {\n  $normalizePoint(selection.anchor);\n  $normalizePoint(selection.focus);\n  return selection;\n}\nfunction $normalizePoint(point) {\n  while (point.type === 'element') {\n    const node = point.getNode();\n    const offset = point.offset;\n    let nextNode;\n    let nextOffsetAtEnd;\n    if (offset === node.getChildrenSize()) {\n      nextNode = node.getChildAtIndex(offset - 1);\n      nextOffsetAtEnd = true;\n    } else {\n      nextNode = node.getChildAtIndex(offset);\n      nextOffsetAtEnd = false;\n    }\n    if ($isTextNode(nextNode)) {\n      point.set(nextNode.__key, nextOffsetAtEnd ? nextNode.getTextContentSize() : 0, 'text');\n      break;\n    } else if (!$isElementNode(nextNode)) {\n      break;\n    }\n    point.set(nextNode.__key, nextOffsetAtEnd ? nextNode.getChildrenSize() : 0, 'element');\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nlet keyCounter = 1;\nfunction resetRandomKey() {\n  keyCounter = 1;\n}\nfunction generateRandomKey() {\n  return '' + keyCounter++;\n}\nfunction getRegisteredNodeOrThrow(editor, nodeType) {\n  const registeredNode = editor._nodes.get(nodeType);\n  if (registeredNode === undefined) {\n    {\n      throw Error(`registeredNode: Type ${nodeType} not found`);\n    }\n  }\n  return registeredNode;\n}\nconst scheduleMicroTask = typeof queueMicrotask === 'function' ? queueMicrotask : fn => {\n  // No window prefix intended (#1400)\n  Promise.resolve().then(fn);\n};\nfunction $isSelectionCapturedInDecorator(node) {\n  return $isDecoratorNode($getNearestNodeFromDOMNode(node));\n}\nfunction isSelectionCapturedInDecoratorInput(anchorDOM) {\n  const activeElement = document.activeElement;\n  if (!isHTMLElement(activeElement)) {\n    return false;\n  }\n  const nodeName = activeElement.nodeName;\n  return $isDecoratorNode($getNearestNodeFromDOMNode(anchorDOM)) && (nodeName === 'INPUT' || nodeName === 'TEXTAREA' || activeElement.contentEditable === 'true' && getEditorPropertyFromDOMNode(activeElement) == null);\n}\nfunction isSelectionWithinEditor(editor, anchorDOM, focusDOM) {\n  const rootElement = editor.getRootElement();\n  try {\n    return rootElement !== null && rootElement.contains(anchorDOM) && rootElement.contains(focusDOM) &&\n    // Ignore if selection is within nested editor\n    anchorDOM !== null && !isSelectionCapturedInDecoratorInput(anchorDOM) && getNearestEditorFromDOMNode(anchorDOM) === editor;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * @returns true if the given argument is a LexicalEditor instance from this build of Lexical\n */\nfunction isLexicalEditor(editor) {\n  // Check instanceof to prevent issues with multiple embedded Lexical installations\n  return editor instanceof LexicalEditor;\n}\nfunction getNearestEditorFromDOMNode(node) {\n  let currentNode = node;\n  while (currentNode != null) {\n    const editor = getEditorPropertyFromDOMNode(currentNode);\n    if (isLexicalEditor(editor)) {\n      return editor;\n    }\n    currentNode = getParentElement(currentNode);\n  }\n  return null;\n}\n\n/** @internal */\nfunction getEditorPropertyFromDOMNode(node) {\n  // @ts-expect-error: internal field\n  return node ? node.__lexicalEditor : null;\n}\nfunction getTextDirection(text) {\n  if (RTL_REGEX.test(text)) {\n    return 'rtl';\n  }\n  if (LTR_REGEX.test(text)) {\n    return 'ltr';\n  }\n  return null;\n}\nfunction $isTokenOrSegmented(node) {\n  return node.isToken() || node.isSegmented();\n}\nfunction isDOMTextNode(node) {\n  return node.nodeType === DOM_TEXT_TYPE;\n}\nfunction getDOMTextNode(element) {\n  let node = element;\n  while (node != null) {\n    if (isDOMTextNode(node)) {\n      return node;\n    }\n    node = node.firstChild;\n  }\n  return null;\n}\nfunction toggleTextFormatType(format, type, alignWithFormat) {\n  const activeFormat = TEXT_TYPE_TO_FORMAT[type];\n  if (alignWithFormat !== null && (format & activeFormat) === (alignWithFormat & activeFormat)) {\n    return format;\n  }\n  let newFormat = format ^ activeFormat;\n  if (type === 'subscript') {\n    newFormat &= ~TEXT_TYPE_TO_FORMAT.superscript;\n  } else if (type === 'superscript') {\n    newFormat &= ~TEXT_TYPE_TO_FORMAT.subscript;\n  } else if (type === 'lowercase') {\n    newFormat &= ~TEXT_TYPE_TO_FORMAT.uppercase;\n    newFormat &= ~TEXT_TYPE_TO_FORMAT.capitalize;\n  } else if (type === 'uppercase') {\n    newFormat &= ~TEXT_TYPE_TO_FORMAT.lowercase;\n    newFormat &= ~TEXT_TYPE_TO_FORMAT.capitalize;\n  } else if (type === 'capitalize') {\n    newFormat &= ~TEXT_TYPE_TO_FORMAT.lowercase;\n    newFormat &= ~TEXT_TYPE_TO_FORMAT.uppercase;\n  }\n  return newFormat;\n}\nfunction $isLeafNode(node) {\n  return $isTextNode(node) || $isLineBreakNode(node) || $isDecoratorNode(node);\n}\nfunction $setNodeKey(node, existingKey) {\n  if (existingKey != null) {\n    {\n      errorOnNodeKeyConstructorMismatch(node, existingKey);\n    }\n    node.__key = existingKey;\n    return;\n  }\n  errorOnReadOnly();\n  errorOnInfiniteTransforms();\n  const editor = getActiveEditor();\n  const editorState = getActiveEditorState();\n  const key = generateRandomKey();\n  editorState._nodeMap.set(key, node);\n  // TODO Split this function into leaf/element\n  if ($isElementNode(node)) {\n    editor._dirtyElements.set(key, true);\n  } else {\n    editor._dirtyLeaves.add(key);\n  }\n  editor._cloneNotNeeded.add(key);\n  editor._dirtyType = HAS_DIRTY_NODES;\n  node.__key = key;\n}\nfunction errorOnNodeKeyConstructorMismatch(node, existingKey) {\n  const editorState = internalGetActiveEditorState();\n  if (!editorState) {\n    // tests expect to be able to do this kind of clone without an active editor state\n    return;\n  }\n  const existingNode = editorState._nodeMap.get(existingKey);\n  if (existingNode && existingNode.constructor !== node.constructor) {\n    // Lifted condition to if statement because the inverted logic is a bit confusing\n    if (node.constructor.name !== existingNode.constructor.name) {\n      {\n        throw Error(`Lexical node with constructor ${node.constructor.name} attempted to re-use key from node in active editor state with constructor ${existingNode.constructor.name}. Keys must not be re-used when the type is changed.`);\n      }\n    } else {\n      {\n        throw Error(`Lexical node with constructor ${node.constructor.name} attempted to re-use key from node in active editor state with different constructor with the same name (possibly due to invalid Hot Module Replacement). Keys must not be re-used when the type is changed.`);\n      }\n    }\n  }\n}\nfunction internalMarkParentElementsAsDirty(parentKey, nodeMap, dirtyElements) {\n  let nextParentKey = parentKey;\n  while (nextParentKey !== null) {\n    if (dirtyElements.has(nextParentKey)) {\n      return;\n    }\n    const node = nodeMap.get(nextParentKey);\n    if (node === undefined) {\n      break;\n    }\n    dirtyElements.set(nextParentKey, false);\n    nextParentKey = node.__parent;\n  }\n}\n\n// TODO #6031 this function or their callers have to adjust selection (i.e. insertBefore)\nfunction removeFromParent(node) {\n  const oldParent = node.getParent();\n  if (oldParent !== null) {\n    const writableNode = node.getWritable();\n    const writableParent = oldParent.getWritable();\n    const prevSibling = node.getPreviousSibling();\n    const nextSibling = node.getNextSibling();\n    // TODO: this function duplicates a bunch of operations, can be simplified.\n    if (prevSibling === null) {\n      if (nextSibling !== null) {\n        const writableNextSibling = nextSibling.getWritable();\n        writableParent.__first = nextSibling.__key;\n        writableNextSibling.__prev = null;\n      } else {\n        writableParent.__first = null;\n      }\n    } else {\n      const writablePrevSibling = prevSibling.getWritable();\n      if (nextSibling !== null) {\n        const writableNextSibling = nextSibling.getWritable();\n        writableNextSibling.__prev = writablePrevSibling.__key;\n        writablePrevSibling.__next = writableNextSibling.__key;\n      } else {\n        writablePrevSibling.__next = null;\n      }\n      writableNode.__prev = null;\n    }\n    if (nextSibling === null) {\n      if (prevSibling !== null) {\n        const writablePrevSibling = prevSibling.getWritable();\n        writableParent.__last = prevSibling.__key;\n        writablePrevSibling.__next = null;\n      } else {\n        writableParent.__last = null;\n      }\n    } else {\n      const writableNextSibling = nextSibling.getWritable();\n      if (prevSibling !== null) {\n        const writablePrevSibling = prevSibling.getWritable();\n        writablePrevSibling.__next = writableNextSibling.__key;\n        writableNextSibling.__prev = writablePrevSibling.__key;\n      } else {\n        writableNextSibling.__prev = null;\n      }\n      writableNode.__next = null;\n    }\n    writableParent.__size--;\n    writableNode.__parent = null;\n  }\n}\n\n// Never use this function directly! It will break\n// the cloning heuristic. Instead use node.getWritable().\nfunction internalMarkNodeAsDirty(node) {\n  errorOnInfiniteTransforms();\n  const latest = node.getLatest();\n  const parent = latest.__parent;\n  const editorState = getActiveEditorState();\n  const editor = getActiveEditor();\n  const nodeMap = editorState._nodeMap;\n  const dirtyElements = editor._dirtyElements;\n  if (parent !== null) {\n    internalMarkParentElementsAsDirty(parent, nodeMap, dirtyElements);\n  }\n  const key = latest.__key;\n  editor._dirtyType = HAS_DIRTY_NODES;\n  if ($isElementNode(node)) {\n    dirtyElements.set(key, true);\n  } else {\n    // TODO split internally MarkNodeAsDirty into two dedicated Element/leave functions\n    editor._dirtyLeaves.add(key);\n  }\n}\nfunction internalMarkSiblingsAsDirty(node) {\n  const previousNode = node.getPreviousSibling();\n  const nextNode = node.getNextSibling();\n  if (previousNode !== null) {\n    internalMarkNodeAsDirty(previousNode);\n  }\n  if (nextNode !== null) {\n    internalMarkNodeAsDirty(nextNode);\n  }\n}\nfunction $setCompositionKey(compositionKey) {\n  errorOnReadOnly();\n  const editor = getActiveEditor();\n  const previousCompositionKey = editor._compositionKey;\n  if (compositionKey !== previousCompositionKey) {\n    editor._compositionKey = compositionKey;\n    if (previousCompositionKey !== null) {\n      const node = $getNodeByKey(previousCompositionKey);\n      if (node !== null) {\n        node.getWritable();\n      }\n    }\n    if (compositionKey !== null) {\n      const node = $getNodeByKey(compositionKey);\n      if (node !== null) {\n        node.getWritable();\n      }\n    }\n  }\n}\nfunction $getCompositionKey() {\n  if (isCurrentlyReadOnlyMode()) {\n    return null;\n  }\n  const editor = getActiveEditor();\n  return editor._compositionKey;\n}\nfunction $getNodeByKey(key, _editorState) {\n  const editorState = _editorState || getActiveEditorState();\n  const node = editorState._nodeMap.get(key);\n  if (node === undefined) {\n    return null;\n  }\n  return node;\n}\nfunction $getNodeFromDOMNode(dom, editorState) {\n  const editor = getActiveEditor();\n  const key = getNodeKeyFromDOMNode(dom, editor);\n  if (key !== undefined) {\n    return $getNodeByKey(key, editorState);\n  }\n  return null;\n}\nfunction setNodeKeyOnDOMNode(dom, editor, key) {\n  const prop = `__lexicalKey_${editor._key}`;\n  dom[prop] = key;\n}\nfunction getNodeKeyFromDOMNode(dom, editor) {\n  const prop = `__lexicalKey_${editor._key}`;\n  return dom[prop];\n}\nfunction $getNearestNodeFromDOMNode(startingDOM, editorState) {\n  let dom = startingDOM;\n  while (dom != null) {\n    const node = $getNodeFromDOMNode(dom, editorState);\n    if (node !== null) {\n      return node;\n    }\n    dom = getParentElement(dom);\n  }\n  return null;\n}\nfunction cloneDecorators(editor) {\n  const currentDecorators = editor._decorators;\n  const pendingDecorators = Object.assign({}, currentDecorators);\n  editor._pendingDecorators = pendingDecorators;\n  return pendingDecorators;\n}\nfunction getEditorStateTextContent(editorState) {\n  return editorState.read(() => $getRoot().getTextContent());\n}\nfunction markNodesWithTypesAsDirty(editor, types) {\n  // We only need to mark nodes dirty if they were in the previous state.\n  // If they aren't, then they are by definition dirty already.\n  const cachedMap = getCachedTypeToNodeMap(editor.getEditorState());\n  const dirtyNodeMaps = [];\n  for (const type of types) {\n    const nodeMap = cachedMap.get(type);\n    if (nodeMap) {\n      // By construction these are non-empty\n      dirtyNodeMaps.push(nodeMap);\n    }\n  }\n  // Nothing to mark dirty, no update necessary\n  if (dirtyNodeMaps.length === 0) {\n    return;\n  }\n  editor.update(() => {\n    for (const nodeMap of dirtyNodeMaps) {\n      for (const node of nodeMap.values()) {\n        node.markDirty();\n      }\n    }\n  }, editor._pendingEditorState === null ? {\n    tag: 'history-merge'\n  } : undefined);\n}\nfunction $getRoot() {\n  return internalGetRoot(getActiveEditorState());\n}\nfunction internalGetRoot(editorState) {\n  return editorState._nodeMap.get('root');\n}\nfunction $setSelection(selection) {\n  errorOnReadOnly();\n  const editorState = getActiveEditorState();\n  if (selection !== null) {\n    {\n      if (Object.isFrozen(selection)) {\n        {\n          throw Error(`$setSelection called on frozen selection object. Ensure selection is cloned before passing in.`);\n        }\n      }\n    }\n    selection.dirty = true;\n    selection.setCachedNodes(null);\n  }\n  editorState._selection = selection;\n}\nfunction $flushMutations() {\n  errorOnReadOnly();\n  const editor = getActiveEditor();\n  $flushRootMutations(editor);\n}\nfunction $getNodeFromDOM(dom) {\n  const editor = getActiveEditor();\n  const nodeKey = getNodeKeyFromDOMTree(dom, editor);\n  if (nodeKey === null) {\n    const rootElement = editor.getRootElement();\n    if (dom === rootElement) {\n      return $getNodeByKey('root');\n    }\n    return null;\n  }\n  return $getNodeByKey(nodeKey);\n}\nfunction getTextNodeOffset(node, moveSelectionToEnd) {\n  return moveSelectionToEnd ? node.getTextContentSize() : 0;\n}\nfunction getNodeKeyFromDOMTree(\n// Note that node here refers to a DOM Node, not an Lexical Node\ndom, editor) {\n  let node = dom;\n  while (node != null) {\n    const key = getNodeKeyFromDOMNode(node, editor);\n    if (key !== undefined) {\n      return key;\n    }\n    node = getParentElement(node);\n  }\n  return null;\n}\nfunction doesContainGrapheme(str) {\n  return /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g.test(str);\n}\nfunction getEditorsToPropagate(editor) {\n  const editorsToPropagate = [];\n  let currentEditor = editor;\n  while (currentEditor !== null) {\n    editorsToPropagate.push(currentEditor);\n    currentEditor = currentEditor._parentEditor;\n  }\n  return editorsToPropagate;\n}\nfunction createUID() {\n  return Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 5);\n}\nfunction getAnchorTextFromDOM(anchorNode) {\n  if (anchorNode.nodeType === DOM_TEXT_TYPE) {\n    return anchorNode.nodeValue;\n  }\n  return null;\n}\nfunction $updateSelectedTextFromDOM(isCompositionEnd, editor, data) {\n  // Update the text content with the latest composition text\n  const domSelection = getDOMSelection(editor._window);\n  if (domSelection === null) {\n    return;\n  }\n  const anchorNode = domSelection.anchorNode;\n  let {\n    anchorOffset,\n    focusOffset\n  } = domSelection;\n  if (anchorNode !== null) {\n    let textContent = getAnchorTextFromDOM(anchorNode);\n    const node = $getNearestNodeFromDOMNode(anchorNode);\n    if (textContent !== null && $isTextNode(node)) {\n      // Data is intentionally truthy, as we check for boolean, null and empty string.\n      if (textContent === COMPOSITION_SUFFIX && data) {\n        const offset = data.length;\n        textContent = data;\n        anchorOffset = offset;\n        focusOffset = offset;\n      }\n      if (textContent !== null) {\n        $updateTextNodeFromDOMContent(node, textContent, anchorOffset, focusOffset, isCompositionEnd);\n      }\n    }\n  }\n}\nfunction $updateTextNodeFromDOMContent(textNode, textContent, anchorOffset, focusOffset, compositionEnd) {\n  let node = textNode;\n  if (node.isAttached() && (compositionEnd || !node.isDirty())) {\n    const isComposing = node.isComposing();\n    let normalizedTextContent = textContent;\n    if ((isComposing || compositionEnd) && textContent[textContent.length - 1] === COMPOSITION_SUFFIX) {\n      normalizedTextContent = textContent.slice(0, -1);\n    }\n    const prevTextContent = node.getTextContent();\n    if (compositionEnd || normalizedTextContent !== prevTextContent) {\n      if (normalizedTextContent === '') {\n        $setCompositionKey(null);\n        if (!IS_SAFARI && !IS_IOS && !IS_APPLE_WEBKIT) {\n          // For composition (mainly Android), we have to remove the node on a later update\n          const editor = getActiveEditor();\n          setTimeout(() => {\n            editor.update(() => {\n              if (node.isAttached()) {\n                node.remove();\n              }\n            });\n          }, 20);\n        } else {\n          node.remove();\n        }\n        return;\n      }\n      const parent = node.getParent();\n      const prevSelection = $getPreviousSelection();\n      const prevTextContentSize = node.getTextContentSize();\n      const compositionKey = $getCompositionKey();\n      const nodeKey = node.getKey();\n      if (node.isToken() || compositionKey !== null && nodeKey === compositionKey && !isComposing ||\n      // Check if character was added at the start or boundaries when not insertable, and we need\n      // to clear this input from occurring as that action wasn't permitted.\n      $isRangeSelection(prevSelection) && (parent !== null && !parent.canInsertTextBefore() && prevSelection.anchor.offset === 0 || prevSelection.anchor.key === textNode.__key && prevSelection.anchor.offset === 0 && !node.canInsertTextBefore() && !isComposing || prevSelection.focus.key === textNode.__key && prevSelection.focus.offset === prevTextContentSize && !node.canInsertTextAfter() && !isComposing)) {\n        node.markDirty();\n        return;\n      }\n      const selection = $getSelection();\n      if (!$isRangeSelection(selection) || anchorOffset === null || focusOffset === null) {\n        node.setTextContent(normalizedTextContent);\n        return;\n      }\n      selection.setTextNodeRange(node, anchorOffset, node, focusOffset);\n      if (node.isSegmented()) {\n        const originalTextContent = node.getTextContent();\n        const replacement = $createTextNode(originalTextContent);\n        node.replace(replacement);\n        node = replacement;\n      }\n      node.setTextContent(normalizedTextContent);\n    }\n  }\n}\nfunction $previousSiblingDoesNotAcceptText(node) {\n  const previousSibling = node.getPreviousSibling();\n  return ($isTextNode(previousSibling) || $isElementNode(previousSibling) && previousSibling.isInline()) && !previousSibling.canInsertTextAfter();\n}\n\n// This function is connected to $shouldPreventDefaultAndInsertText and determines whether the\n// TextNode boundaries are writable or we should use the previous/next sibling instead. For example,\n// in the case of a LinkNode, boundaries are not writable.\nfunction $shouldInsertTextAfterOrBeforeTextNode(selection, node) {\n  if (node.isSegmented()) {\n    return true;\n  }\n  if (!selection.isCollapsed()) {\n    return false;\n  }\n  const offset = selection.anchor.offset;\n  const parent = node.getParentOrThrow();\n  const isToken = node.isToken();\n  if (offset === 0) {\n    return !node.canInsertTextBefore() || !parent.canInsertTextBefore() && !node.isComposing() || isToken || $previousSiblingDoesNotAcceptText(node);\n  } else if (offset === node.getTextContentSize()) {\n    return !node.canInsertTextAfter() || !parent.canInsertTextAfter() && !node.isComposing() || isToken;\n  } else {\n    return false;\n  }\n}\nfunction isTab(key, altKey, ctrlKey, metaKey) {\n  return key === 'Tab' && !altKey && !ctrlKey && !metaKey;\n}\nfunction isBold(key, altKey, metaKey, ctrlKey) {\n  return key.toLowerCase() === 'b' && !altKey && controlOrMeta(metaKey, ctrlKey);\n}\nfunction isItalic(key, altKey, metaKey, ctrlKey) {\n  return key.toLowerCase() === 'i' && !altKey && controlOrMeta(metaKey, ctrlKey);\n}\nfunction isUnderline(key, altKey, metaKey, ctrlKey) {\n  return key.toLowerCase() === 'u' && !altKey && controlOrMeta(metaKey, ctrlKey);\n}\nfunction isParagraph(key, shiftKey) {\n  return isReturn(key) && !shiftKey;\n}\nfunction isLineBreak(key, shiftKey) {\n  return isReturn(key) && shiftKey;\n}\n\n// Inserts a new line after the selection\n\nfunction isOpenLineBreak(key, ctrlKey) {\n  // 79 = KeyO\n  return IS_APPLE && ctrlKey && key.toLowerCase() === 'o';\n}\nfunction isDeleteWordBackward(key, altKey, ctrlKey) {\n  return isBackspace(key) && (IS_APPLE ? altKey : ctrlKey);\n}\nfunction isDeleteWordForward(key, altKey, ctrlKey) {\n  return isDelete(key) && (IS_APPLE ? altKey : ctrlKey);\n}\nfunction isDeleteLineBackward(key, metaKey) {\n  return IS_APPLE && metaKey && isBackspace(key);\n}\nfunction isDeleteLineForward(key, metaKey) {\n  return IS_APPLE && metaKey && isDelete(key);\n}\nfunction isDeleteBackward(key, altKey, metaKey, ctrlKey) {\n  if (IS_APPLE) {\n    if (altKey || metaKey) {\n      return false;\n    }\n    return isBackspace(key) || key.toLowerCase() === 'h' && ctrlKey;\n  }\n  if (ctrlKey || altKey || metaKey) {\n    return false;\n  }\n  return isBackspace(key);\n}\nfunction isDeleteForward(key, ctrlKey, shiftKey, altKey, metaKey) {\n  if (IS_APPLE) {\n    if (shiftKey || altKey || metaKey) {\n      return false;\n    }\n    return isDelete(key) || key.toLowerCase() === 'd' && ctrlKey;\n  }\n  if (ctrlKey || altKey || metaKey) {\n    return false;\n  }\n  return isDelete(key);\n}\nfunction isUndo(key, shiftKey, metaKey, ctrlKey) {\n  return key.toLowerCase() === 'z' && !shiftKey && controlOrMeta(metaKey, ctrlKey);\n}\nfunction isRedo(key, shiftKey, metaKey, ctrlKey) {\n  if (IS_APPLE) {\n    return key.toLowerCase() === 'z' && metaKey && shiftKey;\n  }\n  return key.toLowerCase() === 'y' && ctrlKey || key.toLowerCase() === 'z' && ctrlKey && shiftKey;\n}\nfunction isCopy(key, shiftKey, metaKey, ctrlKey) {\n  if (shiftKey) {\n    return false;\n  }\n  if (key.toLowerCase() === 'c') {\n    return IS_APPLE ? metaKey : ctrlKey;\n  }\n  return false;\n}\nfunction isCut(key, shiftKey, metaKey, ctrlKey) {\n  if (shiftKey) {\n    return false;\n  }\n  if (key.toLowerCase() === 'x') {\n    return IS_APPLE ? metaKey : ctrlKey;\n  }\n  return false;\n}\nfunction isArrowLeft(key) {\n  return key === 'ArrowLeft';\n}\nfunction isArrowRight(key) {\n  return key === 'ArrowRight';\n}\nfunction isArrowUp(key) {\n  return key === 'ArrowUp';\n}\nfunction isArrowDown(key) {\n  return key === 'ArrowDown';\n}\nfunction isMoveBackward(key, ctrlKey, altKey, metaKey) {\n  return isArrowLeft(key) && !ctrlKey && !metaKey && !altKey;\n}\nfunction isMoveToStart(key, ctrlKey, shiftKey, altKey, metaKey) {\n  return isArrowLeft(key) && !altKey && !shiftKey && (ctrlKey || metaKey);\n}\nfunction isMoveForward(key, ctrlKey, altKey, metaKey) {\n  return isArrowRight(key) && !ctrlKey && !metaKey && !altKey;\n}\nfunction isMoveToEnd(key, ctrlKey, shiftKey, altKey, metaKey) {\n  return isArrowRight(key) && !altKey && !shiftKey && (ctrlKey || metaKey);\n}\nfunction isMoveUp(key, ctrlKey, metaKey) {\n  return isArrowUp(key) && !ctrlKey && !metaKey;\n}\nfunction isMoveDown(key, ctrlKey, metaKey) {\n  return isArrowDown(key) && !ctrlKey && !metaKey;\n}\nfunction isModifier(ctrlKey, shiftKey, altKey, metaKey) {\n  return ctrlKey || shiftKey || altKey || metaKey;\n}\nfunction isSpace(key) {\n  return key === ' ';\n}\nfunction controlOrMeta(metaKey, ctrlKey) {\n  if (IS_APPLE) {\n    return metaKey;\n  }\n  return ctrlKey;\n}\nfunction isReturn(key) {\n  return key === 'Enter';\n}\nfunction isBackspace(key) {\n  return key === 'Backspace';\n}\nfunction isEscape(key) {\n  return key === 'Escape';\n}\nfunction isDelete(key) {\n  return key === 'Delete';\n}\nfunction isSelectAll(key, metaKey, ctrlKey) {\n  return key.toLowerCase() === 'a' && controlOrMeta(metaKey, ctrlKey);\n}\nfunction $selectAll(selection) {\n  const root = $getRoot();\n  if ($isRangeSelection(selection)) {\n    const anchor = selection.anchor;\n    const focus = selection.focus;\n    const anchorNode = anchor.getNode();\n    const topParent = anchorNode.getTopLevelElementOrThrow();\n    const rootNode = topParent.getParentOrThrow();\n    anchor.set(rootNode.getKey(), 0, 'element');\n    focus.set(rootNode.getKey(), rootNode.getChildrenSize(), 'element');\n    $normalizeSelection(selection);\n    return selection;\n  } else {\n    // Create a new RangeSelection\n    const newSelection = root.select(0, root.getChildrenSize());\n    $setSelection($normalizeSelection(newSelection));\n    return newSelection;\n  }\n}\nfunction getCachedClassNameArray(classNamesTheme, classNameThemeType) {\n  if (classNamesTheme.__lexicalClassNameCache === undefined) {\n    classNamesTheme.__lexicalClassNameCache = {};\n  }\n  const classNamesCache = classNamesTheme.__lexicalClassNameCache;\n  const cachedClassNames = classNamesCache[classNameThemeType];\n  if (cachedClassNames !== undefined) {\n    return cachedClassNames;\n  }\n  const classNames = classNamesTheme[classNameThemeType];\n  // As we're using classList, we need\n  // to handle className tokens that have spaces.\n  // The easiest way to do this to convert the\n  // className tokens to an array that can be\n  // applied to classList.add()/remove().\n  if (typeof classNames === 'string') {\n    const classNamesArr = normalizeClassNames(classNames);\n    classNamesCache[classNameThemeType] = classNamesArr;\n    return classNamesArr;\n  }\n  return classNames;\n}\nfunction setMutatedNode(mutatedNodes, registeredNodes, mutationListeners, node, mutation) {\n  if (mutationListeners.size === 0) {\n    return;\n  }\n  const nodeType = node.__type;\n  const nodeKey = node.__key;\n  const registeredNode = registeredNodes.get(nodeType);\n  if (registeredNode === undefined) {\n    {\n      throw Error(`Type ${nodeType} not in registeredNodes`);\n    }\n  }\n  const klass = registeredNode.klass;\n  let mutatedNodesByType = mutatedNodes.get(klass);\n  if (mutatedNodesByType === undefined) {\n    mutatedNodesByType = new Map();\n    mutatedNodes.set(klass, mutatedNodesByType);\n  }\n  const prevMutation = mutatedNodesByType.get(nodeKey);\n  // If the node has already been \"destroyed\", yet we are\n  // re-making it, then this means a move likely happened.\n  // We should change the mutation to be that of \"updated\"\n  // instead.\n  const isMove = prevMutation === 'destroyed' && mutation === 'created';\n  if (prevMutation === undefined || isMove) {\n    mutatedNodesByType.set(nodeKey, isMove ? 'updated' : mutation);\n  }\n}\n/**\n * @deprecated Use {@link LexicalEditor.registerMutationListener} with `skipInitialization: false` instead.\n */\nfunction $nodesOfType(klass) {\n  const klassType = klass.getType();\n  const editorState = getActiveEditorState();\n  if (editorState._readOnly) {\n    const nodes = getCachedTypeToNodeMap(editorState).get(klassType);\n    return nodes ? Array.from(nodes.values()) : [];\n  }\n  const nodes = editorState._nodeMap;\n  const nodesOfType = [];\n  for (const [, node] of nodes) {\n    if (node instanceof klass && node.__type === klassType && node.isAttached()) {\n      nodesOfType.push(node);\n    }\n  }\n  return nodesOfType;\n}\nfunction resolveElement(element, isBackward, focusOffset) {\n  const parent = element.getParent();\n  let offset = focusOffset;\n  let block = element;\n  if (parent !== null) {\n    if (isBackward && focusOffset === 0) {\n      offset = block.getIndexWithinParent();\n      block = parent;\n    } else if (!isBackward && focusOffset === block.getChildrenSize()) {\n      offset = block.getIndexWithinParent() + 1;\n      block = parent;\n    }\n  }\n  return block.getChildAtIndex(isBackward ? offset - 1 : offset);\n}\nfunction $getAdjacentNode(focus, isBackward) {\n  const focusOffset = focus.offset;\n  if (focus.type === 'element') {\n    const block = focus.getNode();\n    return resolveElement(block, isBackward, focusOffset);\n  } else {\n    const focusNode = focus.getNode();\n    if (isBackward && focusOffset === 0 || !isBackward && focusOffset === focusNode.getTextContentSize()) {\n      const possibleNode = isBackward ? focusNode.getPreviousSibling() : focusNode.getNextSibling();\n      if (possibleNode === null) {\n        return resolveElement(focusNode.getParentOrThrow(), isBackward, focusNode.getIndexWithinParent() + (isBackward ? 0 : 1));\n      }\n      return possibleNode;\n    }\n  }\n  return null;\n}\nfunction isFirefoxClipboardEvents(editor) {\n  const event = getWindow(editor).event;\n  const inputType = event && event.inputType;\n  return inputType === 'insertFromPaste' || inputType === 'insertFromPasteAsQuotation';\n}\nfunction dispatchCommand(editor, command, payload) {\n  return triggerCommandListeners(editor, command, payload);\n}\nfunction $textContentRequiresDoubleLinebreakAtEnd(node) {\n  return !$isRootNode(node) && !node.isLastChild() && !node.isInline();\n}\nfunction getElementByKeyOrThrow(editor, key) {\n  const element = editor._keyToDOMMap.get(key);\n  if (element === undefined) {\n    {\n      throw Error(`Reconciliation: could not find DOM element for node key ${key}`);\n    }\n  }\n  return element;\n}\nfunction getParentElement(node) {\n  const parentElement = node.assignedSlot || node.parentElement;\n  return isDocumentFragment(parentElement) ? parentElement.host : parentElement;\n}\nfunction scrollIntoViewIfNeeded(editor, selectionRect, rootElement) {\n  const doc = rootElement.ownerDocument;\n  const defaultView = doc.defaultView;\n  if (defaultView === null) {\n    return;\n  }\n  let {\n    top: currentTop,\n    bottom: currentBottom\n  } = selectionRect;\n  let targetTop = 0;\n  let targetBottom = 0;\n  let element = rootElement;\n  while (element !== null) {\n    const isBodyElement = element === doc.body;\n    if (isBodyElement) {\n      targetTop = 0;\n      targetBottom = getWindow(editor).innerHeight;\n    } else {\n      const targetRect = element.getBoundingClientRect();\n      targetTop = targetRect.top;\n      targetBottom = targetRect.bottom;\n    }\n    let diff = 0;\n    if (currentTop < targetTop) {\n      diff = -(targetTop - currentTop);\n    } else if (currentBottom > targetBottom) {\n      diff = currentBottom - targetBottom;\n    }\n    if (diff !== 0) {\n      if (isBodyElement) {\n        // Only handles scrolling of Y axis\n        defaultView.scrollBy(0, diff);\n      } else {\n        const scrollTop = element.scrollTop;\n        element.scrollTop += diff;\n        const yOffset = element.scrollTop - scrollTop;\n        currentTop -= yOffset;\n        currentBottom -= yOffset;\n      }\n    }\n    if (isBodyElement) {\n      break;\n    }\n    element = getParentElement(element);\n  }\n}\nfunction $hasUpdateTag(tag) {\n  const editor = getActiveEditor();\n  return editor._updateTags.has(tag);\n}\nfunction $addUpdateTag(tag) {\n  errorOnReadOnly();\n  const editor = getActiveEditor();\n  editor._updateTags.add(tag);\n}\n\n/**\n * Add a function to run after the current update. This will run after any\n * `onUpdate` function already supplied to `editor.update()`, as well as any\n * functions added with previous calls to `$onUpdate`.\n *\n * @param updateFn The function to run after the current update.\n */\nfunction $onUpdate(updateFn) {\n  errorOnReadOnly();\n  const editor = getActiveEditor();\n  editor._deferred.push(updateFn);\n}\nfunction $maybeMoveChildrenSelectionToParent(parentNode) {\n  const selection = $getSelection();\n  if (!$isRangeSelection(selection) || !$isElementNode(parentNode)) {\n    return selection;\n  }\n  const {\n    anchor,\n    focus\n  } = selection;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n  if ($hasAncestor(anchorNode, parentNode)) {\n    anchor.set(parentNode.__key, 0, 'element');\n  }\n  if ($hasAncestor(focusNode, parentNode)) {\n    focus.set(parentNode.__key, 0, 'element');\n  }\n  return selection;\n}\nfunction $hasAncestor(child, targetNode) {\n  let parent = child.getParent();\n  while (parent !== null) {\n    if (parent.is(targetNode)) {\n      return true;\n    }\n    parent = parent.getParent();\n  }\n  return false;\n}\nfunction getDefaultView(domElem) {\n  const ownerDoc = domElem.ownerDocument;\n  return ownerDoc && ownerDoc.defaultView || null;\n}\nfunction getWindow(editor) {\n  const windowObj = editor._window;\n  if (windowObj === null) {\n    {\n      throw Error(`window object not found`);\n    }\n  }\n  return windowObj;\n}\nfunction $isInlineElementOrDecoratorNode(node) {\n  return $isElementNode(node) && node.isInline() || $isDecoratorNode(node) && node.isInline();\n}\nfunction $getNearestRootOrShadowRoot(node) {\n  let parent = node.getParentOrThrow();\n  while (parent !== null) {\n    if ($isRootOrShadowRoot(parent)) {\n      return parent;\n    }\n    parent = parent.getParentOrThrow();\n  }\n  return parent;\n}\nfunction $isRootOrShadowRoot(node) {\n  return $isRootNode(node) || $isElementNode(node) && node.isShadowRoot();\n}\n\n/**\n * Returns a shallow clone of node with a new key\n *\n * @param node - The node to be copied.\n * @returns The copy of the node.\n */\nfunction $copyNode(node) {\n  const copy = node.constructor.clone(node);\n  $setNodeKey(copy, null);\n  return copy;\n}\nfunction $applyNodeReplacement(node) {\n  const editor = getActiveEditor();\n  const nodeType = node.constructor.getType();\n  const registeredNode = editor._nodes.get(nodeType);\n  if (!(registeredNode !== undefined)) {\n    throw Error(`$applyNodeReplacement node ${node.constructor.name} with type ${nodeType} must be registered to the editor. You can do this by passing the node class via the \"nodes\" array in the editor config.`);\n  }\n  const {\n    replace,\n    replaceWithKlass\n  } = registeredNode;\n  if (replace !== null) {\n    const replacementNode = replace(node);\n    const replacementNodeKlass = replacementNode.constructor;\n    if (replaceWithKlass !== null) {\n      if (!(replacementNode instanceof replaceWithKlass)) {\n        throw Error(`$applyNodeReplacement failed. Expected replacement node to be an instance of ${replaceWithKlass.name} with type ${replaceWithKlass.getType()} but returned ${replacementNodeKlass.name} with type ${replacementNodeKlass.getType()} from original node ${node.constructor.name} with type ${nodeType}`);\n      }\n    } else {\n      if (!(replacementNode instanceof node.constructor && replacementNodeKlass !== node.constructor)) {\n        throw Error(`$applyNodeReplacement failed. Ensure replacement node ${replacementNodeKlass.name} with type ${replacementNodeKlass.getType()} is a subclass of the original node ${node.constructor.name} with type ${nodeType}.`);\n      }\n    }\n    if (!(replacementNode.__key !== node.__key)) {\n      throw Error(`$applyNodeReplacement failed. Ensure that the key argument is *not* used in your replace function (from node ${node.constructor.name} with type ${nodeType} to node ${replacementNodeKlass.name} with type ${replacementNodeKlass.getType()}), Node keys must never be re-used except by the static clone method.`);\n    }\n    return replacementNode;\n  }\n  return node;\n}\nfunction errorOnInsertTextNodeOnRoot(node, insertNode) {\n  const parentNode = node.getParent();\n  if ($isRootNode(parentNode) && !$isElementNode(insertNode) && !$isDecoratorNode(insertNode)) {\n    {\n      throw Error(`Only element or decorator nodes can be inserted in to the root node`);\n    }\n  }\n}\nfunction $getNodeByKeyOrThrow(key) {\n  const node = $getNodeByKey(key);\n  if (node === null) {\n    {\n      throw Error(`Expected node with key ${key} to exist but it's not in the nodeMap.`);\n    }\n  }\n  return node;\n}\nfunction createBlockCursorElement(editorConfig) {\n  const theme = editorConfig.theme;\n  const element = document.createElement('div');\n  element.contentEditable = 'false';\n  element.setAttribute('data-lexical-cursor', 'true');\n  let blockCursorTheme = theme.blockCursor;\n  if (blockCursorTheme !== undefined) {\n    if (typeof blockCursorTheme === 'string') {\n      const classNamesArr = normalizeClassNames(blockCursorTheme);\n      // @ts-expect-error: intentional\n      blockCursorTheme = theme.blockCursor = classNamesArr;\n    }\n    if (blockCursorTheme !== undefined) {\n      element.classList.add(...blockCursorTheme);\n    }\n  }\n  return element;\n}\nfunction needsBlockCursor(node) {\n  return ($isDecoratorNode(node) || $isElementNode(node) && !node.canBeEmpty()) && !node.isInline();\n}\nfunction removeDOMBlockCursorElement(blockCursorElement, editor, rootElement) {\n  rootElement.style.removeProperty('caret-color');\n  editor._blockCursorElement = null;\n  const parentElement = blockCursorElement.parentElement;\n  if (parentElement !== null) {\n    parentElement.removeChild(blockCursorElement);\n  }\n}\nfunction updateDOMBlockCursorElement(editor, rootElement, nextSelection) {\n  let blockCursorElement = editor._blockCursorElement;\n  if ($isRangeSelection(nextSelection) && nextSelection.isCollapsed() && nextSelection.anchor.type === 'element' && rootElement.contains(document.activeElement)) {\n    const anchor = nextSelection.anchor;\n    const elementNode = anchor.getNode();\n    const offset = anchor.offset;\n    const elementNodeSize = elementNode.getChildrenSize();\n    let isBlockCursor = false;\n    let insertBeforeElement = null;\n    if (offset === elementNodeSize) {\n      const child = elementNode.getChildAtIndex(offset - 1);\n      if (needsBlockCursor(child)) {\n        isBlockCursor = true;\n      }\n    } else {\n      const child = elementNode.getChildAtIndex(offset);\n      if (child !== null && needsBlockCursor(child)) {\n        const sibling = child.getPreviousSibling();\n        if (sibling === null || needsBlockCursor(sibling)) {\n          isBlockCursor = true;\n          insertBeforeElement = editor.getElementByKey(child.__key);\n        }\n      }\n    }\n    if (isBlockCursor) {\n      const elementDOM = editor.getElementByKey(elementNode.__key);\n      if (blockCursorElement === null) {\n        editor._blockCursorElement = blockCursorElement = createBlockCursorElement(editor._config);\n      }\n      rootElement.style.caretColor = 'transparent';\n      if (insertBeforeElement === null) {\n        elementDOM.appendChild(blockCursorElement);\n      } else {\n        elementDOM.insertBefore(blockCursorElement, insertBeforeElement);\n      }\n      return;\n    }\n  }\n  // Remove cursor\n  if (blockCursorElement !== null) {\n    removeDOMBlockCursorElement(blockCursorElement, editor, rootElement);\n  }\n}\n\n/**\n * Returns the selection for the given window, or the global window if null.\n * Will return null if {@link CAN_USE_DOM} is false.\n *\n * @param targetWindow The window to get the selection from\n * @returns a Selection or null\n */\nfunction getDOMSelection(targetWindow) {\n  return !CAN_USE_DOM ? null : (targetWindow || window).getSelection();\n}\nfunction $splitNode(node, offset) {\n  let startNode = node.getChildAtIndex(offset);\n  if (startNode == null) {\n    startNode = node;\n  }\n  if (!!$isRootOrShadowRoot(node)) {\n    throw Error(`Can not call $splitNode() on root element`);\n  }\n  const recurse = currentNode => {\n    const parent = currentNode.getParentOrThrow();\n    const isParentRoot = $isRootOrShadowRoot(parent);\n    // The node we start split from (leaf) is moved, but its recursive\n    // parents are copied to create separate tree\n    const nodeToMove = currentNode === startNode && !isParentRoot ? currentNode : $copyNode(currentNode);\n    if (isParentRoot) {\n      if (!($isElementNode(currentNode) && $isElementNode(nodeToMove))) {\n        throw Error(`Children of a root must be ElementNode`);\n      }\n      currentNode.insertAfter(nodeToMove);\n      return [currentNode, nodeToMove, nodeToMove];\n    } else {\n      const [leftTree, rightTree, newParent] = recurse(parent);\n      const nextSiblings = currentNode.getNextSiblings();\n      newParent.append(nodeToMove, ...nextSiblings);\n      return [leftTree, rightTree, nodeToMove];\n    }\n  };\n  const [leftTree, rightTree] = recurse(startNode);\n  return [leftTree, rightTree];\n}\n\n/**\n * @param x - The element being tested\n * @returns Returns true if x is an HTML anchor tag, false otherwise\n */\nfunction isHTMLAnchorElement(x) {\n  return isHTMLElement(x) && x.tagName === 'A';\n}\n\n/**\n * @param x - The element being tested\n * @returns Returns true if x is an HTML element, false otherwise.\n */\nfunction isHTMLElement(x) {\n  return isDOMNode(x) && x.nodeType === 1;\n}\n\n/**\n * @param x - The element being tested\n * @returns Returns true if x is a DOM Node, false otherwise.\n */\nfunction isDOMNode(x) {\n  return typeof x === 'object' && x !== null && 'nodeType' in x && typeof x.nodeType === 'number';\n}\n\n/**\n * @param x - The element being testing\n * @returns Returns true if x is a document fragment, false otherwise.\n */\nfunction isDocumentFragment(x) {\n  return isDOMNode(x) && x.nodeType === 11;\n}\n\n/**\n *\n * @param node - the Dom Node to check\n * @returns if the Dom Node is an inline node\n */\nfunction isInlineDomNode(node) {\n  const inlineNodes = new RegExp(/^(a|abbr|acronym|b|cite|code|del|em|i|ins|kbd|label|output|q|ruby|s|samp|span|strong|sub|sup|time|u|tt|var|#text)$/, 'i');\n  return node.nodeName.match(inlineNodes) !== null;\n}\n\n/**\n *\n * @param node - the Dom Node to check\n * @returns if the Dom Node is a block node\n */\nfunction isBlockDomNode(node) {\n  const blockNodes = new RegExp(/^(address|article|aside|blockquote|canvas|dd|div|dl|dt|fieldset|figcaption|figure|footer|form|h1|h2|h3|h4|h5|h6|header|hr|li|main|nav|noscript|ol|p|pre|section|table|td|tfoot|ul|video)$/, 'i');\n  return node.nodeName.match(blockNodes) !== null;\n}\n\n/**\n * This function is for internal use of the library.\n * Please do not use it as it may change in the future.\n */\nfunction INTERNAL_$isBlock(node) {\n  if ($isDecoratorNode(node) && !node.isInline()) {\n    return true;\n  }\n  if (!$isElementNode(node) || $isRootOrShadowRoot(node)) {\n    return false;\n  }\n  const firstChild = node.getFirstChild();\n  const isLeafElement = firstChild === null || $isLineBreakNode(firstChild) || $isTextNode(firstChild) || firstChild.isInline();\n  return !node.isInline() && node.canBeEmpty() !== false && isLeafElement;\n}\nfunction $getAncestor(node, predicate) {\n  let parent = node;\n  while (parent !== null && parent.getParent() !== null && !predicate(parent)) {\n    parent = parent.getParentOrThrow();\n  }\n  return predicate(parent) ? parent : null;\n}\n\n/**\n * Utility function for accessing current active editor instance.\n * @returns Current active editor\n */\nfunction $getEditor() {\n  return getActiveEditor();\n}\n\n/** @internal */\n\n/**\n * @internal\n * Compute a cached Map of node type to nodes for a frozen EditorState\n */\nconst cachedNodeMaps = new WeakMap();\nconst EMPTY_TYPE_TO_NODE_MAP = new Map();\nfunction getCachedTypeToNodeMap(editorState) {\n  // If this is a new Editor it may have a writable this._editorState\n  // with only a 'root' entry.\n  if (!editorState._readOnly && editorState.isEmpty()) {\n    return EMPTY_TYPE_TO_NODE_MAP;\n  }\n  if (!editorState._readOnly) {\n    throw Error(`getCachedTypeToNodeMap called with a writable EditorState`);\n  }\n  let typeToNodeMap = cachedNodeMaps.get(editorState);\n  if (!typeToNodeMap) {\n    typeToNodeMap = computeTypeToNodeMap(editorState);\n    cachedNodeMaps.set(editorState, typeToNodeMap);\n  }\n  return typeToNodeMap;\n}\n\n/**\n * @internal\n * Compute a Map of node type to nodes for an EditorState\n */\nfunction computeTypeToNodeMap(editorState) {\n  const typeToNodeMap = new Map();\n  for (const [nodeKey, node] of editorState._nodeMap) {\n    const nodeType = node.__type;\n    let nodeMap = typeToNodeMap.get(nodeType);\n    if (!nodeMap) {\n      nodeMap = new Map();\n      typeToNodeMap.set(nodeType, nodeMap);\n    }\n    nodeMap.set(nodeKey, node);\n  }\n  return typeToNodeMap;\n}\n\n/**\n * Returns a clone of a node using `node.constructor.clone()` followed by\n * `clone.afterCloneFrom(node)`. The resulting clone must have the same key,\n * parent/next/prev pointers, and other properties that are not set by\n * `node.constructor.clone` (format, style, etc.). This is primarily used by\n * {@link LexicalNode.getWritable} to create a writable version of an\n * existing node. The clone is the same logical node as the original node,\n * do not try and use this function to duplicate or copy an existing node.\n *\n * Does not mutate the EditorState.\n * @param node - The node to be cloned.\n * @returns The clone of the node.\n */\nfunction $cloneWithProperties(latestNode) {\n  const constructor = latestNode.constructor;\n  const mutableNode = constructor.clone(latestNode);\n  mutableNode.afterCloneFrom(latestNode);\n  {\n    if (!(mutableNode.__key === latestNode.__key)) {\n      throw Error(`$cloneWithProperties: ${constructor.name}.clone(node) (with type '${constructor.getType()}') did not return a node with the same key, make sure to specify node.__key as the last argument to the constructor`);\n    }\n    if (!(mutableNode.__parent === latestNode.__parent && mutableNode.__next === latestNode.__next && mutableNode.__prev === latestNode.__prev)) {\n      throw Error(`$cloneWithProperties: ${constructor.name}.clone(node) (with type '${constructor.getType()}') overrided afterCloneFrom but did not call super.afterCloneFrom(prevNode)`);\n    }\n  }\n  return mutableNode;\n}\nfunction setNodeIndentFromDOM(elementDom, elementNode) {\n  const indentSize = parseInt(elementDom.style.paddingInlineStart, 10) || 0;\n  const indent = indentSize / 40;\n  elementNode.setIndent(indent);\n}\n\n/**\n * @internal\n *\n * Mark this node as unmanaged by lexical's mutation observer like\n * decorator nodes\n */\nfunction setDOMUnmanaged(elementDom) {\n  const el = elementDom;\n  el.__lexicalUnmanaged = true;\n}\n\n/**\n * @internal\n *\n * True if this DOM node was marked with {@link setDOMUnmanaged}\n */\nfunction isDOMUnmanaged(elementDom) {\n  const el = elementDom;\n  return el.__lexicalUnmanaged === true;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction $garbageCollectDetachedDecorators(editor, pendingEditorState) {\n  const currentDecorators = editor._decorators;\n  const pendingDecorators = editor._pendingDecorators;\n  let decorators = pendingDecorators || currentDecorators;\n  const nodeMap = pendingEditorState._nodeMap;\n  let key;\n  for (key in decorators) {\n    if (!nodeMap.has(key)) {\n      if (decorators === currentDecorators) {\n        decorators = cloneDecorators(editor);\n      }\n      delete decorators[key];\n    }\n  }\n}\nfunction $garbageCollectDetachedDeepChildNodes(node, parentKey, prevNodeMap, nodeMap, nodeMapDelete, dirtyNodes) {\n  let child = node.getFirstChild();\n  while (child !== null) {\n    const childKey = child.__key;\n    // TODO Revise condition below, redundant? LexicalNode already cleans up children when moving Nodes\n    if (child.__parent === parentKey) {\n      if ($isElementNode(child)) {\n        $garbageCollectDetachedDeepChildNodes(child, childKey, prevNodeMap, nodeMap, nodeMapDelete, dirtyNodes);\n      }\n\n      // If we have created a node and it was dereferenced, then also\n      // remove it from out dirty nodes Set.\n      if (!prevNodeMap.has(childKey)) {\n        dirtyNodes.delete(childKey);\n      }\n      nodeMapDelete.push(childKey);\n    }\n    child = child.getNextSibling();\n  }\n}\nfunction $garbageCollectDetachedNodes(prevEditorState, editorState, dirtyLeaves, dirtyElements) {\n  const prevNodeMap = prevEditorState._nodeMap;\n  const nodeMap = editorState._nodeMap;\n  // Store dirtyElements in a queue for later deletion; deleting dirty subtrees too early will\n  // hinder accessing .__next on child nodes\n  const nodeMapDelete = [];\n  for (const [nodeKey] of dirtyElements) {\n    const node = nodeMap.get(nodeKey);\n    if (node !== undefined) {\n      // Garbage collect node and its children if they exist\n      if (!node.isAttached()) {\n        if ($isElementNode(node)) {\n          $garbageCollectDetachedDeepChildNodes(node, nodeKey, prevNodeMap, nodeMap, nodeMapDelete, dirtyElements);\n        }\n        // If we have created a node and it was dereferenced, then also\n        // remove it from out dirty nodes Set.\n        if (!prevNodeMap.has(nodeKey)) {\n          dirtyElements.delete(nodeKey);\n        }\n        nodeMapDelete.push(nodeKey);\n      }\n    }\n  }\n  for (const nodeKey of nodeMapDelete) {\n    nodeMap.delete(nodeKey);\n  }\n  for (const nodeKey of dirtyLeaves) {\n    const node = nodeMap.get(nodeKey);\n    if (node !== undefined && !node.isAttached()) {\n      if (!prevNodeMap.has(nodeKey)) {\n        dirtyLeaves.delete(nodeKey);\n      }\n      nodeMap.delete(nodeKey);\n    }\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nlet subTreeTextContent = '';\nlet subTreeDirectionedTextContent = '';\nlet subTreeTextFormat = null;\nlet subTreeTextStyle = '';\nlet editorTextContent = '';\nlet activeEditorConfig;\nlet activeEditor$1;\nlet activeEditorNodes;\nlet treatAllNodesAsDirty = false;\nlet activeEditorStateReadOnly = false;\nlet activeMutationListeners;\nlet activeTextDirection = null;\nlet activeDirtyElements;\nlet activeDirtyLeaves;\nlet activePrevNodeMap;\nlet activeNextNodeMap;\nlet activePrevKeyToDOMMap;\nlet mutatedNodes;\nfunction destroyNode(key, parentDOM) {\n  const node = activePrevNodeMap.get(key);\n  if (parentDOM !== null) {\n    const dom = getPrevElementByKeyOrThrow(key);\n    if (dom.parentNode === parentDOM) {\n      parentDOM.removeChild(dom);\n    }\n  }\n\n  // This logic is really important, otherwise we will leak DOM nodes\n  // when their corresponding LexicalNodes are removed from the editor state.\n  if (!activeNextNodeMap.has(key)) {\n    activeEditor$1._keyToDOMMap.delete(key);\n  }\n  if ($isElementNode(node)) {\n    const children = createChildrenArray(node, activePrevNodeMap);\n    destroyChildren(children, 0, children.length - 1, null);\n  }\n  if (node !== undefined) {\n    setMutatedNode(mutatedNodes, activeEditorNodes, activeMutationListeners, node, 'destroyed');\n  }\n}\nfunction destroyChildren(children, _startIndex, endIndex, dom) {\n  let startIndex = _startIndex;\n  for (; startIndex <= endIndex; ++startIndex) {\n    const child = children[startIndex];\n    if (child !== undefined) {\n      destroyNode(child, dom);\n    }\n  }\n}\nfunction setTextAlign(domStyle, value) {\n  domStyle.setProperty('text-align', value);\n}\nconst DEFAULT_INDENT_VALUE = '40px';\nfunction setElementIndent(dom, indent) {\n  const indentClassName = activeEditorConfig.theme.indent;\n  if (typeof indentClassName === 'string') {\n    const elementHasClassName = dom.classList.contains(indentClassName);\n    if (indent > 0 && !elementHasClassName) {\n      dom.classList.add(indentClassName);\n    } else if (indent < 1 && elementHasClassName) {\n      dom.classList.remove(indentClassName);\n    }\n  }\n  const indentationBaseValue = getComputedStyle(dom).getPropertyValue('--lexical-indent-base-value') || DEFAULT_INDENT_VALUE;\n  dom.style.setProperty('padding-inline-start', indent === 0 ? '' : `calc(${indent} * ${indentationBaseValue})`);\n}\nfunction setElementFormat(dom, format) {\n  const domStyle = dom.style;\n  if (format === 0) {\n    setTextAlign(domStyle, '');\n  } else if (format === IS_ALIGN_LEFT) {\n    setTextAlign(domStyle, 'left');\n  } else if (format === IS_ALIGN_CENTER) {\n    setTextAlign(domStyle, 'center');\n  } else if (format === IS_ALIGN_RIGHT) {\n    setTextAlign(domStyle, 'right');\n  } else if (format === IS_ALIGN_JUSTIFY) {\n    setTextAlign(domStyle, 'justify');\n  } else if (format === IS_ALIGN_START) {\n    setTextAlign(domStyle, 'start');\n  } else if (format === IS_ALIGN_END) {\n    setTextAlign(domStyle, 'end');\n  }\n}\nfunction $createNode(key, slot) {\n  const node = activeNextNodeMap.get(key);\n  if (node === undefined) {\n    {\n      throw Error(`createNode: node does not exist in nodeMap`);\n    }\n  }\n  const dom = node.createDOM(activeEditorConfig, activeEditor$1);\n  storeDOMWithKey(key, dom, activeEditor$1);\n\n  // This helps preserve the text, and stops spell check tools from\n  // merging or break the spans (which happens if they are missing\n  // this attribute).\n  if ($isTextNode(node)) {\n    dom.setAttribute('data-lexical-text', 'true');\n  } else if ($isDecoratorNode(node)) {\n    dom.setAttribute('data-lexical-decorator', 'true');\n  }\n  if ($isElementNode(node)) {\n    const indent = node.__indent;\n    const childrenSize = node.__size;\n    if (indent !== 0) {\n      setElementIndent(dom, indent);\n    }\n    if (childrenSize !== 0) {\n      const endIndex = childrenSize - 1;\n      const children = createChildrenArray(node, activeNextNodeMap);\n      $createChildrenWithDirection(children, endIndex, node, dom);\n    }\n    const format = node.__format;\n    if (format !== 0) {\n      setElementFormat(dom, format);\n    }\n    if (!node.isInline()) {\n      reconcileElementTerminatingLineBreak(null, node, dom);\n    }\n    if ($textContentRequiresDoubleLinebreakAtEnd(node)) {\n      subTreeTextContent += DOUBLE_LINE_BREAK;\n      editorTextContent += DOUBLE_LINE_BREAK;\n    }\n  } else {\n    const text = node.getTextContent();\n    if ($isDecoratorNode(node)) {\n      const decorator = node.decorate(activeEditor$1, activeEditorConfig);\n      if (decorator !== null) {\n        reconcileDecorator(key, decorator);\n      }\n      // Decorators are always non editable\n      dom.contentEditable = 'false';\n    } else if ($isTextNode(node)) {\n      if (!node.isDirectionless()) {\n        subTreeDirectionedTextContent += text;\n      }\n    }\n    subTreeTextContent += text;\n    editorTextContent += text;\n  }\n  if (slot !== null) {\n    slot.insertChild(dom);\n  }\n  {\n    // Freeze the node in DEV to prevent accidental mutations\n    Object.freeze(node);\n  }\n  setMutatedNode(mutatedNodes, activeEditorNodes, activeMutationListeners, node, 'created');\n  return dom;\n}\nfunction $createChildrenWithDirection(children, endIndex, element, dom) {\n  const previousSubTreeDirectionedTextContent = subTreeDirectionedTextContent;\n  subTreeDirectionedTextContent = '';\n  $createChildren(children, element, 0, endIndex, element.getDOMSlot(dom));\n  reconcileBlockDirection(element, dom);\n  subTreeDirectionedTextContent = previousSubTreeDirectionedTextContent;\n}\nfunction $createChildren(children, element, _startIndex, endIndex, slot) {\n  const previousSubTreeTextContent = subTreeTextContent;\n  subTreeTextContent = '';\n  let startIndex = _startIndex;\n  for (; startIndex <= endIndex; ++startIndex) {\n    $createNode(children[startIndex], slot);\n    const node = activeNextNodeMap.get(children[startIndex]);\n    if (node !== null && $isTextNode(node)) {\n      if (subTreeTextFormat === null) {\n        subTreeTextFormat = node.getFormat();\n      }\n      if (subTreeTextStyle === '') {\n        subTreeTextStyle = node.getStyle();\n      }\n    }\n  }\n  if ($textContentRequiresDoubleLinebreakAtEnd(element)) {\n    subTreeTextContent += DOUBLE_LINE_BREAK;\n  }\n  const dom = slot.element;\n  dom.__lexicalTextContent = subTreeTextContent;\n  subTreeTextContent = previousSubTreeTextContent + subTreeTextContent;\n}\nfunction isLastChildLineBreakOrDecorator(element, nodeMap) {\n  if (element) {\n    const lastKey = element.__last;\n    if (lastKey) {\n      const node = nodeMap.get(lastKey);\n      if (node) {\n        return $isLineBreakNode(node) ? 'line-break' : $isDecoratorNode(node) && node.isInline() ? 'decorator' : null;\n      }\n    }\n    return 'empty';\n  }\n  return null;\n}\n\n// If we end an element with a LineBreakNode, then we need to add an additional <br>\nfunction reconcileElementTerminatingLineBreak(prevElement, nextElement, dom) {\n  const prevLineBreak = isLastChildLineBreakOrDecorator(prevElement, activePrevNodeMap);\n  const nextLineBreak = isLastChildLineBreakOrDecorator(nextElement, activeNextNodeMap);\n  if (prevLineBreak !== nextLineBreak) {\n    nextElement.getDOMSlot(dom).setManagedLineBreak(nextLineBreak);\n  }\n}\nfunction reconcileParagraphFormat(element) {\n  if ($isParagraphNode(element) && subTreeTextFormat != null && subTreeTextFormat !== element.__textFormat && !activeEditorStateReadOnly) {\n    element.setTextFormat(subTreeTextFormat);\n    element.setTextStyle(subTreeTextStyle);\n  }\n}\nfunction reconcileParagraphStyle(element) {\n  if ($isParagraphNode(element) && subTreeTextStyle !== '' && subTreeTextStyle !== element.__textStyle && !activeEditorStateReadOnly) {\n    element.setTextStyle(subTreeTextStyle);\n  }\n}\nfunction reconcileBlockDirection(element, dom) {\n  const previousSubTreeDirectionTextContent = dom.__lexicalDirTextContent || '';\n  const previousDirection = dom.__lexicalDir || '';\n  if (previousSubTreeDirectionTextContent !== subTreeDirectionedTextContent || previousDirection !== activeTextDirection) {\n    const hasEmptyDirectionedTextContent = subTreeDirectionedTextContent === '';\n    const direction = hasEmptyDirectionedTextContent ? activeTextDirection : getTextDirection(subTreeDirectionedTextContent);\n    if (direction !== previousDirection) {\n      const classList = dom.classList;\n      const theme = activeEditorConfig.theme;\n      let previousDirectionTheme = previousDirection !== null ? theme[previousDirection] : undefined;\n      let nextDirectionTheme = direction !== null ? theme[direction] : undefined;\n\n      // Remove the old theme classes if they exist\n      if (previousDirectionTheme !== undefined) {\n        if (typeof previousDirectionTheme === 'string') {\n          const classNamesArr = normalizeClassNames(previousDirectionTheme);\n          previousDirectionTheme = theme[previousDirection] = classNamesArr;\n        }\n\n        // @ts-ignore: intentional\n        classList.remove(...previousDirectionTheme);\n      }\n      if (direction === null || hasEmptyDirectionedTextContent && direction === 'ltr') {\n        // Remove direction\n        dom.removeAttribute('dir');\n      } else {\n        // Apply the new theme classes if they exist\n        if (nextDirectionTheme !== undefined) {\n          if (typeof nextDirectionTheme === 'string') {\n            const classNamesArr = normalizeClassNames(nextDirectionTheme);\n            // @ts-expect-error: intentional\n            nextDirectionTheme = theme[direction] = classNamesArr;\n          }\n          if (nextDirectionTheme !== undefined) {\n            classList.add(...nextDirectionTheme);\n          }\n        }\n\n        // Update direction\n        dom.dir = direction;\n      }\n      if (!activeEditorStateReadOnly) {\n        const writableNode = element.getWritable();\n        writableNode.__dir = direction;\n      }\n    }\n    activeTextDirection = direction;\n    dom.__lexicalDirTextContent = subTreeDirectionedTextContent;\n    dom.__lexicalDir = direction;\n  }\n}\nfunction $reconcileChildrenWithDirection(prevElement, nextElement, dom) {\n  const previousSubTreeDirectionTextContent = subTreeDirectionedTextContent;\n  subTreeDirectionedTextContent = '';\n  subTreeTextFormat = null;\n  subTreeTextStyle = '';\n  $reconcileChildren(prevElement, nextElement, nextElement.getDOMSlot(dom));\n  reconcileBlockDirection(nextElement, dom);\n  reconcileParagraphFormat(nextElement);\n  reconcileParagraphStyle(nextElement);\n  subTreeDirectionedTextContent = previousSubTreeDirectionTextContent;\n}\nfunction createChildrenArray(element, nodeMap) {\n  const children = [];\n  let nodeKey = element.__first;\n  while (nodeKey !== null) {\n    const node = nodeMap.get(nodeKey);\n    if (node === undefined) {\n      {\n        throw Error(`createChildrenArray: node does not exist in nodeMap`);\n      }\n    }\n    children.push(nodeKey);\n    nodeKey = node.__next;\n  }\n  return children;\n}\nfunction $reconcileChildren(prevElement, nextElement, slot) {\n  const previousSubTreeTextContent = subTreeTextContent;\n  const prevChildrenSize = prevElement.__size;\n  const nextChildrenSize = nextElement.__size;\n  subTreeTextContent = '';\n  const dom = slot.element;\n  if (prevChildrenSize === 1 && nextChildrenSize === 1) {\n    const prevFirstChildKey = prevElement.__first;\n    const nextFirstChildKey = nextElement.__first;\n    if (prevFirstChildKey === nextFirstChildKey) {\n      $reconcileNode(prevFirstChildKey, dom);\n    } else {\n      const lastDOM = getPrevElementByKeyOrThrow(prevFirstChildKey);\n      const replacementDOM = $createNode(nextFirstChildKey, null);\n      try {\n        dom.replaceChild(replacementDOM, lastDOM);\n      } catch (error) {\n        if (typeof error === 'object' && error != null) {\n          const msg = `${error.toString()} Parent: ${dom.tagName}, new child: {tag: ${replacementDOM.tagName} key: ${nextFirstChildKey}}, old child: {tag: ${lastDOM.tagName}, key: ${prevFirstChildKey}}.`;\n          throw new Error(msg);\n        } else {\n          throw error;\n        }\n      }\n      destroyNode(prevFirstChildKey, null);\n    }\n    const nextChildNode = activeNextNodeMap.get(nextFirstChildKey);\n    if ($isTextNode(nextChildNode)) {\n      if (subTreeTextFormat === null) {\n        subTreeTextFormat = nextChildNode.getFormat();\n      }\n      if (subTreeTextStyle === '') {\n        subTreeTextStyle = nextChildNode.getStyle();\n      }\n    }\n  } else {\n    const prevChildren = createChildrenArray(prevElement, activePrevNodeMap);\n    const nextChildren = createChildrenArray(nextElement, activeNextNodeMap);\n    if (!(prevChildren.length === prevChildrenSize)) {\n      throw Error(`$reconcileChildren: prevChildren.length !== prevChildrenSize`);\n    }\n    if (!(nextChildren.length === nextChildrenSize)) {\n      throw Error(`$reconcileChildren: nextChildren.length !== nextChildrenSize`);\n    }\n    if (prevChildrenSize === 0) {\n      if (nextChildrenSize !== 0) {\n        $createChildren(nextChildren, nextElement, 0, nextChildrenSize - 1, slot);\n      }\n    } else if (nextChildrenSize === 0) {\n      if (prevChildrenSize !== 0) {\n        const canUseFastPath = slot.after == null && slot.before == null && slot.element.__lexicalLineBreak == null;\n        destroyChildren(prevChildren, 0, prevChildrenSize - 1, canUseFastPath ? null : dom);\n        if (canUseFastPath) {\n          // Fast path for removing DOM nodes\n          dom.textContent = '';\n        }\n      }\n    } else {\n      $reconcileNodeChildren(nextElement, prevChildren, nextChildren, prevChildrenSize, nextChildrenSize, slot);\n    }\n  }\n  if ($textContentRequiresDoubleLinebreakAtEnd(nextElement)) {\n    subTreeTextContent += DOUBLE_LINE_BREAK;\n  }\n  dom.__lexicalTextContent = subTreeTextContent;\n  subTreeTextContent = previousSubTreeTextContent + subTreeTextContent;\n}\nfunction $reconcileNode(key, parentDOM) {\n  const prevNode = activePrevNodeMap.get(key);\n  let nextNode = activeNextNodeMap.get(key);\n  if (prevNode === undefined || nextNode === undefined) {\n    {\n      throw Error(`reconcileNode: prevNode or nextNode does not exist in nodeMap`);\n    }\n  }\n  const isDirty = treatAllNodesAsDirty || activeDirtyLeaves.has(key) || activeDirtyElements.has(key);\n  const dom = getElementByKeyOrThrow(activeEditor$1, key);\n\n  // If the node key points to the same instance in both states\n  // and isn't dirty, we just update the text content cache\n  // and return the existing DOM Node.\n  if (prevNode === nextNode && !isDirty) {\n    if ($isElementNode(prevNode)) {\n      const previousSubTreeTextContent = dom.__lexicalTextContent;\n      if (previousSubTreeTextContent !== undefined) {\n        subTreeTextContent += previousSubTreeTextContent;\n        editorTextContent += previousSubTreeTextContent;\n      }\n      const previousSubTreeDirectionTextContent = dom.__lexicalDirTextContent;\n      if (previousSubTreeDirectionTextContent !== undefined) {\n        subTreeDirectionedTextContent += previousSubTreeDirectionTextContent;\n      }\n    } else {\n      const text = prevNode.getTextContent();\n      if ($isTextNode(prevNode) && !prevNode.isDirectionless()) {\n        subTreeDirectionedTextContent += text;\n      }\n      editorTextContent += text;\n      subTreeTextContent += text;\n    }\n    return dom;\n  }\n  // If the node key doesn't point to the same instance in both maps,\n  // it means it were cloned. If they're also dirty, we mark them as mutated.\n  if (prevNode !== nextNode && isDirty) {\n    setMutatedNode(mutatedNodes, activeEditorNodes, activeMutationListeners, nextNode, 'updated');\n  }\n\n  // Update node. If it returns true, we need to unmount and re-create the node\n  if (nextNode.updateDOM(prevNode, dom, activeEditorConfig)) {\n    const replacementDOM = $createNode(key, null);\n    if (parentDOM === null) {\n      {\n        throw Error(`reconcileNode: parentDOM is null`);\n      }\n    }\n    parentDOM.replaceChild(replacementDOM, dom);\n    destroyNode(key, null);\n    return replacementDOM;\n  }\n  if ($isElementNode(prevNode) && $isElementNode(nextNode)) {\n    // Reconcile element children\n    const nextIndent = nextNode.__indent;\n    if (nextIndent !== prevNode.__indent) {\n      setElementIndent(dom, nextIndent);\n    }\n    const nextFormat = nextNode.__format;\n    if (nextFormat !== prevNode.__format) {\n      setElementFormat(dom, nextFormat);\n    }\n    if (isDirty) {\n      $reconcileChildrenWithDirection(prevNode, nextNode, dom);\n      if (!$isRootNode(nextNode) && !nextNode.isInline()) {\n        reconcileElementTerminatingLineBreak(prevNode, nextNode, dom);\n      }\n    }\n    if ($textContentRequiresDoubleLinebreakAtEnd(nextNode)) {\n      subTreeTextContent += DOUBLE_LINE_BREAK;\n      editorTextContent += DOUBLE_LINE_BREAK;\n    }\n  } else {\n    const text = nextNode.getTextContent();\n    if ($isDecoratorNode(nextNode)) {\n      const decorator = nextNode.decorate(activeEditor$1, activeEditorConfig);\n      if (decorator !== null) {\n        reconcileDecorator(key, decorator);\n      }\n    } else if ($isTextNode(nextNode) && !nextNode.isDirectionless()) {\n      // Handle text content, for LTR, LTR cases.\n      subTreeDirectionedTextContent += text;\n    }\n    subTreeTextContent += text;\n    editorTextContent += text;\n  }\n  if (!activeEditorStateReadOnly && $isRootNode(nextNode) && nextNode.__cachedText !== editorTextContent) {\n    // Cache the latest text content.\n    const nextRootNode = nextNode.getWritable();\n    nextRootNode.__cachedText = editorTextContent;\n    nextNode = nextRootNode;\n  }\n  {\n    // Freeze the node in DEV to prevent accidental mutations\n    Object.freeze(nextNode);\n  }\n  return dom;\n}\nfunction reconcileDecorator(key, decorator) {\n  let pendingDecorators = activeEditor$1._pendingDecorators;\n  const currentDecorators = activeEditor$1._decorators;\n  if (pendingDecorators === null) {\n    if (currentDecorators[key] === decorator) {\n      return;\n    }\n    pendingDecorators = cloneDecorators(activeEditor$1);\n  }\n  pendingDecorators[key] = decorator;\n}\nfunction getNextSibling(element) {\n  let nextSibling = element.nextSibling;\n  if (nextSibling !== null && nextSibling === activeEditor$1._blockCursorElement) {\n    nextSibling = nextSibling.nextSibling;\n  }\n  return nextSibling;\n}\nfunction $reconcileNodeChildren(nextElement, prevChildren, nextChildren, prevChildrenLength, nextChildrenLength, slot) {\n  const prevEndIndex = prevChildrenLength - 1;\n  const nextEndIndex = nextChildrenLength - 1;\n  let prevChildrenSet;\n  let nextChildrenSet;\n  let siblingDOM = slot.getFirstChild();\n  let prevIndex = 0;\n  let nextIndex = 0;\n  while (prevIndex <= prevEndIndex && nextIndex <= nextEndIndex) {\n    const prevKey = prevChildren[prevIndex];\n    const nextKey = nextChildren[nextIndex];\n    if (prevKey === nextKey) {\n      siblingDOM = getNextSibling($reconcileNode(nextKey, slot.element));\n      prevIndex++;\n      nextIndex++;\n    } else {\n      if (prevChildrenSet === undefined) {\n        prevChildrenSet = new Set(prevChildren);\n      }\n      if (nextChildrenSet === undefined) {\n        nextChildrenSet = new Set(nextChildren);\n      }\n      const nextHasPrevKey = nextChildrenSet.has(prevKey);\n      const prevHasNextKey = prevChildrenSet.has(nextKey);\n      if (!nextHasPrevKey) {\n        // Remove prev\n        siblingDOM = getNextSibling(getPrevElementByKeyOrThrow(prevKey));\n        destroyNode(prevKey, slot.element);\n        prevIndex++;\n      } else if (!prevHasNextKey) {\n        // Create next\n        $createNode(nextKey, slot.withBefore(siblingDOM));\n        nextIndex++;\n      } else {\n        // Move next\n        const childDOM = getElementByKeyOrThrow(activeEditor$1, nextKey);\n        if (childDOM === siblingDOM) {\n          siblingDOM = getNextSibling($reconcileNode(nextKey, slot.element));\n        } else {\n          slot.withBefore(siblingDOM).insertChild(childDOM);\n          $reconcileNode(nextKey, slot.element);\n        }\n        prevIndex++;\n        nextIndex++;\n      }\n    }\n    const node = activeNextNodeMap.get(nextKey);\n    if (node !== null && $isTextNode(node)) {\n      if (subTreeTextFormat === null) {\n        subTreeTextFormat = node.getFormat();\n      }\n      if (subTreeTextStyle === '') {\n        subTreeTextStyle = node.getStyle();\n      }\n    }\n  }\n  const appendNewChildren = prevIndex > prevEndIndex;\n  const removeOldChildren = nextIndex > nextEndIndex;\n  if (appendNewChildren && !removeOldChildren) {\n    const previousNode = nextChildren[nextEndIndex + 1];\n    const insertDOM = previousNode === undefined ? null : activeEditor$1.getElementByKey(previousNode);\n    $createChildren(nextChildren, nextElement, nextIndex, nextEndIndex, slot.withBefore(insertDOM));\n  } else if (removeOldChildren && !appendNewChildren) {\n    destroyChildren(prevChildren, prevIndex, prevEndIndex, slot.element);\n  }\n}\nfunction $reconcileRoot(prevEditorState, nextEditorState, editor, dirtyType, dirtyElements, dirtyLeaves) {\n  // We cache text content to make retrieval more efficient.\n  // The cache must be rebuilt during reconciliation to account for any changes.\n  subTreeTextContent = '';\n  editorTextContent = '';\n  subTreeDirectionedTextContent = '';\n  // Rather than pass around a load of arguments through the stack recursively\n  // we instead set them as bindings within the scope of the module.\n  treatAllNodesAsDirty = dirtyType === FULL_RECONCILE;\n  activeTextDirection = null;\n  activeEditor$1 = editor;\n  activeEditorConfig = editor._config;\n  activeEditorNodes = editor._nodes;\n  activeMutationListeners = activeEditor$1._listeners.mutation;\n  activeDirtyElements = dirtyElements;\n  activeDirtyLeaves = dirtyLeaves;\n  activePrevNodeMap = prevEditorState._nodeMap;\n  activeNextNodeMap = nextEditorState._nodeMap;\n  activeEditorStateReadOnly = nextEditorState._readOnly;\n  activePrevKeyToDOMMap = new Map(editor._keyToDOMMap);\n  // We keep track of mutated nodes so we can trigger mutation\n  // listeners later in the update cycle.\n  const currentMutatedNodes = new Map();\n  mutatedNodes = currentMutatedNodes;\n  $reconcileNode('root', null);\n  // We don't want a bunch of void checks throughout the scope\n  // so instead we make it seem that these values are always set.\n  // We also want to make sure we clear them down, otherwise we\n  // can leak memory.\n  // @ts-ignore\n  activeEditor$1 = undefined;\n  // @ts-ignore\n  activeEditorNodes = undefined;\n  // @ts-ignore\n  activeDirtyElements = undefined;\n  // @ts-ignore\n  activeDirtyLeaves = undefined;\n  // @ts-ignore\n  activePrevNodeMap = undefined;\n  // @ts-ignore\n  activeNextNodeMap = undefined;\n  // @ts-ignore\n  activeEditorConfig = undefined;\n  // @ts-ignore\n  activePrevKeyToDOMMap = undefined;\n  // @ts-ignore\n  mutatedNodes = undefined;\n  return currentMutatedNodes;\n}\nfunction storeDOMWithKey(key, dom, editor) {\n  const keyToDOMMap = editor._keyToDOMMap;\n  setNodeKeyOnDOMNode(dom, editor, key);\n  keyToDOMMap.set(key, dom);\n}\nfunction getPrevElementByKeyOrThrow(key) {\n  const element = activePrevKeyToDOMMap.get(key);\n  if (element === undefined) {\n    {\n      throw Error(`Reconciliation: could not find DOM element for node key ${key}`);\n    }\n  }\n  return element;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst PASS_THROUGH_COMMAND = Object.freeze({});\nconst ANDROID_COMPOSITION_LATENCY = 30;\nconst rootElementEvents = [['keydown', onKeyDown], ['pointerdown', onPointerDown], ['compositionstart', onCompositionStart], ['compositionend', onCompositionEnd], ['input', onInput], ['click', onClick], ['cut', PASS_THROUGH_COMMAND], ['copy', PASS_THROUGH_COMMAND], ['dragstart', PASS_THROUGH_COMMAND], ['dragover', PASS_THROUGH_COMMAND], ['dragend', PASS_THROUGH_COMMAND], ['paste', PASS_THROUGH_COMMAND], ['focus', PASS_THROUGH_COMMAND], ['blur', PASS_THROUGH_COMMAND], ['drop', PASS_THROUGH_COMMAND]];\nif (CAN_USE_BEFORE_INPUT) {\n  rootElementEvents.push(['beforeinput', (event, editor) => onBeforeInput(event, editor)]);\n}\nlet lastKeyDownTimeStamp = 0;\nlet lastKeyCode = null;\nlet lastBeforeInputInsertTextTimeStamp = 0;\nlet unprocessedBeforeInputData = null;\nconst rootElementsRegistered = new WeakMap();\nlet isSelectionChangeFromDOMUpdate = false;\nlet isSelectionChangeFromMouseDown = false;\nlet isInsertLineBreak = false;\nlet isFirefoxEndingComposition = false;\nlet collapsedSelectionFormat = [0, '', 0, 'root', 0];\n\n// This function is used to determine if Lexical should attempt to override\n// the default browser behavior for insertion of text and use its own internal\n// heuristics. This is an extremely important function, and makes much of Lexical\n// work as intended between different browsers and across word, line and character\n// boundary/formats. It also is important for text replacement, node schemas and\n// composition mechanics.\n\nfunction $shouldPreventDefaultAndInsertText(selection, domTargetRange, text, timeStamp, isBeforeInput) {\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const anchorNode = anchor.getNode();\n  const editor = getActiveEditor();\n  const domSelection = getDOMSelection(editor._window);\n  const domAnchorNode = domSelection !== null ? domSelection.anchorNode : null;\n  const anchorKey = anchor.key;\n  const backingAnchorElement = editor.getElementByKey(anchorKey);\n  const textLength = text.length;\n  return anchorKey !== focus.key ||\n  // If we're working with a non-text node.\n  !$isTextNode(anchorNode) ||\n  // If we are replacing a range with a single character or grapheme, and not composing.\n  (!isBeforeInput && (!CAN_USE_BEFORE_INPUT ||\n  // We check to see if there has been\n  // a recent beforeinput event for \"textInput\". If there has been one in the last\n  // 50ms then we proceed as normal. However, if there is not, then this is likely\n  // a dangling `input` event caused by execCommand('insertText').\n  lastBeforeInputInsertTextTimeStamp < timeStamp + 50) || anchorNode.isDirty() && textLength < 2 || doesContainGrapheme(text)) && anchor.offset !== focus.offset && !anchorNode.isComposing() ||\n  // Any non standard text node.\n  $isTokenOrSegmented(anchorNode) ||\n  // If the text length is more than a single character and we're either\n  // dealing with this in \"beforeinput\" or where the node has already recently\n  // been changed (thus is dirty).\n  anchorNode.isDirty() && textLength > 1 ||\n  // If the DOM selection element is not the same as the backing node during beforeinput.\n  (isBeforeInput || !CAN_USE_BEFORE_INPUT) && backingAnchorElement !== null && !anchorNode.isComposing() && domAnchorNode !== getDOMTextNode(backingAnchorElement) ||\n  // If TargetRange is not the same as the DOM selection; browser trying to edit random parts\n  // of the editor.\n  domSelection !== null && domTargetRange !== null && (!domTargetRange.collapsed || domTargetRange.startContainer !== domSelection.anchorNode || domTargetRange.startOffset !== domSelection.anchorOffset) ||\n  // Check if we're changing from bold to italics, or some other format.\n  anchorNode.getFormat() !== selection.format || anchorNode.getStyle() !== selection.style ||\n  // One last set of heuristics to check against.\n  $shouldInsertTextAfterOrBeforeTextNode(selection, anchorNode);\n}\nfunction shouldSkipSelectionChange(domNode, offset) {\n  return domNode !== null && domNode.nodeValue !== null && domNode.nodeType === DOM_TEXT_TYPE && offset !== 0 && offset !== domNode.nodeValue.length;\n}\nfunction onSelectionChange(domSelection, editor, isActive) {\n  const {\n    anchorNode: anchorDOM,\n    anchorOffset,\n    focusNode: focusDOM,\n    focusOffset\n  } = domSelection;\n  if (isSelectionChangeFromDOMUpdate) {\n    isSelectionChangeFromDOMUpdate = false;\n\n    // If native DOM selection is on a DOM element, then\n    // we should continue as usual, as Lexical's selection\n    // may have normalized to a better child. If the DOM\n    // element is a text node, we can safely apply this\n    // optimization and skip the selection change entirely.\n    // We also need to check if the offset is at the boundary,\n    // because in this case, we might need to normalize to a\n    // sibling instead.\n    if (shouldSkipSelectionChange(anchorDOM, anchorOffset) && shouldSkipSelectionChange(focusDOM, focusOffset)) {\n      return;\n    }\n  }\n  updateEditor(editor, () => {\n    // Non-active editor don't need any extra logic for selection, it only needs update\n    // to reconcile selection (set it to null) to ensure that only one editor has non-null selection.\n    if (!isActive) {\n      $setSelection(null);\n      return;\n    }\n    if (!isSelectionWithinEditor(editor, anchorDOM, focusDOM)) {\n      return;\n    }\n    const selection = $getSelection();\n\n    // Update the selection format\n    if ($isRangeSelection(selection)) {\n      const anchor = selection.anchor;\n      const anchorNode = anchor.getNode();\n      if (selection.isCollapsed()) {\n        // Badly interpreted range selection when collapsed - #1482\n        if (domSelection.type === 'Range' && domSelection.anchorNode === domSelection.focusNode) {\n          selection.dirty = true;\n        }\n\n        // If we have marked a collapsed selection format, and we're\n        // within the given time range – then attempt to use that format\n        // instead of getting the format from the anchor node.\n        const windowEvent = getWindow(editor).event;\n        const currentTimeStamp = windowEvent ? windowEvent.timeStamp : performance.now();\n        const [lastFormat, lastStyle, lastOffset, lastKey, timeStamp] = collapsedSelectionFormat;\n        const root = $getRoot();\n        const isRootTextContentEmpty = editor.isComposing() === false && root.getTextContent() === '';\n        if (currentTimeStamp < timeStamp + 200 && anchor.offset === lastOffset && anchor.key === lastKey) {\n          selection.format = lastFormat;\n          selection.style = lastStyle;\n        } else {\n          if (anchor.type === 'text') {\n            if (!$isTextNode(anchorNode)) {\n              throw Error(`Point.getNode() must return TextNode when type is text`);\n            }\n            selection.format = anchorNode.getFormat();\n            selection.style = anchorNode.getStyle();\n          } else if (anchor.type === 'element' && !isRootTextContentEmpty) {\n            const lastNode = anchor.getNode();\n            selection.style = '';\n            if (lastNode instanceof ParagraphNode && lastNode.getChildrenSize() === 0) {\n              selection.format = lastNode.getTextFormat();\n              selection.style = lastNode.getTextStyle();\n            } else {\n              selection.format = 0;\n            }\n          }\n        }\n      } else {\n        const anchorKey = anchor.key;\n        const focus = selection.focus;\n        const focusKey = focus.key;\n        const nodes = selection.getNodes();\n        const nodesLength = nodes.length;\n        const isBackward = selection.isBackward();\n        const startOffset = isBackward ? focusOffset : anchorOffset;\n        const endOffset = isBackward ? anchorOffset : focusOffset;\n        const startKey = isBackward ? focusKey : anchorKey;\n        const endKey = isBackward ? anchorKey : focusKey;\n        let combinedFormat = IS_ALL_FORMATTING;\n        let hasTextNodes = false;\n        for (let i = 0; i < nodesLength; i++) {\n          const node = nodes[i];\n          const textContentSize = node.getTextContentSize();\n          if ($isTextNode(node) && textContentSize !== 0 &&\n          // Exclude empty text nodes at boundaries resulting from user's selection\n          !(i === 0 && node.__key === startKey && startOffset === textContentSize || i === nodesLength - 1 && node.__key === endKey && endOffset === 0)) {\n            // TODO: what about style?\n            hasTextNodes = true;\n            combinedFormat &= node.getFormat();\n            if (combinedFormat === 0) {\n              break;\n            }\n          }\n        }\n        selection.format = hasTextNodes ? combinedFormat : 0;\n      }\n    }\n    dispatchCommand(editor, SELECTION_CHANGE_COMMAND, undefined);\n  });\n}\n\n// This is a work-around is mainly Chrome specific bug where if you select\n// the contents of an empty block, you cannot easily unselect anything.\n// This results in a tiny selection box that looks buggy/broken. This can\n// also help other browsers when selection might \"appear\" lost, when it\n// really isn't.\nfunction onClick(event, editor) {\n  updateEditor(editor, () => {\n    const selection = $getSelection();\n    const domSelection = getDOMSelection(editor._window);\n    const lastSelection = $getPreviousSelection();\n    if (domSelection) {\n      if ($isRangeSelection(selection)) {\n        const anchor = selection.anchor;\n        const anchorNode = anchor.getNode();\n        if (anchor.type === 'element' && anchor.offset === 0 && selection.isCollapsed() && !$isRootNode(anchorNode) && $getRoot().getChildrenSize() === 1 && anchorNode.getTopLevelElementOrThrow().isEmpty() && lastSelection !== null && selection.is(lastSelection)) {\n          domSelection.removeAllRanges();\n          selection.dirty = true;\n        } else if (event.detail === 3 && !selection.isCollapsed()) {\n          // Triple click causing selection to overflow into the nearest element. In that\n          // case visually it looks like a single element content is selected, focus node\n          // is actually at the beginning of the next element (if present) and any manipulations\n          // with selection (formatting) are affecting second element as well\n          const focus = selection.focus;\n          const focusNode = focus.getNode();\n          if (anchorNode !== focusNode) {\n            if ($isElementNode(anchorNode)) {\n              anchorNode.select(0);\n            } else {\n              anchorNode.getParentOrThrow().select(0);\n            }\n          }\n        }\n      } else if (event.pointerType === 'touch') {\n        // This is used to update the selection on touch devices when the user clicks on text after a\n        // node selection. See isSelectionChangeFromMouseDown for the inverse\n        const domAnchorNode = domSelection.anchorNode;\n        if (domAnchorNode !== null) {\n          const nodeType = domAnchorNode.nodeType;\n          // If the user is attempting to click selection back onto text, then\n          // we should attempt create a range selection.\n          // When we click on an empty paragraph node or the end of a paragraph that ends\n          // with an image/poll, the nodeType will be ELEMENT_NODE\n          if (nodeType === DOM_ELEMENT_TYPE || nodeType === DOM_TEXT_TYPE) {\n            const newSelection = $internalCreateRangeSelection(lastSelection, domSelection, editor, event);\n            $setSelection(newSelection);\n          }\n        }\n      }\n    }\n    dispatchCommand(editor, CLICK_COMMAND, event);\n  });\n}\nfunction onPointerDown(event, editor) {\n  // TODO implement text drag & drop\n  const target = event.target;\n  const pointerType = event.pointerType;\n  if (isDOMNode(target) && pointerType !== 'touch' && event.button === 0) {\n    updateEditor(editor, () => {\n      // Drag & drop should not recompute selection until mouse up; otherwise the initially\n      // selected content is lost.\n      if (!$isSelectionCapturedInDecorator(target)) {\n        isSelectionChangeFromMouseDown = true;\n      }\n    });\n  }\n}\nfunction getTargetRange(event) {\n  if (!event.getTargetRanges) {\n    return null;\n  }\n  const targetRanges = event.getTargetRanges();\n  if (targetRanges.length === 0) {\n    return null;\n  }\n  return targetRanges[0];\n}\nfunction $canRemoveText(anchorNode, focusNode) {\n  return anchorNode !== focusNode || $isElementNode(anchorNode) || $isElementNode(focusNode) || !anchorNode.isToken() || !focusNode.isToken();\n}\nfunction isPossiblyAndroidKeyPress(timeStamp) {\n  return lastKeyCode === 'MediaLast' && timeStamp < lastKeyDownTimeStamp + ANDROID_COMPOSITION_LATENCY;\n}\nfunction onBeforeInput(event, editor) {\n  const inputType = event.inputType;\n  const targetRange = getTargetRange(event);\n\n  // We let the browser do its own thing for composition.\n  if (inputType === 'deleteCompositionText' ||\n  // If we're pasting in FF, we shouldn't get this event\n  // as the `paste` event should have triggered, unless the\n  // user has dom.event.clipboardevents.enabled disabled in\n  // about:config. In that case, we need to process the\n  // pasted content in the DOM mutation phase.\n  IS_FIREFOX && isFirefoxClipboardEvents(editor)) {\n    return;\n  } else if (inputType === 'insertCompositionText') {\n    return;\n  }\n  updateEditor(editor, () => {\n    const selection = $getSelection();\n    if (inputType === 'deleteContentBackward') {\n      if (selection === null) {\n        // Use previous selection\n        const prevSelection = $getPreviousSelection();\n        if (!$isRangeSelection(prevSelection)) {\n          return;\n        }\n        $setSelection(prevSelection.clone());\n      }\n      if ($isRangeSelection(selection)) {\n        const isSelectionAnchorSameAsFocus = selection.anchor.key === selection.focus.key;\n        if (isPossiblyAndroidKeyPress(event.timeStamp) && editor.isComposing() && isSelectionAnchorSameAsFocus) {\n          $setCompositionKey(null);\n          lastKeyDownTimeStamp = 0;\n          // Fixes an Android bug where selection flickers when backspacing\n          setTimeout(() => {\n            updateEditor(editor, () => {\n              $setCompositionKey(null);\n            });\n          }, ANDROID_COMPOSITION_LATENCY);\n          if ($isRangeSelection(selection)) {\n            const anchorNode = selection.anchor.getNode();\n            anchorNode.markDirty();\n            selection.format = anchorNode.getFormat();\n            if (!$isTextNode(anchorNode)) {\n              throw Error(`Anchor node must be a TextNode`);\n            }\n            selection.style = anchorNode.getStyle();\n          }\n        } else {\n          $setCompositionKey(null);\n          event.preventDefault();\n          // Chromium Android at the moment seems to ignore the preventDefault\n          // on 'deleteContentBackward' and still deletes the content. Which leads\n          // to multiple deletions. So we let the browser handle the deletion in this case.\n          const selectedNode = selection.anchor.getNode();\n          const selectedNodeText = selectedNode.getTextContent();\n          // When the target node has `canInsertTextAfter` set to false, the first deletion\n          // doesn't have an effect, so we need to handle it with Lexical.\n          const selectedNodeCanInsertTextAfter = selectedNode.canInsertTextAfter();\n          const hasSelectedAllTextInNode = selection.anchor.offset === 0 && selection.focus.offset === selectedNodeText.length;\n          const shouldLetBrowserHandleDelete = IS_ANDROID_CHROME && isSelectionAnchorSameAsFocus && !hasSelectedAllTextInNode && selectedNodeCanInsertTextAfter;\n          if (!shouldLetBrowserHandleDelete) {\n            dispatchCommand(editor, DELETE_CHARACTER_COMMAND, true);\n          }\n        }\n        return;\n      }\n    }\n    if (!$isRangeSelection(selection)) {\n      return;\n    }\n    const data = event.data;\n\n    // This represents the case when two beforeinput events are triggered at the same time (without a\n    // full event loop ending at input). This happens with MacOS with the default keyboard settings,\n    // a combination of autocorrection + autocapitalization.\n    // Having Lexical run everything in controlled mode would fix the issue without additional code\n    // but this would kill the massive performance win from the most common typing event.\n    // Alternatively, when this happens we can prematurely update our EditorState based on the DOM\n    // content, a job that would usually be the input event's responsibility.\n    if (unprocessedBeforeInputData !== null) {\n      $updateSelectedTextFromDOM(false, editor, unprocessedBeforeInputData);\n    }\n    if ((!selection.dirty || unprocessedBeforeInputData !== null) && selection.isCollapsed() && !$isRootNode(selection.anchor.getNode()) && targetRange !== null) {\n      selection.applyDOMRange(targetRange);\n    }\n    unprocessedBeforeInputData = null;\n    const anchor = selection.anchor;\n    const focus = selection.focus;\n    const anchorNode = anchor.getNode();\n    const focusNode = focus.getNode();\n    if (inputType === 'insertText' || inputType === 'insertTranspose') {\n      if (data === '\\n') {\n        event.preventDefault();\n        dispatchCommand(editor, INSERT_LINE_BREAK_COMMAND, false);\n      } else if (data === DOUBLE_LINE_BREAK) {\n        event.preventDefault();\n        dispatchCommand(editor, INSERT_PARAGRAPH_COMMAND, undefined);\n      } else if (data == null && event.dataTransfer) {\n        // Gets around a Safari text replacement bug.\n        const text = event.dataTransfer.getData('text/plain');\n        event.preventDefault();\n        selection.insertRawText(text);\n      } else if (data != null && $shouldPreventDefaultAndInsertText(selection, targetRange, data, event.timeStamp, true)) {\n        event.preventDefault();\n        dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, data);\n      } else {\n        unprocessedBeforeInputData = data;\n      }\n      lastBeforeInputInsertTextTimeStamp = event.timeStamp;\n      return;\n    }\n\n    // Prevent the browser from carrying out\n    // the input event, so we can control the\n    // output.\n    event.preventDefault();\n    switch (inputType) {\n      case 'insertFromYank':\n      case 'insertFromDrop':\n      case 'insertReplacementText':\n        {\n          dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, event);\n          break;\n        }\n      case 'insertFromComposition':\n        {\n          // This is the end of composition\n          $setCompositionKey(null);\n          dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, event);\n          break;\n        }\n      case 'insertLineBreak':\n        {\n          // Used for Android\n          $setCompositionKey(null);\n          dispatchCommand(editor, INSERT_LINE_BREAK_COMMAND, false);\n          break;\n        }\n      case 'insertParagraph':\n        {\n          // Used for Android\n          $setCompositionKey(null);\n\n          // Safari does not provide the type \"insertLineBreak\".\n          // So instead, we need to infer it from the keyboard event.\n          // We do not apply this logic to iOS to allow newline auto-capitalization\n          // work without creating linebreaks when pressing Enter\n          if (isInsertLineBreak && !IS_IOS) {\n            isInsertLineBreak = false;\n            dispatchCommand(editor, INSERT_LINE_BREAK_COMMAND, false);\n          } else {\n            dispatchCommand(editor, INSERT_PARAGRAPH_COMMAND, undefined);\n          }\n          break;\n        }\n      case 'insertFromPaste':\n      case 'insertFromPasteAsQuotation':\n        {\n          dispatchCommand(editor, PASTE_COMMAND, event);\n          break;\n        }\n      case 'deleteByComposition':\n        {\n          if ($canRemoveText(anchorNode, focusNode)) {\n            dispatchCommand(editor, REMOVE_TEXT_COMMAND, event);\n          }\n          break;\n        }\n      case 'deleteByDrag':\n      case 'deleteByCut':\n        {\n          dispatchCommand(editor, REMOVE_TEXT_COMMAND, event);\n          break;\n        }\n      case 'deleteContent':\n        {\n          dispatchCommand(editor, DELETE_CHARACTER_COMMAND, false);\n          break;\n        }\n      case 'deleteWordBackward':\n        {\n          dispatchCommand(editor, DELETE_WORD_COMMAND, true);\n          break;\n        }\n      case 'deleteWordForward':\n        {\n          dispatchCommand(editor, DELETE_WORD_COMMAND, false);\n          break;\n        }\n      case 'deleteHardLineBackward':\n      case 'deleteSoftLineBackward':\n        {\n          dispatchCommand(editor, DELETE_LINE_COMMAND, true);\n          break;\n        }\n      case 'deleteContentForward':\n      case 'deleteHardLineForward':\n      case 'deleteSoftLineForward':\n        {\n          dispatchCommand(editor, DELETE_LINE_COMMAND, false);\n          break;\n        }\n      case 'formatStrikeThrough':\n        {\n          dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'strikethrough');\n          break;\n        }\n      case 'formatBold':\n        {\n          dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'bold');\n          break;\n        }\n      case 'formatItalic':\n        {\n          dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'italic');\n          break;\n        }\n      case 'formatUnderline':\n        {\n          dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'underline');\n          break;\n        }\n      case 'historyUndo':\n        {\n          dispatchCommand(editor, UNDO_COMMAND, undefined);\n          break;\n        }\n      case 'historyRedo':\n        {\n          dispatchCommand(editor, REDO_COMMAND, undefined);\n          break;\n        }\n      // NO-OP\n    }\n  });\n}\nfunction onInput(event, editor) {\n  // We don't want the onInput to bubble, in the case of nested editors.\n  event.stopPropagation();\n  updateEditor(editor, () => {\n    const selection = $getSelection();\n    const data = event.data;\n    const targetRange = getTargetRange(event);\n    if (data != null && $isRangeSelection(selection) && $shouldPreventDefaultAndInsertText(selection, targetRange, data, event.timeStamp, false)) {\n      // Given we're over-riding the default behavior, we will need\n      // to ensure to disable composition before dispatching the\n      // insertText command for when changing the sequence for FF.\n      if (isFirefoxEndingComposition) {\n        $onCompositionEndImpl(editor, data);\n        isFirefoxEndingComposition = false;\n      }\n      const anchor = selection.anchor;\n      const anchorNode = anchor.getNode();\n      const domSelection = getDOMSelection(editor._window);\n      if (domSelection === null) {\n        return;\n      }\n      const isBackward = selection.isBackward();\n      const startOffset = isBackward ? selection.anchor.offset : selection.focus.offset;\n      const endOffset = isBackward ? selection.focus.offset : selection.anchor.offset;\n      // If the content is the same as inserted, then don't dispatch an insertion.\n      // Given onInput doesn't take the current selection (it uses the previous)\n      // we can compare that against what the DOM currently says.\n      if (!CAN_USE_BEFORE_INPUT || selection.isCollapsed() || !$isTextNode(anchorNode) || domSelection.anchorNode === null || anchorNode.getTextContent().slice(0, startOffset) + data + anchorNode.getTextContent().slice(startOffset + endOffset) !== getAnchorTextFromDOM(domSelection.anchorNode)) {\n        dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, data);\n      }\n      const textLength = data.length;\n\n      // Another hack for FF, as it's possible that the IME is still\n      // open, even though compositionend has already fired (sigh).\n      if (IS_FIREFOX && textLength > 1 && event.inputType === 'insertCompositionText' && !editor.isComposing()) {\n        selection.anchor.offset -= textLength;\n      }\n\n      // This ensures consistency on Android.\n      if (!IS_SAFARI && !IS_IOS && !IS_APPLE_WEBKIT && editor.isComposing()) {\n        lastKeyDownTimeStamp = 0;\n        $setCompositionKey(null);\n      }\n    } else {\n      const characterData = data !== null ? data : undefined;\n      $updateSelectedTextFromDOM(false, editor, characterData);\n\n      // onInput always fires after onCompositionEnd for FF.\n      if (isFirefoxEndingComposition) {\n        $onCompositionEndImpl(editor, data || undefined);\n        isFirefoxEndingComposition = false;\n      }\n    }\n\n    // Also flush any other mutations that might have occurred\n    // since the change.\n    $flushMutations();\n  });\n  unprocessedBeforeInputData = null;\n}\nfunction onCompositionStart(event, editor) {\n  updateEditor(editor, () => {\n    const selection = $getSelection();\n    if ($isRangeSelection(selection) && !editor.isComposing()) {\n      const anchor = selection.anchor;\n      const node = selection.anchor.getNode();\n      $setCompositionKey(anchor.key);\n      if (\n      // If it has been 30ms since the last keydown, then we should\n      // apply the empty space heuristic. We can't do this for Safari,\n      // as the keydown fires after composition start.\n      event.timeStamp < lastKeyDownTimeStamp + ANDROID_COMPOSITION_LATENCY ||\n      // FF has issues around composing multibyte characters, so we also\n      // need to invoke the empty space heuristic below.\n      anchor.type === 'element' || !selection.isCollapsed() || node.getFormat() !== selection.format || $isTextNode(node) && node.getStyle() !== selection.style) {\n        // We insert a zero width character, ready for the composition\n        // to get inserted into the new node we create. If\n        // we don't do this, Safari will fail on us because\n        // there is no text node matching the selection.\n        dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, COMPOSITION_START_CHAR);\n      }\n    }\n  });\n}\nfunction $onCompositionEndImpl(editor, data) {\n  const compositionKey = editor._compositionKey;\n  $setCompositionKey(null);\n\n  // Handle termination of composition.\n  if (compositionKey !== null && data != null) {\n    // Composition can sometimes move to an adjacent DOM node when backspacing.\n    // So check for the empty case.\n    if (data === '') {\n      const node = $getNodeByKey(compositionKey);\n      const textNode = getDOMTextNode(editor.getElementByKey(compositionKey));\n      if (textNode !== null && textNode.nodeValue !== null && $isTextNode(node)) {\n        $updateTextNodeFromDOMContent(node, textNode.nodeValue, null, null, true);\n      }\n      return;\n    }\n\n    // Composition can sometimes be that of a new line. In which case, we need to\n    // handle that accordingly.\n    if (data[data.length - 1] === '\\n') {\n      const selection = $getSelection();\n      if ($isRangeSelection(selection)) {\n        // If the last character is a line break, we also need to insert\n        // a line break.\n        const focus = selection.focus;\n        selection.anchor.set(focus.key, focus.offset, focus.type);\n        dispatchCommand(editor, KEY_ENTER_COMMAND, null);\n        return;\n      }\n    }\n  }\n  $updateSelectedTextFromDOM(true, editor, data);\n}\nfunction onCompositionEnd(event, editor) {\n  // Firefox fires onCompositionEnd before onInput, but Chrome/Webkit,\n  // fire onInput before onCompositionEnd. To ensure the sequence works\n  // like Chrome/Webkit we use the isFirefoxEndingComposition flag to\n  // defer handling of onCompositionEnd in Firefox till we have processed\n  // the logic in onInput.\n  if (IS_FIREFOX) {\n    isFirefoxEndingComposition = true;\n  } else {\n    updateEditor(editor, () => {\n      $onCompositionEndImpl(editor, event.data);\n    });\n  }\n}\nfunction onKeyDown(event, editor) {\n  lastKeyDownTimeStamp = event.timeStamp;\n  lastKeyCode = event.key;\n  if (editor.isComposing()) {\n    return;\n  }\n  const {\n    key,\n    shiftKey,\n    ctrlKey,\n    metaKey,\n    altKey\n  } = event;\n  if (dispatchCommand(editor, KEY_DOWN_COMMAND, event)) {\n    return;\n  }\n  if (key == null) {\n    return;\n  }\n  if (isMoveForward(key, ctrlKey, altKey, metaKey)) {\n    dispatchCommand(editor, KEY_ARROW_RIGHT_COMMAND, event);\n  } else if (isMoveToEnd(key, ctrlKey, shiftKey, altKey, metaKey)) {\n    dispatchCommand(editor, MOVE_TO_END, event);\n  } else if (isMoveBackward(key, ctrlKey, altKey, metaKey)) {\n    dispatchCommand(editor, KEY_ARROW_LEFT_COMMAND, event);\n  } else if (isMoveToStart(key, ctrlKey, shiftKey, altKey, metaKey)) {\n    dispatchCommand(editor, MOVE_TO_START, event);\n  } else if (isMoveUp(key, ctrlKey, metaKey)) {\n    dispatchCommand(editor, KEY_ARROW_UP_COMMAND, event);\n  } else if (isMoveDown(key, ctrlKey, metaKey)) {\n    dispatchCommand(editor, KEY_ARROW_DOWN_COMMAND, event);\n  } else if (isLineBreak(key, shiftKey)) {\n    isInsertLineBreak = true;\n    dispatchCommand(editor, KEY_ENTER_COMMAND, event);\n  } else if (isSpace(key)) {\n    dispatchCommand(editor, KEY_SPACE_COMMAND, event);\n  } else if (isOpenLineBreak(key, ctrlKey)) {\n    event.preventDefault();\n    isInsertLineBreak = true;\n    dispatchCommand(editor, INSERT_LINE_BREAK_COMMAND, true);\n  } else if (isParagraph(key, shiftKey)) {\n    isInsertLineBreak = false;\n    dispatchCommand(editor, KEY_ENTER_COMMAND, event);\n  } else if (isDeleteBackward(key, altKey, metaKey, ctrlKey)) {\n    if (isBackspace(key)) {\n      dispatchCommand(editor, KEY_BACKSPACE_COMMAND, event);\n    } else {\n      event.preventDefault();\n      dispatchCommand(editor, DELETE_CHARACTER_COMMAND, true);\n    }\n  } else if (isEscape(key)) {\n    dispatchCommand(editor, KEY_ESCAPE_COMMAND, event);\n  } else if (isDeleteForward(key, ctrlKey, shiftKey, altKey, metaKey)) {\n    if (isDelete(key)) {\n      dispatchCommand(editor, KEY_DELETE_COMMAND, event);\n    } else {\n      event.preventDefault();\n      dispatchCommand(editor, DELETE_CHARACTER_COMMAND, false);\n    }\n  } else if (isDeleteWordBackward(key, altKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, DELETE_WORD_COMMAND, true);\n  } else if (isDeleteWordForward(key, altKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, DELETE_WORD_COMMAND, false);\n  } else if (isDeleteLineBackward(key, metaKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, DELETE_LINE_COMMAND, true);\n  } else if (isDeleteLineForward(key, metaKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, DELETE_LINE_COMMAND, false);\n  } else if (isBold(key, altKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'bold');\n  } else if (isUnderline(key, altKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'underline');\n  } else if (isItalic(key, altKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'italic');\n  } else if (isTab(key, altKey, ctrlKey, metaKey)) {\n    dispatchCommand(editor, KEY_TAB_COMMAND, event);\n  } else if (isUndo(key, shiftKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, UNDO_COMMAND, undefined);\n  } else if (isRedo(key, shiftKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, REDO_COMMAND, undefined);\n  } else {\n    const prevSelection = editor._editorState._selection;\n    if (prevSelection !== null && !$isRangeSelection(prevSelection)) {\n      // Only RangeSelection can use the native cut/copy/select all\n      if (isCopy(key, shiftKey, metaKey, ctrlKey)) {\n        event.preventDefault();\n        dispatchCommand(editor, COPY_COMMAND, event);\n      } else if (isCut(key, shiftKey, metaKey, ctrlKey)) {\n        event.preventDefault();\n        dispatchCommand(editor, CUT_COMMAND, event);\n      } else if (isSelectAll(key, metaKey, ctrlKey)) {\n        event.preventDefault();\n        dispatchCommand(editor, SELECT_ALL_COMMAND, event);\n      }\n      // FF does it well (no need to override behavior)\n    } else if (!IS_FIREFOX && isSelectAll(key, metaKey, ctrlKey)) {\n      event.preventDefault();\n      dispatchCommand(editor, SELECT_ALL_COMMAND, event);\n    }\n  }\n  if (isModifier(ctrlKey, shiftKey, altKey, metaKey)) {\n    dispatchCommand(editor, KEY_MODIFIER_COMMAND, event);\n  }\n}\nfunction getRootElementRemoveHandles(rootElement) {\n  // @ts-expect-error: internal field\n  let eventHandles = rootElement.__lexicalEventHandles;\n  if (eventHandles === undefined) {\n    eventHandles = [];\n    // @ts-expect-error: internal field\n    rootElement.__lexicalEventHandles = eventHandles;\n  }\n  return eventHandles;\n}\n\n// Mapping root editors to their active nested editors, contains nested editors\n// mapping only, so if root editor is selected map will have no reference to free up memory\nconst activeNestedEditorsMap = new Map();\nfunction onDocumentSelectionChange(event) {\n  const target = event.target;\n  const targetWindow = target == null ? null : target.nodeType === 9 ? target.defaultView : target.ownerDocument.defaultView;\n  const domSelection = getDOMSelection(targetWindow);\n  if (domSelection === null) {\n    return;\n  }\n  const nextActiveEditor = getNearestEditorFromDOMNode(domSelection.anchorNode);\n  if (nextActiveEditor === null) {\n    return;\n  }\n  if (isSelectionChangeFromMouseDown) {\n    isSelectionChangeFromMouseDown = false;\n    updateEditor(nextActiveEditor, () => {\n      const lastSelection = $getPreviousSelection();\n      const domAnchorNode = domSelection.anchorNode;\n      if (domAnchorNode === null) {\n        return;\n      }\n      const nodeType = domAnchorNode.nodeType;\n      // If the user is attempting to click selection back onto text, then\n      // we should attempt create a range selection.\n      // When we click on an empty paragraph node or the end of a paragraph that ends\n      // with an image/poll, the nodeType will be ELEMENT_NODE\n      if (nodeType !== DOM_ELEMENT_TYPE && nodeType !== DOM_TEXT_TYPE) {\n        return;\n      }\n      const newSelection = $internalCreateRangeSelection(lastSelection, domSelection, nextActiveEditor, event);\n      $setSelection(newSelection);\n    });\n  }\n\n  // When editor receives selection change event, we're checking if\n  // it has any sibling editors (within same parent editor) that were active\n  // before, and trigger selection change on it to nullify selection.\n  const editors = getEditorsToPropagate(nextActiveEditor);\n  const rootEditor = editors[editors.length - 1];\n  const rootEditorKey = rootEditor._key;\n  const activeNestedEditor = activeNestedEditorsMap.get(rootEditorKey);\n  const prevActiveEditor = activeNestedEditor || rootEditor;\n  if (prevActiveEditor !== nextActiveEditor) {\n    onSelectionChange(domSelection, prevActiveEditor, false);\n  }\n  onSelectionChange(domSelection, nextActiveEditor, true);\n\n  // If newly selected editor is nested, then add it to the map, clean map otherwise\n  if (nextActiveEditor !== rootEditor) {\n    activeNestedEditorsMap.set(rootEditorKey, nextActiveEditor);\n  } else if (activeNestedEditor) {\n    activeNestedEditorsMap.delete(rootEditorKey);\n  }\n}\nfunction stopLexicalPropagation(event) {\n  // We attach a special property to ensure the same event doesn't re-fire\n  // for parent editors.\n  // @ts-ignore\n  event._lexicalHandled = true;\n}\nfunction hasStoppedLexicalPropagation(event) {\n  // @ts-ignore\n  const stopped = event._lexicalHandled === true;\n  return stopped;\n}\nfunction addRootElementEvents(rootElement, editor) {\n  // We only want to have a single global selectionchange event handler, shared\n  // between all editor instances.\n  const doc = rootElement.ownerDocument;\n  const documentRootElementsCount = rootElementsRegistered.get(doc);\n  if (documentRootElementsCount === undefined || documentRootElementsCount < 1) {\n    doc.addEventListener('selectionchange', onDocumentSelectionChange);\n  }\n  rootElementsRegistered.set(doc, (documentRootElementsCount || 0) + 1);\n\n  // @ts-expect-error: internal field\n  rootElement.__lexicalEditor = editor;\n  const removeHandles = getRootElementRemoveHandles(rootElement);\n  for (let i = 0; i < rootElementEvents.length; i++) {\n    const [eventName, onEvent] = rootElementEvents[i];\n    const eventHandler = typeof onEvent === 'function' ? event => {\n      if (hasStoppedLexicalPropagation(event)) {\n        return;\n      }\n      stopLexicalPropagation(event);\n      if (editor.isEditable() || eventName === 'click') {\n        onEvent(event, editor);\n      }\n    } : event => {\n      if (hasStoppedLexicalPropagation(event)) {\n        return;\n      }\n      stopLexicalPropagation(event);\n      const isEditable = editor.isEditable();\n      switch (eventName) {\n        case 'cut':\n          return isEditable && dispatchCommand(editor, CUT_COMMAND, event);\n        case 'copy':\n          return dispatchCommand(editor, COPY_COMMAND, event);\n        case 'paste':\n          return isEditable && dispatchCommand(editor, PASTE_COMMAND, event);\n        case 'dragstart':\n          return isEditable && dispatchCommand(editor, DRAGSTART_COMMAND, event);\n        case 'dragover':\n          return isEditable && dispatchCommand(editor, DRAGOVER_COMMAND, event);\n        case 'dragend':\n          return isEditable && dispatchCommand(editor, DRAGEND_COMMAND, event);\n        case 'focus':\n          return isEditable && dispatchCommand(editor, FOCUS_COMMAND, event);\n        case 'blur':\n          {\n            return isEditable && dispatchCommand(editor, BLUR_COMMAND, event);\n          }\n        case 'drop':\n          return isEditable && dispatchCommand(editor, DROP_COMMAND, event);\n      }\n    };\n    rootElement.addEventListener(eventName, eventHandler);\n    removeHandles.push(() => {\n      rootElement.removeEventListener(eventName, eventHandler);\n    });\n  }\n}\nfunction removeRootElementEvents(rootElement) {\n  const doc = rootElement.ownerDocument;\n  const documentRootElementsCount = rootElementsRegistered.get(doc);\n  if (!(documentRootElementsCount !== undefined)) {\n    throw Error(`Root element not registered`);\n  } // We only want to have a single global selectionchange event handler, shared\n  // between all editor instances.\n  const newCount = documentRootElementsCount - 1;\n  if (!(newCount >= 0)) {\n    throw Error(`Root element count less than 0`);\n  }\n  rootElementsRegistered.set(doc, newCount);\n  if (newCount === 0) {\n    doc.removeEventListener('selectionchange', onDocumentSelectionChange);\n  }\n  const editor = getEditorPropertyFromDOMNode(rootElement);\n  if (isLexicalEditor(editor)) {\n    cleanActiveNestedEditorsMap(editor);\n    // @ts-expect-error: internal field\n    rootElement.__lexicalEditor = null;\n  } else if (editor) {\n    {\n      throw Error(`Attempted to remove event handlers from a node that does not belong to this build of Lexical`);\n    }\n  }\n  const removeHandles = getRootElementRemoveHandles(rootElement);\n  for (let i = 0; i < removeHandles.length; i++) {\n    removeHandles[i]();\n  }\n\n  // @ts-expect-error: internal field\n  rootElement.__lexicalEventHandles = [];\n}\nfunction cleanActiveNestedEditorsMap(editor) {\n  if (editor._parentEditor !== null) {\n    // For nested editor cleanup map if this editor was marked as active\n    const editors = getEditorsToPropagate(editor);\n    const rootEditor = editors[editors.length - 1];\n    const rootEditorKey = rootEditor._key;\n    if (activeNestedEditorsMap.get(rootEditorKey) === editor) {\n      activeNestedEditorsMap.delete(rootEditorKey);\n    }\n  } else {\n    // For top-level editors cleanup map\n    activeNestedEditorsMap.delete(editor._key);\n  }\n}\nfunction markSelectionChangeFromDOMUpdate() {\n  isSelectionChangeFromDOMUpdate = true;\n}\nfunction markCollapsedSelectionFormat(format, style, offset, key, timeStamp) {\n  collapsedSelectionFormat = [format, style, offset, key, timeStamp];\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n/** @internal */\n\nfunction $removeNode(nodeToRemove, restoreSelection, preserveEmptyParent) {\n  errorOnReadOnly();\n  const key = nodeToRemove.__key;\n  const parent = nodeToRemove.getParent();\n  if (parent === null) {\n    return;\n  }\n  const selection = $maybeMoveChildrenSelectionToParent(nodeToRemove);\n  let selectionMoved = false;\n  if ($isRangeSelection(selection) && restoreSelection) {\n    const anchor = selection.anchor;\n    const focus = selection.focus;\n    if (anchor.key === key) {\n      moveSelectionPointToSibling(anchor, nodeToRemove, parent, nodeToRemove.getPreviousSibling(), nodeToRemove.getNextSibling());\n      selectionMoved = true;\n    }\n    if (focus.key === key) {\n      moveSelectionPointToSibling(focus, nodeToRemove, parent, nodeToRemove.getPreviousSibling(), nodeToRemove.getNextSibling());\n      selectionMoved = true;\n    }\n  } else if ($isNodeSelection(selection) && restoreSelection && nodeToRemove.isSelected()) {\n    nodeToRemove.selectPrevious();\n  }\n  if ($isRangeSelection(selection) && restoreSelection && !selectionMoved) {\n    // Doing this is O(n) so lets avoid it unless we need to do it\n    const index = nodeToRemove.getIndexWithinParent();\n    removeFromParent(nodeToRemove);\n    $updateElementSelectionOnCreateDeleteNode(selection, parent, index, -1);\n  } else {\n    removeFromParent(nodeToRemove);\n  }\n  if (!preserveEmptyParent && !$isRootOrShadowRoot(parent) && !parent.canBeEmpty() && parent.isEmpty()) {\n    $removeNode(parent, restoreSelection);\n  }\n  if (restoreSelection && $isRootNode(parent) && parent.isEmpty()) {\n    parent.selectEnd();\n  }\n}\nclass LexicalNode {\n  // Allow us to look up the type including static props\n\n  /** @internal */\n\n  /** @internal */\n  //@ts-ignore We set the key in the constructor.\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  // Flow doesn't support abstract classes unfortunately, so we can't _force_\n  // subclasses of Node to implement statics. All subclasses of Node should have\n  // a static getType and clone method though. We define getType and clone here so we can call it\n  // on any  Node, and we throw this error by default since the subclass should provide\n  // their own implementation.\n  /**\n   * Returns the string type of this node. Every node must\n   * implement this and it MUST BE UNIQUE amongst nodes registered\n   * on the editor.\n   *\n   */\n  static getType() {\n    {\n      throw Error(`LexicalNode: Node ${this.name} does not implement .getType().`);\n    }\n  }\n\n  /**\n   * Clones this node, creating a new node with a different key\n   * and adding it to the EditorState (but not attaching it anywhere!). All nodes must\n   * implement this method.\n   *\n   */\n  static clone(_data) {\n    {\n      throw Error(`LexicalNode: Node ${this.name} does not implement .clone().`);\n    }\n  }\n\n  /**\n   * Perform any state updates on the clone of prevNode that are not already\n   * handled by the constructor call in the static clone method. If you have\n   * state to update in your clone that is not handled directly by the\n   * constructor, it is advisable to override this method but it is required\n   * to include a call to `super.afterCloneFrom(prevNode)` in your\n   * implementation. This is only intended to be called by\n   * {@link $cloneWithProperties} function or via a super call.\n   *\n   * @example\n   * ```ts\n   * class ClassesTextNode extends TextNode {\n   *   // Not shown: static getType, static importJSON, exportJSON, createDOM, updateDOM\n   *   __classes = new Set<string>();\n   *   static clone(node: ClassesTextNode): ClassesTextNode {\n   *     // The inherited TextNode constructor is used here, so\n   *     // classes is not set by this method.\n   *     return new ClassesTextNode(node.__text, node.__key);\n   *   }\n   *   afterCloneFrom(node: this): void {\n   *     // This calls TextNode.afterCloneFrom and LexicalNode.afterCloneFrom\n   *     // for necessary state updates\n   *     super.afterCloneFrom(node);\n   *     this.__addClasses(node.__classes);\n   *   }\n   *   // This method is a private implementation detail, it is not\n   *   // suitable for the public API because it does not call getWritable\n   *   __addClasses(classNames: Iterable<string>): this {\n   *     for (const className of classNames) {\n   *       this.__classes.add(className);\n   *     }\n   *     return this;\n   *   }\n   *   addClass(...classNames: string[]): this {\n   *     return this.getWritable().__addClasses(classNames);\n   *   }\n   *   removeClass(...classNames: string[]): this {\n   *     const node = this.getWritable();\n   *     for (const className of classNames) {\n   *       this.__classes.delete(className);\n   *     }\n   *     return this;\n   *   }\n   *   getClasses(): Set<string> {\n   *     return this.getLatest().__classes;\n   *   }\n   * }\n   * ```\n   *\n   */\n  afterCloneFrom(prevNode) {\n    this.__parent = prevNode.__parent;\n    this.__next = prevNode.__next;\n    this.__prev = prevNode.__prev;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  constructor(key) {\n    this.__type = this.constructor.getType();\n    this.__parent = null;\n    this.__prev = null;\n    this.__next = null;\n    $setNodeKey(this, key);\n    {\n      if (this.__type !== 'root') {\n        errorOnReadOnly();\n        errorOnTypeKlassMismatch(this.__type, this.constructor);\n      }\n    }\n  }\n  // Getters and Traversers\n\n  /**\n   * Returns the string type of this node.\n   */\n  getType() {\n    return this.__type;\n  }\n  isInline() {\n    {\n      throw Error(`LexicalNode: Node ${this.constructor.name} does not implement .isInline().`);\n    }\n  }\n\n  /**\n   * Returns true if there is a path between this node and the RootNode, false otherwise.\n   * This is a way of determining if the node is \"attached\" EditorState. Unattached nodes\n   * won't be reconciled and will ultimatelt be cleaned up by the Lexical GC.\n   */\n  isAttached() {\n    let nodeKey = this.__key;\n    while (nodeKey !== null) {\n      if (nodeKey === 'root') {\n        return true;\n      }\n      const node = $getNodeByKey(nodeKey);\n      if (node === null) {\n        break;\n      }\n      nodeKey = node.__parent;\n    }\n    return false;\n  }\n\n  /**\n   * Returns true if this node is contained within the provided Selection., false otherwise.\n   * Relies on the algorithms implemented in {@link BaseSelection.getNodes} to determine\n   * what's included.\n   *\n   * @param selection - The selection that we want to determine if the node is in.\n   */\n  isSelected(selection) {\n    const targetSelection = selection || $getSelection();\n    if (targetSelection == null) {\n      return false;\n    }\n    const isSelected = targetSelection.getNodes().some(n => n.__key === this.__key);\n    if ($isTextNode(this)) {\n      return isSelected;\n    }\n    // For inline images inside of element nodes.\n    // Without this change the image will be selected if the cursor is before or after it.\n    const isElementRangeSelection = $isRangeSelection(targetSelection) && targetSelection.anchor.type === 'element' && targetSelection.focus.type === 'element';\n    if (isElementRangeSelection) {\n      if (targetSelection.isCollapsed()) {\n        return false;\n      }\n      const parentNode = this.getParent();\n      if ($isDecoratorNode(this) && this.isInline() && parentNode) {\n        const firstPoint = targetSelection.isBackward() ? targetSelection.focus : targetSelection.anchor;\n        const firstElement = firstPoint.getNode();\n        if (firstPoint.offset === firstElement.getChildrenSize() && firstElement.is(parentNode) && firstElement.getLastChildOrThrow().is(this)) {\n          return false;\n        }\n      }\n    }\n    return isSelected;\n  }\n\n  /**\n   * Returns this nodes key.\n   */\n  getKey() {\n    // Key is stable between copies\n    return this.__key;\n  }\n\n  /**\n   * Returns the zero-based index of this node within the parent.\n   */\n  getIndexWithinParent() {\n    const parent = this.getParent();\n    if (parent === null) {\n      return -1;\n    }\n    let node = parent.getFirstChild();\n    let index = 0;\n    while (node !== null) {\n      if (this.is(node)) {\n        return index;\n      }\n      index++;\n      node = node.getNextSibling();\n    }\n    return -1;\n  }\n\n  /**\n   * Returns the parent of this node, or null if none is found.\n   */\n  getParent() {\n    const parent = this.getLatest().__parent;\n    if (parent === null) {\n      return null;\n    }\n    return $getNodeByKey(parent);\n  }\n\n  /**\n   * Returns the parent of this node, or throws if none is found.\n   */\n  getParentOrThrow() {\n    const parent = this.getParent();\n    if (parent === null) {\n      {\n        throw Error(`Expected node ${this.__key} to have a parent.`);\n      }\n    }\n    return parent;\n  }\n\n  /**\n   * Returns the highest (in the EditorState tree)\n   * non-root ancestor of this node, or null if none is found. See {@link lexical!$isRootOrShadowRoot}\n   * for more information on which Elements comprise \"roots\".\n   */\n  getTopLevelElement() {\n    let node = this;\n    while (node !== null) {\n      const parent = node.getParent();\n      if ($isRootOrShadowRoot(parent)) {\n        if (!($isElementNode(node) || node === this && $isDecoratorNode(node))) {\n          throw Error(`Children of root nodes must be elements or decorators`);\n        }\n        return node;\n      }\n      node = parent;\n    }\n    return null;\n  }\n\n  /**\n   * Returns the highest (in the EditorState tree)\n   * non-root ancestor of this node, or throws if none is found. See {@link lexical!$isRootOrShadowRoot}\n   * for more information on which Elements comprise \"roots\".\n   */\n  getTopLevelElementOrThrow() {\n    const parent = this.getTopLevelElement();\n    if (parent === null) {\n      {\n        throw Error(`Expected node ${this.__key} to have a top parent element.`);\n      }\n    }\n    return parent;\n  }\n\n  /**\n   * Returns a list of the every ancestor of this node,\n   * all the way up to the RootNode.\n   *\n   */\n  getParents() {\n    const parents = [];\n    let node = this.getParent();\n    while (node !== null) {\n      parents.push(node);\n      node = node.getParent();\n    }\n    return parents;\n  }\n\n  /**\n   * Returns a list of the keys of every ancestor of this node,\n   * all the way up to the RootNode.\n   *\n   */\n  getParentKeys() {\n    const parents = [];\n    let node = this.getParent();\n    while (node !== null) {\n      parents.push(node.__key);\n      node = node.getParent();\n    }\n    return parents;\n  }\n\n  /**\n   * Returns the \"previous\" siblings - that is, the node that comes\n   * before this one in the same parent.\n   *\n   */\n  getPreviousSibling() {\n    const self = this.getLatest();\n    const prevKey = self.__prev;\n    return prevKey === null ? null : $getNodeByKey(prevKey);\n  }\n\n  /**\n   * Returns the \"previous\" siblings - that is, the nodes that come between\n   * this one and the first child of it's parent, inclusive.\n   *\n   */\n  getPreviousSiblings() {\n    const siblings = [];\n    const parent = this.getParent();\n    if (parent === null) {\n      return siblings;\n    }\n    let node = parent.getFirstChild();\n    while (node !== null) {\n      if (node.is(this)) {\n        break;\n      }\n      siblings.push(node);\n      node = node.getNextSibling();\n    }\n    return siblings;\n  }\n\n  /**\n   * Returns the \"next\" siblings - that is, the node that comes\n   * after this one in the same parent\n   *\n   */\n  getNextSibling() {\n    const self = this.getLatest();\n    const nextKey = self.__next;\n    return nextKey === null ? null : $getNodeByKey(nextKey);\n  }\n\n  /**\n   * Returns all \"next\" siblings - that is, the nodes that come between this\n   * one and the last child of it's parent, inclusive.\n   *\n   */\n  getNextSiblings() {\n    const siblings = [];\n    let node = this.getNextSibling();\n    while (node !== null) {\n      siblings.push(node);\n      node = node.getNextSibling();\n    }\n    return siblings;\n  }\n\n  /**\n   * Returns the closest common ancestor of this node and the provided one or null\n   * if one cannot be found.\n   *\n   * @param node - the other node to find the common ancestor of.\n   */\n  getCommonAncestor(node) {\n    const a = this.getParents();\n    const b = node.getParents();\n    if ($isElementNode(this)) {\n      a.unshift(this);\n    }\n    if ($isElementNode(node)) {\n      b.unshift(node);\n    }\n    const aLength = a.length;\n    const bLength = b.length;\n    if (aLength === 0 || bLength === 0 || a[aLength - 1] !== b[bLength - 1]) {\n      return null;\n    }\n    const bSet = new Set(b);\n    for (let i = 0; i < aLength; i++) {\n      const ancestor = a[i];\n      if (bSet.has(ancestor)) {\n        return ancestor;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns true if the provided node is the exact same one as this node, from Lexical's perspective.\n   * Always use this instead of referential equality.\n   *\n   * @param object - the node to perform the equality comparison on.\n   */\n  is(object) {\n    if (object == null) {\n      return false;\n    }\n    return this.__key === object.__key;\n  }\n\n  /**\n   * Returns true if this node logical precedes the target node in the editor state.\n   *\n   * @param targetNode - the node we're testing to see if it's after this one.\n   */\n  isBefore(targetNode) {\n    if (this === targetNode) {\n      return false;\n    }\n    if (targetNode.isParentOf(this)) {\n      return true;\n    }\n    if (this.isParentOf(targetNode)) {\n      return false;\n    }\n    const commonAncestor = this.getCommonAncestor(targetNode);\n    let indexA = 0;\n    let indexB = 0;\n    let node = this;\n    while (true) {\n      const parent = node.getParentOrThrow();\n      if (parent === commonAncestor) {\n        indexA = node.getIndexWithinParent();\n        break;\n      }\n      node = parent;\n    }\n    node = targetNode;\n    while (true) {\n      const parent = node.getParentOrThrow();\n      if (parent === commonAncestor) {\n        indexB = node.getIndexWithinParent();\n        break;\n      }\n      node = parent;\n    }\n    return indexA < indexB;\n  }\n\n  /**\n   * Returns true if this node is the parent of the target node, false otherwise.\n   *\n   * @param targetNode - the would-be child node.\n   */\n  isParentOf(targetNode) {\n    const key = this.__key;\n    if (key === targetNode.__key) {\n      return false;\n    }\n    let node = targetNode;\n    while (node !== null) {\n      if (node.__key === key) {\n        return true;\n      }\n      node = node.getParent();\n    }\n    return false;\n  }\n\n  // TO-DO: this function can be simplified a lot\n  /**\n   * Returns a list of nodes that are between this node and\n   * the target node in the EditorState.\n   *\n   * @param targetNode - the node that marks the other end of the range of nodes to be returned.\n   */\n  getNodesBetween(targetNode) {\n    const isBefore = this.isBefore(targetNode);\n    const nodes = [];\n    const visited = new Set();\n    let node = this;\n    while (true) {\n      if (node === null) {\n        break;\n      }\n      const key = node.__key;\n      if (!visited.has(key)) {\n        visited.add(key);\n        nodes.push(node);\n      }\n      if (node === targetNode) {\n        break;\n      }\n      const child = $isElementNode(node) ? isBefore ? node.getFirstChild() : node.getLastChild() : null;\n      if (child !== null) {\n        node = child;\n        continue;\n      }\n      const nextSibling = isBefore ? node.getNextSibling() : node.getPreviousSibling();\n      if (nextSibling !== null) {\n        node = nextSibling;\n        continue;\n      }\n      const parent = node.getParentOrThrow();\n      if (!visited.has(parent.__key)) {\n        nodes.push(parent);\n      }\n      if (parent === targetNode) {\n        break;\n      }\n      let parentSibling = null;\n      let ancestor = parent;\n      do {\n        if (ancestor === null) {\n          {\n            throw Error(`getNodesBetween: ancestor is null`);\n          }\n        }\n        parentSibling = isBefore ? ancestor.getNextSibling() : ancestor.getPreviousSibling();\n        ancestor = ancestor.getParent();\n        if (ancestor !== null) {\n          if (parentSibling === null && !visited.has(ancestor.__key)) {\n            nodes.push(ancestor);\n          }\n        } else {\n          break;\n        }\n      } while (parentSibling === null);\n      node = parentSibling;\n    }\n    if (!isBefore) {\n      nodes.reverse();\n    }\n    return nodes;\n  }\n\n  /**\n   * Returns true if this node has been marked dirty during this update cycle.\n   *\n   */\n  isDirty() {\n    const editor = getActiveEditor();\n    const dirtyLeaves = editor._dirtyLeaves;\n    return dirtyLeaves !== null && dirtyLeaves.has(this.__key);\n  }\n\n  /**\n   * Returns the latest version of the node from the active EditorState.\n   * This is used to avoid getting values from stale node references.\n   *\n   */\n  getLatest() {\n    const latest = $getNodeByKey(this.__key);\n    if (latest === null) {\n      {\n        throw Error(`Lexical node does not exist in active editor state. Avoid using the same node references between nested closures from editorState.read/editor.update.`);\n      }\n    }\n    return latest;\n  }\n\n  /**\n   * Returns a mutable version of the node using {@link $cloneWithProperties}\n   * if necessary. Will throw an error if called outside of a Lexical Editor\n   * {@link LexicalEditor.update} callback.\n   *\n   */\n  getWritable() {\n    errorOnReadOnly();\n    const editorState = getActiveEditorState();\n    const editor = getActiveEditor();\n    const nodeMap = editorState._nodeMap;\n    const key = this.__key;\n    // Ensure we get the latest node from pending state\n    const latestNode = this.getLatest();\n    const cloneNotNeeded = editor._cloneNotNeeded;\n    const selection = $getSelection();\n    if (selection !== null) {\n      selection.setCachedNodes(null);\n    }\n    if (cloneNotNeeded.has(key)) {\n      // Transforms clear the dirty node set on each iteration to keep track on newly dirty nodes\n      internalMarkNodeAsDirty(latestNode);\n      return latestNode;\n    }\n    const mutableNode = $cloneWithProperties(latestNode);\n    cloneNotNeeded.add(key);\n    internalMarkNodeAsDirty(mutableNode);\n    // Update reference in node map\n    nodeMap.set(key, mutableNode);\n    return mutableNode;\n  }\n\n  /**\n   * Returns the text content of the node. Override this for\n   * custom nodes that should have a representation in plain text\n   * format (for copy + paste, for example)\n   *\n   */\n  getTextContent() {\n    return '';\n  }\n\n  /**\n   * Returns the length of the string produced by calling getTextContent on this node.\n   *\n   */\n  getTextContentSize() {\n    return this.getTextContent().length;\n  }\n\n  // View\n\n  /**\n   * Called during the reconciliation process to determine which nodes\n   * to insert into the DOM for this Lexical Node.\n   *\n   * This method must return exactly one HTMLElement. Nested elements are not supported.\n   *\n   * Do not attempt to update the Lexical EditorState during this phase of the update lifecyle.\n   *\n   * @param _config - allows access to things like the EditorTheme (to apply classes) during reconciliation.\n   * @param _editor - allows access to the editor for context during reconciliation.\n   *\n   * */\n  createDOM(_config, _editor) {\n    {\n      throw Error(`createDOM: base method not extended`);\n    }\n  }\n\n  /**\n   * Called when a node changes and should update the DOM\n   * in whatever way is necessary to make it align with any changes that might\n   * have happened during the update.\n   *\n   * Returning \"true\" here will cause lexical to unmount and recreate the DOM node\n   * (by calling createDOM). You would need to do this if the element tag changes,\n   * for instance.\n   *\n   * */\n  updateDOM(_prevNode, _dom, _config) {\n    {\n      throw Error(`updateDOM: base method not extended`);\n    }\n  }\n\n  /**\n   * Controls how the this node is serialized to HTML. This is important for\n   * copy and paste between Lexical and non-Lexical editors, or Lexical editors with different namespaces,\n   * in which case the primary transfer format is HTML. It's also important if you're serializing\n   * to HTML for any other reason via {@link @lexical/html!$generateHtmlFromNodes}. You could\n   * also use this method to build your own HTML renderer.\n   *\n   * */\n  exportDOM(editor) {\n    const element = this.createDOM(editor._config, editor);\n    return {\n      element\n    };\n  }\n\n  /**\n   * Controls how the this node is serialized to JSON. This is important for\n   * copy and paste between Lexical editors sharing the same namespace. It's also important\n   * if you're serializing to JSON for persistent storage somewhere.\n   * See [Serialization & Deserialization](https://lexical.dev/docs/concepts/serialization#lexical---html).\n   *\n   * */\n  exportJSON() {\n    return {\n      type: this.__type,\n      version: 1\n    };\n  }\n\n  /**\n   * Controls how the this node is deserialized from JSON. This is usually boilerplate,\n   * but provides an abstraction between the node implementation and serialized interface that can\n   * be important if you ever make breaking changes to a node schema (by adding or removing properties).\n   * See [Serialization & Deserialization](https://lexical.dev/docs/concepts/serialization#lexical---html).\n   *\n   * */\n  static importJSON(_serializedNode) {\n    {\n      throw Error(`LexicalNode: Node ${this.name} does not implement .importJSON().`);\n    }\n  }\n  /**\n   * @experimental\n   *\n   * Registers the returned function as a transform on the node during\n   * Editor initialization. Most such use cases should be addressed via\n   * the {@link LexicalEditor.registerNodeTransform} API.\n   *\n   * Experimental - use at your own risk.\n   */\n  static transform() {\n    return null;\n  }\n\n  // Setters and mutators\n\n  /**\n   * Removes this LexicalNode from the EditorState. If the node isn't re-inserted\n   * somewhere, the Lexical garbage collector will eventually clean it up.\n   *\n   * @param preserveEmptyParent - If falsy, the node's parent will be removed if\n   * it's empty after the removal operation. This is the default behavior, subject to\n   * other node heuristics such as {@link ElementNode#canBeEmpty}\n   * */\n  remove(preserveEmptyParent) {\n    $removeNode(this, true, preserveEmptyParent);\n  }\n\n  /**\n   * Replaces this LexicalNode with the provided node, optionally transferring the children\n   * of the replaced node to the replacing node.\n   *\n   * @param replaceWith - The node to replace this one with.\n   * @param includeChildren - Whether or not to transfer the children of this node to the replacing node.\n   * */\n  replace(replaceWith, includeChildren) {\n    errorOnReadOnly();\n    let selection = $getSelection();\n    if (selection !== null) {\n      selection = selection.clone();\n    }\n    errorOnInsertTextNodeOnRoot(this, replaceWith);\n    const self = this.getLatest();\n    const toReplaceKey = this.__key;\n    const key = replaceWith.__key;\n    const writableReplaceWith = replaceWith.getWritable();\n    const writableParent = this.getParentOrThrow().getWritable();\n    const size = writableParent.__size;\n    removeFromParent(writableReplaceWith);\n    const prevSibling = self.getPreviousSibling();\n    const nextSibling = self.getNextSibling();\n    const prevKey = self.__prev;\n    const nextKey = self.__next;\n    const parentKey = self.__parent;\n    $removeNode(self, false, true);\n    if (prevSibling === null) {\n      writableParent.__first = key;\n    } else {\n      const writablePrevSibling = prevSibling.getWritable();\n      writablePrevSibling.__next = key;\n    }\n    writableReplaceWith.__prev = prevKey;\n    if (nextSibling === null) {\n      writableParent.__last = key;\n    } else {\n      const writableNextSibling = nextSibling.getWritable();\n      writableNextSibling.__prev = key;\n    }\n    writableReplaceWith.__next = nextKey;\n    writableReplaceWith.__parent = parentKey;\n    writableParent.__size = size;\n    if (includeChildren) {\n      if (!($isElementNode(this) && $isElementNode(writableReplaceWith))) {\n        throw Error(`includeChildren should only be true for ElementNodes`);\n      }\n      this.getChildren().forEach(child => {\n        writableReplaceWith.append(child);\n      });\n    }\n    if ($isRangeSelection(selection)) {\n      $setSelection(selection);\n      const anchor = selection.anchor;\n      const focus = selection.focus;\n      if (anchor.key === toReplaceKey) {\n        $moveSelectionPointToEnd(anchor, writableReplaceWith);\n      }\n      if (focus.key === toReplaceKey) {\n        $moveSelectionPointToEnd(focus, writableReplaceWith);\n      }\n    }\n    if ($getCompositionKey() === toReplaceKey) {\n      $setCompositionKey(key);\n    }\n    return writableReplaceWith;\n  }\n\n  /**\n   * Inserts a node after this LexicalNode (as the next sibling).\n   *\n   * @param nodeToInsert - The node to insert after this one.\n   * @param restoreSelection - Whether or not to attempt to resolve the\n   * selection to the appropriate place after the operation is complete.\n   * */\n  insertAfter(nodeToInsert, restoreSelection = true) {\n    errorOnReadOnly();\n    errorOnInsertTextNodeOnRoot(this, nodeToInsert);\n    const writableSelf = this.getWritable();\n    const writableNodeToInsert = nodeToInsert.getWritable();\n    const oldParent = writableNodeToInsert.getParent();\n    const selection = $getSelection();\n    let elementAnchorSelectionOnNode = false;\n    let elementFocusSelectionOnNode = false;\n    if (oldParent !== null) {\n      // TODO: this is O(n), can we improve?\n      const oldIndex = nodeToInsert.getIndexWithinParent();\n      removeFromParent(writableNodeToInsert);\n      if ($isRangeSelection(selection)) {\n        const oldParentKey = oldParent.__key;\n        const anchor = selection.anchor;\n        const focus = selection.focus;\n        elementAnchorSelectionOnNode = anchor.type === 'element' && anchor.key === oldParentKey && anchor.offset === oldIndex + 1;\n        elementFocusSelectionOnNode = focus.type === 'element' && focus.key === oldParentKey && focus.offset === oldIndex + 1;\n      }\n    }\n    const nextSibling = this.getNextSibling();\n    const writableParent = this.getParentOrThrow().getWritable();\n    const insertKey = writableNodeToInsert.__key;\n    const nextKey = writableSelf.__next;\n    if (nextSibling === null) {\n      writableParent.__last = insertKey;\n    } else {\n      const writableNextSibling = nextSibling.getWritable();\n      writableNextSibling.__prev = insertKey;\n    }\n    writableParent.__size++;\n    writableSelf.__next = insertKey;\n    writableNodeToInsert.__next = nextKey;\n    writableNodeToInsert.__prev = writableSelf.__key;\n    writableNodeToInsert.__parent = writableSelf.__parent;\n    if (restoreSelection && $isRangeSelection(selection)) {\n      const index = this.getIndexWithinParent();\n      $updateElementSelectionOnCreateDeleteNode(selection, writableParent, index + 1);\n      const writableParentKey = writableParent.__key;\n      if (elementAnchorSelectionOnNode) {\n        selection.anchor.set(writableParentKey, index + 2, 'element');\n      }\n      if (elementFocusSelectionOnNode) {\n        selection.focus.set(writableParentKey, index + 2, 'element');\n      }\n    }\n    return nodeToInsert;\n  }\n\n  /**\n   * Inserts a node before this LexicalNode (as the previous sibling).\n   *\n   * @param nodeToInsert - The node to insert before this one.\n   * @param restoreSelection - Whether or not to attempt to resolve the\n   * selection to the appropriate place after the operation is complete.\n   * */\n  insertBefore(nodeToInsert, restoreSelection = true) {\n    errorOnReadOnly();\n    errorOnInsertTextNodeOnRoot(this, nodeToInsert);\n    const writableSelf = this.getWritable();\n    const writableNodeToInsert = nodeToInsert.getWritable();\n    const insertKey = writableNodeToInsert.__key;\n    removeFromParent(writableNodeToInsert);\n    const prevSibling = this.getPreviousSibling();\n    const writableParent = this.getParentOrThrow().getWritable();\n    const prevKey = writableSelf.__prev;\n    // TODO: this is O(n), can we improve?\n    const index = this.getIndexWithinParent();\n    if (prevSibling === null) {\n      writableParent.__first = insertKey;\n    } else {\n      const writablePrevSibling = prevSibling.getWritable();\n      writablePrevSibling.__next = insertKey;\n    }\n    writableParent.__size++;\n    writableSelf.__prev = insertKey;\n    writableNodeToInsert.__prev = prevKey;\n    writableNodeToInsert.__next = writableSelf.__key;\n    writableNodeToInsert.__parent = writableSelf.__parent;\n    const selection = $getSelection();\n    if (restoreSelection && $isRangeSelection(selection)) {\n      const parent = this.getParentOrThrow();\n      $updateElementSelectionOnCreateDeleteNode(selection, parent, index);\n    }\n    return nodeToInsert;\n  }\n\n  /**\n   * Whether or not this node has a required parent. Used during copy + paste operations\n   * to normalize nodes that would otherwise be orphaned. For example, ListItemNodes without\n   * a ListNode parent or TextNodes with a ParagraphNode parent.\n   *\n   * */\n  isParentRequired() {\n    return false;\n  }\n\n  /**\n   * The creation logic for any required parent. Should be implemented if {@link isParentRequired} returns true.\n   *\n   * */\n  createParentElementNode() {\n    return $createParagraphNode();\n  }\n  selectStart() {\n    return this.selectPrevious();\n  }\n  selectEnd() {\n    return this.selectNext(0, 0);\n  }\n\n  /**\n   * Moves selection to the previous sibling of this node, at the specified offsets.\n   *\n   * @param anchorOffset - The anchor offset for selection.\n   * @param focusOffset -  The focus offset for selection\n   * */\n  selectPrevious(anchorOffset, focusOffset) {\n    errorOnReadOnly();\n    const prevSibling = this.getPreviousSibling();\n    const parent = this.getParentOrThrow();\n    if (prevSibling === null) {\n      return parent.select(0, 0);\n    }\n    if ($isElementNode(prevSibling)) {\n      return prevSibling.select();\n    } else if (!$isTextNode(prevSibling)) {\n      const index = prevSibling.getIndexWithinParent() + 1;\n      return parent.select(index, index);\n    }\n    return prevSibling.select(anchorOffset, focusOffset);\n  }\n\n  /**\n   * Moves selection to the next sibling of this node, at the specified offsets.\n   *\n   * @param anchorOffset - The anchor offset for selection.\n   * @param focusOffset -  The focus offset for selection\n   * */\n  selectNext(anchorOffset, focusOffset) {\n    errorOnReadOnly();\n    const nextSibling = this.getNextSibling();\n    const parent = this.getParentOrThrow();\n    if (nextSibling === null) {\n      return parent.select();\n    }\n    if ($isElementNode(nextSibling)) {\n      return nextSibling.select(0, 0);\n    } else if (!$isTextNode(nextSibling)) {\n      const index = nextSibling.getIndexWithinParent();\n      return parent.select(index, index);\n    }\n    return nextSibling.select(anchorOffset, focusOffset);\n  }\n\n  /**\n   * Marks a node dirty, triggering transforms and\n   * forcing it to be reconciled during the update cycle.\n   *\n   * */\n  markDirty() {\n    this.getWritable();\n  }\n\n  /**\n   * @internal\n   *\n   * When the reconciler detects that a node was mutated, this method\n   * may be called to restore the node to a known good state.\n   */\n  reconcileObservedMutation(dom, editor) {\n    this.markDirty();\n  }\n}\nfunction errorOnTypeKlassMismatch(type, klass) {\n  const registeredNode = getActiveEditor()._nodes.get(type);\n  // Common error - split in its own invariant\n  if (registeredNode === undefined) {\n    {\n      throw Error(`Create node: Attempted to create node ${klass.name} that was not configured to be used on the editor.`);\n    }\n  }\n  const editorKlass = registeredNode.klass;\n  if (editorKlass !== klass) {\n    {\n      throw Error(`Create node: Type ${type} in node ${klass.name} does not match registered node ${editorKlass.name} with the same type`);\n    }\n  }\n}\n\n/**\n * Insert a series of nodes after this LexicalNode (as next siblings)\n *\n * @param firstToInsert - The first node to insert after this one.\n * @param lastToInsert - The last node to insert after this one. Must be a\n * later sibling of FirstNode. If not provided, it will be its last sibling.\n */\nfunction insertRangeAfter(node, firstToInsert, lastToInsert) {\n  const lastToInsert2 = firstToInsert.getParentOrThrow().getLastChild();\n  let current = firstToInsert;\n  const nodesToInsert = [firstToInsert];\n  while (current !== lastToInsert2) {\n    if (!current.getNextSibling()) {\n      {\n        throw Error(`insertRangeAfter: lastToInsert must be a later sibling of firstToInsert`);\n      }\n    }\n    current = current.getNextSibling();\n    nodesToInsert.push(current);\n  }\n  let currentNode = node;\n  for (const nodeToInsert of nodesToInsert) {\n    currentNode = currentNode.insertAfter(nodeToInsert);\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass LineBreakNode extends LexicalNode {\n  static getType() {\n    return 'linebreak';\n  }\n  static clone(node) {\n    return new LineBreakNode(node.__key);\n  }\n  constructor(key) {\n    super(key);\n  }\n  getTextContent() {\n    return '\\n';\n  }\n  createDOM() {\n    return document.createElement('br');\n  }\n  updateDOM() {\n    return false;\n  }\n  static importDOM() {\n    return {\n      br: node => {\n        if (isOnlyChildInBlockNode(node) || isLastChildInBlockNode(node)) {\n          return null;\n        }\n        return {\n          conversion: $convertLineBreakElement,\n          priority: 0\n        };\n      }\n    };\n  }\n  static importJSON(serializedLineBreakNode) {\n    return $createLineBreakNode();\n  }\n}\nfunction $convertLineBreakElement(node) {\n  return {\n    node: $createLineBreakNode()\n  };\n}\nfunction $createLineBreakNode() {\n  return $applyNodeReplacement(new LineBreakNode());\n}\nfunction $isLineBreakNode(node) {\n  return node instanceof LineBreakNode;\n}\nfunction isOnlyChildInBlockNode(node) {\n  const parentElement = node.parentElement;\n  if (parentElement !== null && isBlockDomNode(parentElement)) {\n    const firstChild = parentElement.firstChild;\n    if (firstChild === node || firstChild.nextSibling === node && isWhitespaceDomTextNode(firstChild)) {\n      const lastChild = parentElement.lastChild;\n      if (lastChild === node || lastChild.previousSibling === node && isWhitespaceDomTextNode(lastChild)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\nfunction isLastChildInBlockNode(node) {\n  const parentElement = node.parentElement;\n  if (parentElement !== null && isBlockDomNode(parentElement)) {\n    // check if node is first child, because only childs dont count\n    const firstChild = parentElement.firstChild;\n    if (firstChild === node || firstChild.nextSibling === node && isWhitespaceDomTextNode(firstChild)) {\n      return false;\n    }\n\n    // check if its last child\n    const lastChild = parentElement.lastChild;\n    if (lastChild === node || lastChild.previousSibling === node && isWhitespaceDomTextNode(lastChild)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction isWhitespaceDomTextNode(node) {\n  return node.nodeType === DOM_TEXT_TYPE && /^( |\\t|\\r?\\n)+$/.test(node.textContent || '');\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction getElementOuterTag(node, format) {\n  if (format & IS_CODE) {\n    return 'code';\n  }\n  if (format & IS_HIGHLIGHT) {\n    return 'mark';\n  }\n  if (format & IS_SUBSCRIPT) {\n    return 'sub';\n  }\n  if (format & IS_SUPERSCRIPT) {\n    return 'sup';\n  }\n  return null;\n}\nfunction getElementInnerTag(node, format) {\n  if (format & IS_BOLD) {\n    return 'strong';\n  }\n  if (format & IS_ITALIC) {\n    return 'em';\n  }\n  return 'span';\n}\nfunction setTextThemeClassNames(tag, prevFormat, nextFormat, dom, textClassNames) {\n  const domClassList = dom.classList;\n  // Firstly we handle the base theme.\n  let classNames = getCachedClassNameArray(textClassNames, 'base');\n  if (classNames !== undefined) {\n    domClassList.add(...classNames);\n  }\n  // Secondly we handle the special case: underline + strikethrough.\n  // We have to do this as we need a way to compose the fact that\n  // the same CSS property will need to be used: text-decoration.\n  // In an ideal world we shouldn't have to do this, but there's no\n  // easy workaround for many atomic CSS systems today.\n  classNames = getCachedClassNameArray(textClassNames, 'underlineStrikethrough');\n  let hasUnderlineStrikethrough = false;\n  const prevUnderlineStrikethrough = prevFormat & IS_UNDERLINE && prevFormat & IS_STRIKETHROUGH;\n  const nextUnderlineStrikethrough = nextFormat & IS_UNDERLINE && nextFormat & IS_STRIKETHROUGH;\n  if (classNames !== undefined) {\n    if (nextUnderlineStrikethrough) {\n      hasUnderlineStrikethrough = true;\n      if (!prevUnderlineStrikethrough) {\n        domClassList.add(...classNames);\n      }\n    } else if (prevUnderlineStrikethrough) {\n      domClassList.remove(...classNames);\n    }\n  }\n  for (const key in TEXT_TYPE_TO_FORMAT) {\n    const format = key;\n    const flag = TEXT_TYPE_TO_FORMAT[format];\n    classNames = getCachedClassNameArray(textClassNames, key);\n    if (classNames !== undefined) {\n      if (nextFormat & flag) {\n        if (hasUnderlineStrikethrough && (key === 'underline' || key === 'strikethrough')) {\n          if (prevFormat & flag) {\n            domClassList.remove(...classNames);\n          }\n          continue;\n        }\n        if ((prevFormat & flag) === 0 || prevUnderlineStrikethrough && key === 'underline' || key === 'strikethrough') {\n          domClassList.add(...classNames);\n        }\n      } else if (prevFormat & flag) {\n        domClassList.remove(...classNames);\n      }\n    }\n  }\n}\nfunction diffComposedText(a, b) {\n  const aLength = a.length;\n  const bLength = b.length;\n  let left = 0;\n  let right = 0;\n  while (left < aLength && left < bLength && a[left] === b[left]) {\n    left++;\n  }\n  while (right + left < aLength && right + left < bLength && a[aLength - right - 1] === b[bLength - right - 1]) {\n    right++;\n  }\n  return [left, aLength - left - right, b.slice(left, bLength - right)];\n}\nfunction setTextContent(nextText, dom, node) {\n  const firstChild = dom.firstChild;\n  const isComposing = node.isComposing();\n  // Always add a suffix if we're composing a node\n  const suffix = isComposing ? COMPOSITION_SUFFIX : '';\n  const text = nextText + suffix;\n  if (firstChild == null) {\n    dom.textContent = text;\n  } else {\n    const nodeValue = firstChild.nodeValue;\n    if (nodeValue !== text) {\n      if (isComposing || IS_FIREFOX) {\n        // We also use the diff composed text for general text in FF to avoid\n        // the spellcheck red line from flickering.\n        const [index, remove, insert] = diffComposedText(nodeValue, text);\n        if (remove !== 0) {\n          // @ts-expect-error\n          firstChild.deleteData(index, remove);\n        }\n        // @ts-expect-error\n        firstChild.insertData(index, insert);\n      } else {\n        firstChild.nodeValue = text;\n      }\n    }\n  }\n}\nfunction createTextInnerDOM(innerDOM, node, innerTag, format, text, config) {\n  setTextContent(text, innerDOM, node);\n  const theme = config.theme;\n  // Apply theme class names\n  const textClassNames = theme.text;\n  if (textClassNames !== undefined) {\n    setTextThemeClassNames(innerTag, 0, format, innerDOM, textClassNames);\n  }\n}\nfunction wrapElementWith(element, tag) {\n  const el = document.createElement(tag);\n  el.appendChild(element);\n  return el;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\n\n/** @noInheritDoc */\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nclass TextNode extends LexicalNode {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  static getType() {\n    return 'text';\n  }\n  static clone(node) {\n    return new TextNode(node.__text, node.__key);\n  }\n  afterCloneFrom(prevNode) {\n    super.afterCloneFrom(prevNode);\n    this.__format = prevNode.__format;\n    this.__style = prevNode.__style;\n    this.__mode = prevNode.__mode;\n    this.__detail = prevNode.__detail;\n  }\n  constructor(text, key) {\n    super(key);\n    this.__text = text;\n    this.__format = 0;\n    this.__style = '';\n    this.__mode = 0;\n    this.__detail = 0;\n  }\n\n  /**\n   * Returns a 32-bit integer that represents the TextFormatTypes currently applied to the\n   * TextNode. You probably don't want to use this method directly - consider using TextNode.hasFormat instead.\n   *\n   * @returns a number representing the format of the text node.\n   */\n  getFormat() {\n    const self = this.getLatest();\n    return self.__format;\n  }\n\n  /**\n   * Returns a 32-bit integer that represents the TextDetailTypes currently applied to the\n   * TextNode. You probably don't want to use this method directly - consider using TextNode.isDirectionless\n   * or TextNode.isUnmergeable instead.\n   *\n   * @returns a number representing the detail of the text node.\n   */\n  getDetail() {\n    const self = this.getLatest();\n    return self.__detail;\n  }\n\n  /**\n   * Returns the mode (TextModeType) of the TextNode, which may be \"normal\", \"token\", or \"segmented\"\n   *\n   * @returns TextModeType.\n   */\n  getMode() {\n    const self = this.getLatest();\n    return TEXT_TYPE_TO_MODE[self.__mode];\n  }\n\n  /**\n   * Returns the styles currently applied to the node. This is analogous to CSSText in the DOM.\n   *\n   * @returns CSSText-like string of styles applied to the underlying DOM node.\n   */\n  getStyle() {\n    const self = this.getLatest();\n    return self.__style;\n  }\n\n  /**\n   * Returns whether or not the node is in \"token\" mode. TextNodes in token mode can be navigated through character-by-character\n   * with a RangeSelection, but are deleted as a single entity (not invdividually by character).\n   *\n   * @returns true if the node is in token mode, false otherwise.\n   */\n  isToken() {\n    const self = this.getLatest();\n    return self.__mode === IS_TOKEN;\n  }\n\n  /**\n   *\n   * @returns true if Lexical detects that an IME or other 3rd-party script is attempting to\n   * mutate the TextNode, false otherwise.\n   */\n  isComposing() {\n    return this.__key === $getCompositionKey();\n  }\n\n  /**\n   * Returns whether or not the node is in \"segemented\" mode. TextNodes in segemented mode can be navigated through character-by-character\n   * with a RangeSelection, but are deleted in space-delimited \"segments\".\n   *\n   * @returns true if the node is in segmented mode, false otherwise.\n   */\n  isSegmented() {\n    const self = this.getLatest();\n    return self.__mode === IS_SEGMENTED;\n  }\n  /**\n   * Returns whether or not the node is \"directionless\". Directionless nodes don't respect changes between RTL and LTR modes.\n   *\n   * @returns true if the node is directionless, false otherwise.\n   */\n  isDirectionless() {\n    const self = this.getLatest();\n    return (self.__detail & IS_DIRECTIONLESS) !== 0;\n  }\n  /**\n   * Returns whether or not the node is unmergeable. In some scenarios, Lexical tries to merge\n   * adjacent TextNodes into a single TextNode. If a TextNode is unmergeable, this won't happen.\n   *\n   * @returns true if the node is unmergeable, false otherwise.\n   */\n  isUnmergeable() {\n    const self = this.getLatest();\n    return (self.__detail & IS_UNMERGEABLE) !== 0;\n  }\n\n  /**\n   * Returns whether or not the node has the provided format applied. Use this with the human-readable TextFormatType\n   * string values to get the format of a TextNode.\n   *\n   * @param type - the TextFormatType to check for.\n   *\n   * @returns true if the node has the provided format, false otherwise.\n   */\n  hasFormat(type) {\n    const formatFlag = TEXT_TYPE_TO_FORMAT[type];\n    return (this.getFormat() & formatFlag) !== 0;\n  }\n\n  /**\n   * Returns whether or not the node is simple text. Simple text is defined as a TextNode that has the string type \"text\"\n   * (i.e., not a subclass) and has no mode applied to it (i.e., not segmented or token).\n   *\n   * @returns true if the node is simple text, false otherwise.\n   */\n  isSimpleText() {\n    return this.__type === 'text' && this.__mode === 0;\n  }\n\n  /**\n   * Returns the text content of the node as a string.\n   *\n   * @returns a string representing the text content of the node.\n   */\n  getTextContent() {\n    const self = this.getLatest();\n    return self.__text;\n  }\n\n  /**\n   * Returns the format flags applied to the node as a 32-bit integer.\n   *\n   * @returns a number representing the TextFormatTypes applied to the node.\n   */\n  getFormatFlags(type, alignWithFormat) {\n    const self = this.getLatest();\n    const format = self.__format;\n    return toggleTextFormatType(format, type, alignWithFormat);\n  }\n\n  /**\n   *\n   * @returns true if the text node supports font styling, false otherwise.\n   */\n  canHaveFormat() {\n    return true;\n  }\n\n  // View\n\n  createDOM(config, editor) {\n    const format = this.__format;\n    const outerTag = getElementOuterTag(this, format);\n    const innerTag = getElementInnerTag(this, format);\n    const tag = outerTag === null ? innerTag : outerTag;\n    const dom = document.createElement(tag);\n    let innerDOM = dom;\n    if (this.hasFormat('code')) {\n      dom.setAttribute('spellcheck', 'false');\n    }\n    if (outerTag !== null) {\n      innerDOM = document.createElement(innerTag);\n      dom.appendChild(innerDOM);\n    }\n    const text = this.__text;\n    createTextInnerDOM(innerDOM, this, innerTag, format, text, config);\n    const style = this.__style;\n    if (style !== '') {\n      dom.style.cssText = style;\n    }\n    return dom;\n  }\n  updateDOM(prevNode, dom, config) {\n    const nextText = this.__text;\n    const prevFormat = prevNode.__format;\n    const nextFormat = this.__format;\n    const prevOuterTag = getElementOuterTag(this, prevFormat);\n    const nextOuterTag = getElementOuterTag(this, nextFormat);\n    const prevInnerTag = getElementInnerTag(this, prevFormat);\n    const nextInnerTag = getElementInnerTag(this, nextFormat);\n    const prevTag = prevOuterTag === null ? prevInnerTag : prevOuterTag;\n    const nextTag = nextOuterTag === null ? nextInnerTag : nextOuterTag;\n    if (prevTag !== nextTag) {\n      return true;\n    }\n    if (prevOuterTag === nextOuterTag && prevInnerTag !== nextInnerTag) {\n      // should always be an element\n      const prevInnerDOM = dom.firstChild;\n      if (prevInnerDOM == null) {\n        {\n          throw Error(`updateDOM: prevInnerDOM is null or undefined`);\n        }\n      }\n      const nextInnerDOM = document.createElement(nextInnerTag);\n      createTextInnerDOM(nextInnerDOM, this, nextInnerTag, nextFormat, nextText, config);\n      dom.replaceChild(nextInnerDOM, prevInnerDOM);\n      return false;\n    }\n    let innerDOM = dom;\n    if (nextOuterTag !== null) {\n      if (prevOuterTag !== null) {\n        innerDOM = dom.firstChild;\n        if (innerDOM == null) {\n          {\n            throw Error(`updateDOM: innerDOM is null or undefined`);\n          }\n        }\n      }\n    }\n    setTextContent(nextText, innerDOM, this);\n    const theme = config.theme;\n    // Apply theme class names\n    const textClassNames = theme.text;\n    if (textClassNames !== undefined && prevFormat !== nextFormat) {\n      setTextThemeClassNames(nextInnerTag, prevFormat, nextFormat, innerDOM, textClassNames);\n    }\n    const prevStyle = prevNode.__style;\n    const nextStyle = this.__style;\n    if (prevStyle !== nextStyle) {\n      dom.style.cssText = nextStyle;\n    }\n    return false;\n  }\n  static importDOM() {\n    return {\n      '#text': () => ({\n        conversion: $convertTextDOMNode,\n        priority: 0\n      }),\n      b: () => ({\n        conversion: convertBringAttentionToElement,\n        priority: 0\n      }),\n      code: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      em: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      i: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      s: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      span: () => ({\n        conversion: convertSpanElement,\n        priority: 0\n      }),\n      strong: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      sub: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      sup: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      u: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      })\n    };\n  }\n  static importJSON(serializedNode) {\n    const node = $createTextNode(serializedNode.text);\n    node.setFormat(serializedNode.format);\n    node.setDetail(serializedNode.detail);\n    node.setMode(serializedNode.mode);\n    node.setStyle(serializedNode.style);\n    return node;\n  }\n\n  // This improves Lexical's basic text output in copy+paste plus\n  // for headless mode where people might use Lexical to generate\n  // HTML content and not have the ability to use CSS classes.\n  exportDOM(editor) {\n    let {\n      element\n    } = super.exportDOM(editor);\n    if (!isHTMLElement(element)) {\n      throw Error(`Expected TextNode createDOM to always return a HTMLElement`);\n    }\n    element.style.whiteSpace = 'pre-wrap';\n    // This is the only way to properly add support for most clients,\n    // even if it's semantically incorrect to have to resort to using\n    // <b>, <u>, <s>, <i> elements.\n    if (this.hasFormat('bold')) {\n      element = wrapElementWith(element, 'b');\n    }\n    if (this.hasFormat('italic')) {\n      element = wrapElementWith(element, 'i');\n    }\n    if (this.hasFormat('strikethrough')) {\n      element = wrapElementWith(element, 's');\n    }\n    if (this.hasFormat('underline')) {\n      element = wrapElementWith(element, 'u');\n    }\n    return {\n      element\n    };\n  }\n  exportJSON() {\n    return {\n      detail: this.getDetail(),\n      format: this.getFormat(),\n      mode: this.getMode(),\n      style: this.getStyle(),\n      text: this.getTextContent(),\n      // As an exception here we invoke super at the end for historical reasons.\n      // Namely, to preserve the order of the properties and not to break the tests\n      // that use the serialized string representation.\n      ...super.exportJSON()\n    };\n  }\n\n  // Mutators\n  selectionTransform(prevSelection, nextSelection) {\n    return;\n  }\n\n  /**\n   * Sets the node format to the provided TextFormatType or 32-bit integer. Note that the TextFormatType\n   * version of the argument can only specify one format and doing so will remove all other formats that\n   * may be applied to the node. For toggling behavior, consider using {@link TextNode.toggleFormat}\n   *\n   * @param format - TextFormatType or 32-bit integer representing the node format.\n   *\n   * @returns this TextNode.\n   * // TODO 0.12 This should just be a `string`.\n   */\n  setFormat(format) {\n    const self = this.getWritable();\n    self.__format = typeof format === 'string' ? TEXT_TYPE_TO_FORMAT[format] : format;\n    return self;\n  }\n\n  /**\n   * Sets the node detail to the provided TextDetailType or 32-bit integer. Note that the TextDetailType\n   * version of the argument can only specify one detail value and doing so will remove all other detail values that\n   * may be applied to the node. For toggling behavior, consider using {@link TextNode.toggleDirectionless}\n   * or {@link TextNode.toggleUnmergeable}\n   *\n   * @param detail - TextDetailType or 32-bit integer representing the node detail.\n   *\n   * @returns this TextNode.\n   * // TODO 0.12 This should just be a `string`.\n   */\n  setDetail(detail) {\n    const self = this.getWritable();\n    self.__detail = typeof detail === 'string' ? DETAIL_TYPE_TO_DETAIL[detail] : detail;\n    return self;\n  }\n\n  /**\n   * Sets the node style to the provided CSSText-like string. Set this property as you\n   * would an HTMLElement style attribute to apply inline styles to the underlying DOM Element.\n   *\n   * @param style - CSSText to be applied to the underlying HTMLElement.\n   *\n   * @returns this TextNode.\n   */\n  setStyle(style) {\n    const self = this.getWritable();\n    self.__style = style;\n    return self;\n  }\n\n  /**\n   * Applies the provided format to this TextNode if it's not present. Removes it if it's present.\n   * The subscript and superscript formats are mutually exclusive.\n   * Prefer using this method to turn specific formats on and off.\n   *\n   * @param type - TextFormatType to toggle.\n   *\n   * @returns this TextNode.\n   */\n  toggleFormat(type) {\n    const format = this.getFormat();\n    const newFormat = toggleTextFormatType(format, type, null);\n    return this.setFormat(newFormat);\n  }\n\n  /**\n   * Toggles the directionless detail value of the node. Prefer using this method over setDetail.\n   *\n   * @returns this TextNode.\n   */\n  toggleDirectionless() {\n    const self = this.getWritable();\n    self.__detail ^= IS_DIRECTIONLESS;\n    return self;\n  }\n\n  /**\n   * Toggles the unmergeable detail value of the node. Prefer using this method over setDetail.\n   *\n   * @returns this TextNode.\n   */\n  toggleUnmergeable() {\n    const self = this.getWritable();\n    self.__detail ^= IS_UNMERGEABLE;\n    return self;\n  }\n\n  /**\n   * Sets the mode of the node.\n   *\n   * @returns this TextNode.\n   */\n  setMode(type) {\n    const mode = TEXT_MODE_TO_TYPE[type];\n    if (this.__mode === mode) {\n      return this;\n    }\n    const self = this.getWritable();\n    self.__mode = mode;\n    return self;\n  }\n\n  /**\n   * Sets the text content of the node.\n   *\n   * @param text - the string to set as the text value of the node.\n   *\n   * @returns this TextNode.\n   */\n  setTextContent(text) {\n    if (this.__text === text) {\n      return this;\n    }\n    const self = this.getWritable();\n    self.__text = text;\n    return self;\n  }\n\n  /**\n   * Sets the current Lexical selection to be a RangeSelection with anchor and focus on this TextNode at the provided offsets.\n   *\n   * @param _anchorOffset - the offset at which the Selection anchor will be placed.\n   * @param _focusOffset - the offset at which the Selection focus will be placed.\n   *\n   * @returns the new RangeSelection.\n   */\n  select(_anchorOffset, _focusOffset) {\n    errorOnReadOnly();\n    let anchorOffset = _anchorOffset;\n    let focusOffset = _focusOffset;\n    const selection = $getSelection();\n    const text = this.getTextContent();\n    const key = this.__key;\n    if (typeof text === 'string') {\n      const lastOffset = text.length;\n      if (anchorOffset === undefined) {\n        anchorOffset = lastOffset;\n      }\n      if (focusOffset === undefined) {\n        focusOffset = lastOffset;\n      }\n    } else {\n      anchorOffset = 0;\n      focusOffset = 0;\n    }\n    if (!$isRangeSelection(selection)) {\n      return $internalMakeRangeSelection(key, anchorOffset, key, focusOffset, 'text', 'text');\n    } else {\n      const compositionKey = $getCompositionKey();\n      if (compositionKey === selection.anchor.key || compositionKey === selection.focus.key) {\n        $setCompositionKey(key);\n      }\n      selection.setTextNodeRange(this, anchorOffset, this, focusOffset);\n    }\n    return selection;\n  }\n  selectStart() {\n    return this.select(0, 0);\n  }\n  selectEnd() {\n    const size = this.getTextContentSize();\n    return this.select(size, size);\n  }\n\n  /**\n   * Inserts the provided text into this TextNode at the provided offset, deleting the number of characters\n   * specified. Can optionally calculate a new selection after the operation is complete.\n   *\n   * @param offset - the offset at which the splice operation should begin.\n   * @param delCount - the number of characters to delete, starting from the offset.\n   * @param newText - the text to insert into the TextNode at the offset.\n   * @param moveSelection - optional, whether or not to move selection to the end of the inserted substring.\n   *\n   * @returns this TextNode.\n   */\n  spliceText(offset, delCount, newText, moveSelection) {\n    const writableSelf = this.getWritable();\n    const text = writableSelf.__text;\n    const handledTextLength = newText.length;\n    let index = offset;\n    if (index < 0) {\n      index = handledTextLength + index;\n      if (index < 0) {\n        index = 0;\n      }\n    }\n    const selection = $getSelection();\n    if (moveSelection && $isRangeSelection(selection)) {\n      const newOffset = offset + handledTextLength;\n      selection.setTextNodeRange(writableSelf, newOffset, writableSelf, newOffset);\n    }\n    const updatedText = text.slice(0, index) + newText + text.slice(index + delCount);\n    writableSelf.__text = updatedText;\n    return writableSelf;\n  }\n\n  /**\n   * This method is meant to be overriden by TextNode subclasses to control the behavior of those nodes\n   * when a user event would cause text to be inserted before them in the editor. If true, Lexical will attempt\n   * to insert text into this node. If false, it will insert the text in a new sibling node.\n   *\n   * @returns true if text can be inserted before the node, false otherwise.\n   */\n  canInsertTextBefore() {\n    return true;\n  }\n\n  /**\n   * This method is meant to be overriden by TextNode subclasses to control the behavior of those nodes\n   * when a user event would cause text to be inserted after them in the editor. If true, Lexical will attempt\n   * to insert text into this node. If false, it will insert the text in a new sibling node.\n   *\n   * @returns true if text can be inserted after the node, false otherwise.\n   */\n  canInsertTextAfter() {\n    return true;\n  }\n\n  /**\n   * Splits this TextNode at the provided character offsets, forming new TextNodes from the substrings\n   * formed by the split, and inserting those new TextNodes into the editor, replacing the one that was split.\n   *\n   * @param splitOffsets - rest param of the text content character offsets at which this node should be split.\n   *\n   * @returns an Array containing the newly-created TextNodes.\n   */\n  splitText(...splitOffsets) {\n    errorOnReadOnly();\n    const self = this.getLatest();\n    const textContent = self.getTextContent();\n    const key = self.__key;\n    const compositionKey = $getCompositionKey();\n    const offsetsSet = new Set(splitOffsets);\n    const parts = [];\n    const textLength = textContent.length;\n    let string = '';\n    for (let i = 0; i < textLength; i++) {\n      if (string !== '' && offsetsSet.has(i)) {\n        parts.push(string);\n        string = '';\n      }\n      string += textContent[i];\n    }\n    if (string !== '') {\n      parts.push(string);\n    }\n    const partsLength = parts.length;\n    if (partsLength === 0) {\n      return [];\n    } else if (parts[0] === textContent) {\n      return [self];\n    }\n    const firstPart = parts[0];\n    const parent = self.getParent();\n    let writableNode;\n    const format = self.getFormat();\n    const style = self.getStyle();\n    const detail = self.__detail;\n    let hasReplacedSelf = false;\n    if (self.isSegmented()) {\n      // Create a new TextNode\n      writableNode = $createTextNode(firstPart);\n      writableNode.__format = format;\n      writableNode.__style = style;\n      writableNode.__detail = detail;\n      hasReplacedSelf = true;\n    } else {\n      // For the first part, update the existing node\n      writableNode = self.getWritable();\n      writableNode.__text = firstPart;\n    }\n\n    // Handle selection\n    const selection = $getSelection();\n\n    // Then handle all other parts\n    const splitNodes = [writableNode];\n    let textSize = firstPart.length;\n    for (let i = 1; i < partsLength; i++) {\n      const part = parts[i];\n      const partSize = part.length;\n      const sibling = $createTextNode(part).getWritable();\n      sibling.__format = format;\n      sibling.__style = style;\n      sibling.__detail = detail;\n      const siblingKey = sibling.__key;\n      const nextTextSize = textSize + partSize;\n      if ($isRangeSelection(selection)) {\n        const anchor = selection.anchor;\n        const focus = selection.focus;\n        if (anchor.key === key && anchor.type === 'text' && anchor.offset > textSize && anchor.offset <= nextTextSize) {\n          anchor.key = siblingKey;\n          anchor.offset -= textSize;\n          selection.dirty = true;\n        }\n        if (focus.key === key && focus.type === 'text' && focus.offset > textSize && focus.offset <= nextTextSize) {\n          focus.key = siblingKey;\n          focus.offset -= textSize;\n          selection.dirty = true;\n        }\n      }\n      if (compositionKey === key) {\n        $setCompositionKey(siblingKey);\n      }\n      textSize = nextTextSize;\n      splitNodes.push(sibling);\n    }\n\n    // Insert the nodes into the parent's children\n    if (parent !== null) {\n      internalMarkSiblingsAsDirty(this);\n      const writableParent = parent.getWritable();\n      const insertionIndex = this.getIndexWithinParent();\n      if (hasReplacedSelf) {\n        writableParent.splice(insertionIndex, 0, splitNodes);\n        this.remove();\n      } else {\n        writableParent.splice(insertionIndex, 1, splitNodes);\n      }\n      if ($isRangeSelection(selection)) {\n        $updateElementSelectionOnCreateDeleteNode(selection, parent, insertionIndex, partsLength - 1);\n      }\n    }\n    return splitNodes;\n  }\n\n  /**\n   * Merges the target TextNode into this TextNode, removing the target node.\n   *\n   * @param target - the TextNode to merge into this one.\n   *\n   * @returns this TextNode.\n   */\n  mergeWithSibling(target) {\n    const isBefore = target === this.getPreviousSibling();\n    if (!isBefore && target !== this.getNextSibling()) {\n      {\n        throw Error(`mergeWithSibling: sibling must be a previous or next sibling`);\n      }\n    }\n    const key = this.__key;\n    const targetKey = target.__key;\n    const text = this.__text;\n    const textLength = text.length;\n    const compositionKey = $getCompositionKey();\n    if (compositionKey === targetKey) {\n      $setCompositionKey(key);\n    }\n    const selection = $getSelection();\n    if ($isRangeSelection(selection)) {\n      const anchor = selection.anchor;\n      const focus = selection.focus;\n      if (anchor !== null && anchor.key === targetKey) {\n        adjustPointOffsetForMergedSibling(anchor, isBefore, key, target, textLength);\n        selection.dirty = true;\n      }\n      if (focus !== null && focus.key === targetKey) {\n        adjustPointOffsetForMergedSibling(focus, isBefore, key, target, textLength);\n        selection.dirty = true;\n      }\n    }\n    const targetText = target.__text;\n    const newText = isBefore ? targetText + text : text + targetText;\n    this.setTextContent(newText);\n    const writableSelf = this.getWritable();\n    target.remove();\n    return writableSelf;\n  }\n\n  /**\n   * This method is meant to be overriden by TextNode subclasses to control the behavior of those nodes\n   * when used with the registerLexicalTextEntity function. If you're using registerLexicalTextEntity, the\n   * node class that you create and replace matched text with should return true from this method.\n   *\n   * @returns true if the node is to be treated as a \"text entity\", false otherwise.\n   */\n  isTextEntity() {\n    return false;\n  }\n}\nfunction convertSpanElement(domNode) {\n  // domNode is a <span> since we matched it by nodeName\n  const span = domNode;\n  const style = span.style;\n  return {\n    forChild: applyTextFormatFromStyle(style),\n    node: null\n  };\n}\nfunction convertBringAttentionToElement(domNode) {\n  // domNode is a <b> since we matched it by nodeName\n  const b = domNode;\n  // Google Docs wraps all copied HTML in a <b> with font-weight normal\n  const hasNormalFontWeight = b.style.fontWeight === 'normal';\n  return {\n    forChild: applyTextFormatFromStyle(b.style, hasNormalFontWeight ? undefined : 'bold'),\n    node: null\n  };\n}\nconst preParentCache = new WeakMap();\nfunction isNodePre(node) {\n  return node.nodeName === 'PRE' || node.nodeType === DOM_ELEMENT_TYPE && node.style !== undefined && node.style.whiteSpace !== undefined && node.style.whiteSpace.startsWith('pre');\n}\nfunction findParentPreDOMNode(node) {\n  let cached;\n  let parent = node.parentNode;\n  const visited = [node];\n  while (parent !== null && (cached = preParentCache.get(parent)) === undefined && !isNodePre(parent)) {\n    visited.push(parent);\n    parent = parent.parentNode;\n  }\n  const resultNode = cached === undefined ? parent : cached;\n  for (let i = 0; i < visited.length; i++) {\n    preParentCache.set(visited[i], resultNode);\n  }\n  return resultNode;\n}\nfunction $convertTextDOMNode(domNode) {\n  const domNode_ = domNode;\n  const parentDom = domNode.parentElement;\n  if (!(parentDom !== null)) {\n    throw Error(`Expected parentElement of Text not to be null`);\n  }\n  let textContent = domNode_.textContent || '';\n  // No collapse and preserve segment break for pre, pre-wrap and pre-line\n  if (findParentPreDOMNode(domNode_) !== null) {\n    const parts = textContent.split(/(\\r?\\n|\\t)/);\n    const nodes = [];\n    const length = parts.length;\n    for (let i = 0; i < length; i++) {\n      const part = parts[i];\n      if (part === '\\n' || part === '\\r\\n') {\n        nodes.push($createLineBreakNode());\n      } else if (part === '\\t') {\n        nodes.push($createTabNode());\n      } else if (part !== '') {\n        nodes.push($createTextNode(part));\n      }\n    }\n    return {\n      node: nodes\n    };\n  }\n  textContent = textContent.replace(/\\r/g, '').replace(/[ \\t\\n]+/g, ' ');\n  if (textContent === '') {\n    return {\n      node: null\n    };\n  }\n  if (textContent[0] === ' ') {\n    // Traverse backward while in the same line. If content contains new line or tab -> pontential\n    // delete, other elements can borrow from this one. Deletion depends on whether it's also the\n    // last space (see next condition: textContent[textContent.length - 1] === ' '))\n    let previousText = domNode_;\n    let isStartOfLine = true;\n    while (previousText !== null && (previousText = findTextInLine(previousText, false)) !== null) {\n      const previousTextContent = previousText.textContent || '';\n      if (previousTextContent.length > 0) {\n        if (/[ \\t\\n]$/.test(previousTextContent)) {\n          textContent = textContent.slice(1);\n        }\n        isStartOfLine = false;\n        break;\n      }\n    }\n    if (isStartOfLine) {\n      textContent = textContent.slice(1);\n    }\n  }\n  if (textContent[textContent.length - 1] === ' ') {\n    // Traverse forward while in the same line, preserve if next inline will require a space\n    let nextText = domNode_;\n    let isEndOfLine = true;\n    while (nextText !== null && (nextText = findTextInLine(nextText, true)) !== null) {\n      const nextTextContent = (nextText.textContent || '').replace(/^( |\\t|\\r?\\n)+/, '');\n      if (nextTextContent.length > 0) {\n        isEndOfLine = false;\n        break;\n      }\n    }\n    if (isEndOfLine) {\n      textContent = textContent.slice(0, textContent.length - 1);\n    }\n  }\n  if (textContent === '') {\n    return {\n      node: null\n    };\n  }\n  return {\n    node: $createTextNode(textContent)\n  };\n}\nfunction findTextInLine(text, forward) {\n  let node = text;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    let sibling;\n    while ((sibling = forward ? node.nextSibling : node.previousSibling) === null) {\n      const parentElement = node.parentElement;\n      if (parentElement === null) {\n        return null;\n      }\n      node = parentElement;\n    }\n    node = sibling;\n    if (node.nodeType === DOM_ELEMENT_TYPE) {\n      const display = node.style.display;\n      if (display === '' && !isInlineDomNode(node) || display !== '' && !display.startsWith('inline')) {\n        return null;\n      }\n    }\n    let descendant = node;\n    while ((descendant = forward ? node.firstChild : node.lastChild) !== null) {\n      node = descendant;\n    }\n    if (node.nodeType === DOM_TEXT_TYPE) {\n      return node;\n    } else if (node.nodeName === 'BR') {\n      return null;\n    }\n  }\n}\nconst nodeNameToTextFormat = {\n  code: 'code',\n  em: 'italic',\n  i: 'italic',\n  s: 'strikethrough',\n  strong: 'bold',\n  sub: 'subscript',\n  sup: 'superscript',\n  u: 'underline'\n};\nfunction convertTextFormatElement(domNode) {\n  const format = nodeNameToTextFormat[domNode.nodeName.toLowerCase()];\n  if (format === undefined) {\n    return {\n      node: null\n    };\n  }\n  return {\n    forChild: applyTextFormatFromStyle(domNode.style, format),\n    node: null\n  };\n}\nfunction $createTextNode(text = '') {\n  return $applyNodeReplacement(new TextNode(text));\n}\nfunction $isTextNode(node) {\n  return node instanceof TextNode;\n}\nfunction applyTextFormatFromStyle(style, shouldApply) {\n  const fontWeight = style.fontWeight;\n  const textDecoration = style.textDecoration.split(' ');\n  // Google Docs uses span tags + font-weight for bold text\n  const hasBoldFontWeight = fontWeight === '700' || fontWeight === 'bold';\n  // Google Docs uses span tags + text-decoration: line-through for strikethrough text\n  const hasLinethroughTextDecoration = textDecoration.includes('line-through');\n  // Google Docs uses span tags + font-style for italic text\n  const hasItalicFontStyle = style.fontStyle === 'italic';\n  // Google Docs uses span tags + text-decoration: underline for underline text\n  const hasUnderlineTextDecoration = textDecoration.includes('underline');\n  // Google Docs uses span tags + vertical-align to specify subscript and superscript\n  const verticalAlign = style.verticalAlign;\n  return lexicalNode => {\n    if (!$isTextNode(lexicalNode)) {\n      return lexicalNode;\n    }\n    if (hasBoldFontWeight && !lexicalNode.hasFormat('bold')) {\n      lexicalNode.toggleFormat('bold');\n    }\n    if (hasLinethroughTextDecoration && !lexicalNode.hasFormat('strikethrough')) {\n      lexicalNode.toggleFormat('strikethrough');\n    }\n    if (hasItalicFontStyle && !lexicalNode.hasFormat('italic')) {\n      lexicalNode.toggleFormat('italic');\n    }\n    if (hasUnderlineTextDecoration && !lexicalNode.hasFormat('underline')) {\n      lexicalNode.toggleFormat('underline');\n    }\n    if (verticalAlign === 'sub' && !lexicalNode.hasFormat('subscript')) {\n      lexicalNode.toggleFormat('subscript');\n    }\n    if (verticalAlign === 'super' && !lexicalNode.hasFormat('superscript')) {\n      lexicalNode.toggleFormat('superscript');\n    }\n    if (shouldApply && !lexicalNode.hasFormat(shouldApply)) {\n      lexicalNode.toggleFormat(shouldApply);\n    }\n    return lexicalNode;\n  };\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass TabNode extends TextNode {\n  static getType() {\n    return 'tab';\n  }\n  static clone(node) {\n    return new TabNode(node.__key);\n  }\n  afterCloneFrom(prevNode) {\n    super.afterCloneFrom(prevNode);\n    // TabNode __text can be either '\\t' or ''. insertText will remove the empty Node\n    this.__text = prevNode.__text;\n  }\n  constructor(key) {\n    super('\\t', key);\n    this.__detail = IS_UNMERGEABLE;\n  }\n  static importDOM() {\n    return null;\n  }\n  createDOM(config) {\n    const dom = super.createDOM(config);\n    const classNames = getCachedClassNameArray(config.theme, 'tab');\n    if (classNames !== undefined) {\n      const domClassList = dom.classList;\n      domClassList.add(...classNames);\n    }\n    return dom;\n  }\n  static importJSON(serializedTabNode) {\n    const node = $createTabNode();\n    node.setFormat(serializedTabNode.format);\n    node.setStyle(serializedTabNode.style);\n    return node;\n  }\n  setTextContent(_text) {\n    {\n      throw Error(`TabNode does not support setTextContent`);\n    }\n  }\n  setDetail(_detail) {\n    {\n      throw Error(`TabNode does not support setDetail`);\n    }\n  }\n  setMode(_type) {\n    {\n      throw Error(`TabNode does not support setMode`);\n    }\n  }\n  canInsertTextBefore() {\n    return false;\n  }\n  canInsertTextAfter() {\n    return false;\n  }\n}\nfunction $createTabNode() {\n  return $applyNodeReplacement(new TabNode());\n}\nfunction $isTabNode(node) {\n  return node instanceof TabNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nclass Point {\n  constructor(key, offset, type) {\n    this._selection = null;\n    this.key = key;\n    this.offset = offset;\n    this.type = type;\n  }\n  is(point) {\n    return this.key === point.key && this.offset === point.offset && this.type === point.type;\n  }\n  isBefore(b) {\n    let aNode = this.getNode();\n    let bNode = b.getNode();\n    const aOffset = this.offset;\n    const bOffset = b.offset;\n    if ($isElementNode(aNode)) {\n      const aNodeDescendant = aNode.getDescendantByIndex(aOffset);\n      aNode = aNodeDescendant != null ? aNodeDescendant : aNode;\n    }\n    if ($isElementNode(bNode)) {\n      const bNodeDescendant = bNode.getDescendantByIndex(bOffset);\n      bNode = bNodeDescendant != null ? bNodeDescendant : bNode;\n    }\n    if (aNode === bNode) {\n      return aOffset < bOffset;\n    }\n    return aNode.isBefore(bNode);\n  }\n  getNode() {\n    const key = this.key;\n    const node = $getNodeByKey(key);\n    if (node === null) {\n      {\n        throw Error(`Point.getNode: node not found`);\n      }\n    }\n    return node;\n  }\n  set(key, offset, type) {\n    const selection = this._selection;\n    const oldKey = this.key;\n    this.key = key;\n    this.offset = offset;\n    this.type = type;\n    if (!isCurrentlyReadOnlyMode()) {\n      if ($getCompositionKey() === oldKey) {\n        $setCompositionKey(key);\n      }\n      if (selection !== null) {\n        selection.setCachedNodes(null);\n        selection.dirty = true;\n      }\n    }\n  }\n}\nfunction $createPoint(key, offset, type) {\n  // @ts-expect-error: intentionally cast as we use a class for perf reasons\n  return new Point(key, offset, type);\n}\nfunction selectPointOnNode(point, node) {\n  let key = node.__key;\n  let offset = point.offset;\n  let type = 'element';\n  if ($isTextNode(node)) {\n    type = 'text';\n    const textContentLength = node.getTextContentSize();\n    if (offset > textContentLength) {\n      offset = textContentLength;\n    }\n  } else if (!$isElementNode(node)) {\n    const nextSibling = node.getNextSibling();\n    if ($isTextNode(nextSibling)) {\n      key = nextSibling.__key;\n      offset = 0;\n      type = 'text';\n    } else {\n      const parentNode = node.getParent();\n      if (parentNode) {\n        key = parentNode.__key;\n        offset = node.getIndexWithinParent() + 1;\n      }\n    }\n  }\n  point.set(key, offset, type);\n}\nfunction $moveSelectionPointToEnd(point, node) {\n  if ($isElementNode(node)) {\n    const lastNode = node.getLastDescendant();\n    if ($isElementNode(lastNode) || $isTextNode(lastNode)) {\n      selectPointOnNode(point, lastNode);\n    } else {\n      selectPointOnNode(point, node);\n    }\n  } else {\n    selectPointOnNode(point, node);\n  }\n}\nfunction $transferStartingElementPointToTextPoint(start, end, format, style) {\n  const element = start.getNode();\n  const placementNode = element.getChildAtIndex(start.offset);\n  const textNode = $createTextNode();\n  const target = $isRootNode(element) ? $createParagraphNode().append(textNode) : textNode;\n  textNode.setFormat(format);\n  textNode.setStyle(style);\n  if (placementNode === null) {\n    element.append(target);\n  } else {\n    placementNode.insertBefore(target);\n  }\n  // Transfer the element point to a text point.\n  if (start.is(end)) {\n    end.set(textNode.__key, 0, 'text');\n  }\n  start.set(textNode.__key, 0, 'text');\n}\nfunction $setPointValues(point, key, offset, type) {\n  point.key = key;\n  point.offset = offset;\n  point.type = type;\n}\nclass NodeSelection {\n  constructor(objects) {\n    this._cachedNodes = null;\n    this._nodes = objects;\n    this.dirty = false;\n  }\n  getCachedNodes() {\n    return this._cachedNodes;\n  }\n  setCachedNodes(nodes) {\n    this._cachedNodes = nodes;\n  }\n  is(selection) {\n    if (!$isNodeSelection(selection)) {\n      return false;\n    }\n    const a = this._nodes;\n    const b = selection._nodes;\n    return a.size === b.size && Array.from(a).every(key => b.has(key));\n  }\n  isCollapsed() {\n    return false;\n  }\n  isBackward() {\n    return false;\n  }\n  getStartEndPoints() {\n    return null;\n  }\n  add(key) {\n    this.dirty = true;\n    this._nodes.add(key);\n    this._cachedNodes = null;\n  }\n  delete(key) {\n    this.dirty = true;\n    this._nodes.delete(key);\n    this._cachedNodes = null;\n  }\n  clear() {\n    this.dirty = true;\n    this._nodes.clear();\n    this._cachedNodes = null;\n  }\n  has(key) {\n    return this._nodes.has(key);\n  }\n  clone() {\n    return new NodeSelection(new Set(this._nodes));\n  }\n  extract() {\n    return this.getNodes();\n  }\n  insertRawText(text) {\n    // Do nothing?\n  }\n  insertText() {\n    // Do nothing?\n  }\n  insertNodes(nodes) {\n    const selectedNodes = this.getNodes();\n    const selectedNodesLength = selectedNodes.length;\n    const lastSelectedNode = selectedNodes[selectedNodesLength - 1];\n    let selectionAtEnd;\n    // Insert nodes\n    if ($isTextNode(lastSelectedNode)) {\n      selectionAtEnd = lastSelectedNode.select();\n    } else {\n      const index = lastSelectedNode.getIndexWithinParent() + 1;\n      selectionAtEnd = lastSelectedNode.getParentOrThrow().select(index, index);\n    }\n    selectionAtEnd.insertNodes(nodes);\n    // Remove selected nodes\n    for (let i = 0; i < selectedNodesLength; i++) {\n      selectedNodes[i].remove();\n    }\n  }\n  getNodes() {\n    const cachedNodes = this._cachedNodes;\n    if (cachedNodes !== null) {\n      return cachedNodes;\n    }\n    const objects = this._nodes;\n    const nodes = [];\n    for (const object of objects) {\n      const node = $getNodeByKey(object);\n      if (node !== null) {\n        nodes.push(node);\n      }\n    }\n    if (!isCurrentlyReadOnlyMode()) {\n      this._cachedNodes = nodes;\n    }\n    return nodes;\n  }\n  getTextContent() {\n    const nodes = this.getNodes();\n    let textContent = '';\n    for (let i = 0; i < nodes.length; i++) {\n      textContent += nodes[i].getTextContent();\n    }\n    return textContent;\n  }\n}\nfunction $isRangeSelection(x) {\n  return x instanceof RangeSelection;\n}\nclass RangeSelection {\n  constructor(anchor, focus, format, style) {\n    this.anchor = anchor;\n    this.focus = focus;\n    anchor._selection = this;\n    focus._selection = this;\n    this._cachedNodes = null;\n    this.format = format;\n    this.style = style;\n    this.dirty = false;\n  }\n  getCachedNodes() {\n    return this._cachedNodes;\n  }\n  setCachedNodes(nodes) {\n    this._cachedNodes = nodes;\n  }\n\n  /**\n   * Used to check if the provided selections is equal to this one by value,\n   * inluding anchor, focus, format, and style properties.\n   * @param selection - the Selection to compare this one to.\n   * @returns true if the Selections are equal, false otherwise.\n   */\n  is(selection) {\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    return this.anchor.is(selection.anchor) && this.focus.is(selection.focus) && this.format === selection.format && this.style === selection.style;\n  }\n\n  /**\n   * Returns whether the Selection is \"collapsed\", meaning the anchor and focus are\n   * the same node and have the same offset.\n   *\n   * @returns true if the Selection is collapsed, false otherwise.\n   */\n  isCollapsed() {\n    return this.anchor.is(this.focus);\n  }\n\n  /**\n   * Gets all the nodes in the Selection. Uses caching to make it generally suitable\n   * for use in hot paths.\n   *\n   * @returns an Array containing all the nodes in the Selection\n   */\n  getNodes() {\n    const cachedNodes = this._cachedNodes;\n    if (cachedNodes !== null) {\n      return cachedNodes;\n    }\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const isBefore = anchor.isBefore(focus);\n    const firstPoint = isBefore ? anchor : focus;\n    const lastPoint = isBefore ? focus : anchor;\n    let firstNode = firstPoint.getNode();\n    let lastNode = lastPoint.getNode();\n    const startOffset = firstPoint.offset;\n    const endOffset = lastPoint.offset;\n    if ($isElementNode(firstNode)) {\n      const firstNodeDescendant = firstNode.getDescendantByIndex(startOffset);\n      firstNode = firstNodeDescendant != null ? firstNodeDescendant : firstNode;\n    }\n    if ($isElementNode(lastNode)) {\n      let lastNodeDescendant = lastNode.getDescendantByIndex(endOffset);\n      // We don't want to over-select, as node selection infers the child before\n      // the last descendant, not including that descendant.\n      if (lastNodeDescendant !== null && lastNodeDescendant !== firstNode && lastNode.getChildAtIndex(endOffset) === lastNodeDescendant) {\n        lastNodeDescendant = lastNodeDescendant.getPreviousSibling();\n      }\n      lastNode = lastNodeDescendant != null ? lastNodeDescendant : lastNode;\n    }\n    let nodes;\n    if (firstNode.is(lastNode)) {\n      if ($isElementNode(firstNode) && firstNode.getChildrenSize() > 0) {\n        nodes = [];\n      } else {\n        nodes = [firstNode];\n      }\n    } else {\n      nodes = firstNode.getNodesBetween(lastNode);\n    }\n    if (!isCurrentlyReadOnlyMode()) {\n      this._cachedNodes = nodes;\n    }\n    return nodes;\n  }\n\n  /**\n   * Sets this Selection to be of type \"text\" at the provided anchor and focus values.\n   *\n   * @param anchorNode - the anchor node to set on the Selection\n   * @param anchorOffset - the offset to set on the Selection\n   * @param focusNode - the focus node to set on the Selection\n   * @param focusOffset - the focus offset to set on the Selection\n   */\n  setTextNodeRange(anchorNode, anchorOffset, focusNode, focusOffset) {\n    $setPointValues(this.anchor, anchorNode.__key, anchorOffset, 'text');\n    $setPointValues(this.focus, focusNode.__key, focusOffset, 'text');\n    this._cachedNodes = null;\n    this.dirty = true;\n  }\n\n  /**\n   * Gets the (plain) text content of all the nodes in the selection.\n   *\n   * @returns a string representing the text content of all the nodes in the Selection\n   */\n  getTextContent() {\n    const nodes = this.getNodes();\n    if (nodes.length === 0) {\n      return '';\n    }\n    const firstNode = nodes[0];\n    const lastNode = nodes[nodes.length - 1];\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const isBefore = anchor.isBefore(focus);\n    const [anchorOffset, focusOffset] = $getCharacterOffsets(this);\n    let textContent = '';\n    let prevWasElement = true;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if ($isElementNode(node) && !node.isInline()) {\n        if (!prevWasElement) {\n          textContent += '\\n';\n        }\n        if (node.isEmpty()) {\n          prevWasElement = false;\n        } else {\n          prevWasElement = true;\n        }\n      } else {\n        prevWasElement = false;\n        if ($isTextNode(node)) {\n          let text = node.getTextContent();\n          if (node === firstNode) {\n            if (node === lastNode) {\n              if (anchor.type !== 'element' || focus.type !== 'element' || focus.offset === anchor.offset) {\n                text = anchorOffset < focusOffset ? text.slice(anchorOffset, focusOffset) : text.slice(focusOffset, anchorOffset);\n              }\n            } else {\n              text = isBefore ? text.slice(anchorOffset) : text.slice(focusOffset);\n            }\n          } else if (node === lastNode) {\n            text = isBefore ? text.slice(0, focusOffset) : text.slice(0, anchorOffset);\n          }\n          textContent += text;\n        } else if (($isDecoratorNode(node) || $isLineBreakNode(node)) && (node !== lastNode || !this.isCollapsed())) {\n          textContent += node.getTextContent();\n        }\n      }\n    }\n    return textContent;\n  }\n\n  /**\n   * Attempts to map a DOM selection range onto this Lexical Selection,\n   * setting the anchor, focus, and type accordingly\n   *\n   * @param range a DOM Selection range conforming to the StaticRange interface.\n   */\n  applyDOMRange(range) {\n    const editor = getActiveEditor();\n    const currentEditorState = editor.getEditorState();\n    const lastSelection = currentEditorState._selection;\n    const resolvedSelectionPoints = $internalResolveSelectionPoints(range.startContainer, range.startOffset, range.endContainer, range.endOffset, editor, lastSelection);\n    if (resolvedSelectionPoints === null) {\n      return;\n    }\n    const [anchorPoint, focusPoint] = resolvedSelectionPoints;\n    $setPointValues(this.anchor, anchorPoint.key, anchorPoint.offset, anchorPoint.type);\n    $setPointValues(this.focus, focusPoint.key, focusPoint.offset, focusPoint.type);\n    this._cachedNodes = null;\n  }\n\n  /**\n   * Creates a new RangeSelection, copying over all the property values from this one.\n   *\n   * @returns a new RangeSelection with the same property values as this one.\n   */\n  clone() {\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const selection = new RangeSelection($createPoint(anchor.key, anchor.offset, anchor.type), $createPoint(focus.key, focus.offset, focus.type), this.format, this.style);\n    return selection;\n  }\n\n  /**\n   * Toggles the provided format on all the TextNodes in the Selection.\n   *\n   * @param format a string TextFormatType to toggle on the TextNodes in the selection\n   */\n  toggleFormat(format) {\n    this.format = toggleTextFormatType(this.format, format, null);\n    this.dirty = true;\n  }\n\n  /**\n   * Sets the value of the style property on the Selection\n   *\n   * @param style - the style to set at the value of the style property.\n   */\n  setStyle(style) {\n    this.style = style;\n    this.dirty = true;\n  }\n\n  /**\n   * Returns whether the provided TextFormatType is present on the Selection. This will be true if any node in the Selection\n   * has the specified format.\n   *\n   * @param type the TextFormatType to check for.\n   * @returns true if the provided format is currently toggled on on the Selection, false otherwise.\n   */\n  hasFormat(type) {\n    const formatFlag = TEXT_TYPE_TO_FORMAT[type];\n    return (this.format & formatFlag) !== 0;\n  }\n\n  /**\n   * Attempts to insert the provided text into the EditorState at the current Selection.\n   * converts tabs, newlines, and carriage returns into LexicalNodes.\n   *\n   * @param text the text to insert into the Selection\n   */\n  insertRawText(text) {\n    const parts = text.split(/(\\r?\\n|\\t)/);\n    const nodes = [];\n    const length = parts.length;\n    for (let i = 0; i < length; i++) {\n      const part = parts[i];\n      if (part === '\\n' || part === '\\r\\n') {\n        nodes.push($createLineBreakNode());\n      } else if (part === '\\t') {\n        nodes.push($createTabNode());\n      } else {\n        nodes.push($createTextNode(part));\n      }\n    }\n    this.insertNodes(nodes);\n  }\n\n  /**\n   * Insert the provided text into the EditorState at the current Selection.\n   *\n   * @param text the text to insert into the Selection\n   */\n  insertText(text) {\n    // Now that \"removeText\" has been improved and does not depend on\n    // insertText, insertText can be greatly simplified. The next\n    // commented version is a WIP (about 5 tests fail).\n    //\n    // this.removeText();\n    // if (text === '') {\n    //   return;\n    // }\n    // const anchorNode = this.anchor.getNode();\n    // const textNode = $createTextNode(text);\n    // textNode.setFormat(this.format);\n    // textNode.setStyle(this.style);\n    // if ($isTextNode(anchorNode)) {\n    //   const parent = anchorNode.getParentOrThrow();\n    //   if (this.anchor.offset === 0) {\n    //     if (parent.isInline() && !anchorNode.__prev) {\n    //       parent.insertBefore(textNode);\n    //     } else {\n    //       anchorNode.insertBefore(textNode);\n    //     }\n    //   } else if (this.anchor.offset === anchorNode.getTextContentSize()) {\n    //     if (parent.isInline() && !anchorNode.__next) {\n    //       parent.insertAfter(textNode);\n    //     } else {\n    //       anchorNode.insertAfter(textNode);\n    //     }\n    //   } else {\n    //     const [before] = anchorNode.splitText(this.anchor.offset);\n    //     before.insertAfter(textNode);\n    //   }\n    // } else {\n    //   anchorNode.splice(this.anchor.offset, 0, [textNode]);\n    // }\n    // const nodeToSelect = textNode.isAttached() ? textNode : anchorNode;\n    // nodeToSelect.selectEnd();\n    // // When composing, we need to adjust the anchor offset so that\n    // // we correctly replace that right range.\n    // if (\n    //   textNode.isComposing() &&\n    //   this.anchor.type === 'text' &&\n    //   anchorNode.getTextContent() !== ''\n    // ) {\n    //   this.anchor.offset -= text.length;\n    // }\n\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const format = this.format;\n    const style = this.style;\n    let firstPoint = anchor;\n    let endPoint = focus;\n    if (!this.isCollapsed() && focus.isBefore(anchor)) {\n      firstPoint = focus;\n      endPoint = anchor;\n    }\n    if (firstPoint.type === 'element') {\n      $transferStartingElementPointToTextPoint(firstPoint, endPoint, format, style);\n    }\n    const startOffset = firstPoint.offset;\n    let endOffset = endPoint.offset;\n    const selectedNodes = this.getNodes();\n    const selectedNodesLength = selectedNodes.length;\n    let firstNode = selectedNodes[0];\n    if (!$isTextNode(firstNode)) {\n      {\n        throw Error(`insertText: first node is not a text node`);\n      }\n    }\n    const firstNodeText = firstNode.getTextContent();\n    const firstNodeTextLength = firstNodeText.length;\n    const firstNodeParent = firstNode.getParentOrThrow();\n    const lastIndex = selectedNodesLength - 1;\n    let lastNode = selectedNodes[lastIndex];\n    if (selectedNodesLength === 1 && endPoint.type === 'element') {\n      endOffset = firstNodeTextLength;\n      endPoint.set(firstPoint.key, endOffset, 'text');\n    }\n    if (this.isCollapsed() && startOffset === firstNodeTextLength && (firstNode.isSegmented() || firstNode.isToken() || !firstNode.canInsertTextAfter() || !firstNodeParent.canInsertTextAfter() && firstNode.getNextSibling() === null)) {\n      let nextSibling = firstNode.getNextSibling();\n      if (!$isTextNode(nextSibling) || !nextSibling.canInsertTextBefore() || $isTokenOrSegmented(nextSibling)) {\n        nextSibling = $createTextNode();\n        nextSibling.setFormat(format);\n        nextSibling.setStyle(style);\n        if (!firstNodeParent.canInsertTextAfter()) {\n          firstNodeParent.insertAfter(nextSibling);\n        } else {\n          firstNode.insertAfter(nextSibling);\n        }\n      }\n      nextSibling.select(0, 0);\n      firstNode = nextSibling;\n      if (text !== '') {\n        this.insertText(text);\n        return;\n      }\n    } else if (this.isCollapsed() && startOffset === 0 && (firstNode.isSegmented() || firstNode.isToken() || !firstNode.canInsertTextBefore() || !firstNodeParent.canInsertTextBefore() && firstNode.getPreviousSibling() === null)) {\n      let prevSibling = firstNode.getPreviousSibling();\n      if (!$isTextNode(prevSibling) || $isTokenOrSegmented(prevSibling)) {\n        prevSibling = $createTextNode();\n        prevSibling.setFormat(format);\n        if (!firstNodeParent.canInsertTextBefore()) {\n          firstNodeParent.insertBefore(prevSibling);\n        } else {\n          firstNode.insertBefore(prevSibling);\n        }\n      }\n      prevSibling.select();\n      firstNode = prevSibling;\n      if (text !== '') {\n        this.insertText(text);\n        return;\n      }\n    } else if (firstNode.isSegmented() && startOffset !== firstNodeTextLength) {\n      const textNode = $createTextNode(firstNode.getTextContent());\n      textNode.setFormat(format);\n      firstNode.replace(textNode);\n      firstNode = textNode;\n    } else if (!this.isCollapsed() && text !== '') {\n      // When the firstNode or lastNode parents are elements that\n      // do not allow text to be inserted before or after, we first\n      // clear the content. Then we normalize selection, then insert\n      // the new content.\n      const lastNodeParent = lastNode.getParent();\n      if (!firstNodeParent.canInsertTextBefore() || !firstNodeParent.canInsertTextAfter() || $isElementNode(lastNodeParent) && (!lastNodeParent.canInsertTextBefore() || !lastNodeParent.canInsertTextAfter())) {\n        this.insertText('');\n        $normalizeSelectionPointsForBoundaries(this.anchor, this.focus, null);\n        this.insertText(text);\n        return;\n      }\n    }\n    if (selectedNodesLength === 1) {\n      if (firstNode.isToken()) {\n        const textNode = $createTextNode(text);\n        textNode.select();\n        firstNode.replace(textNode);\n        return;\n      }\n      const firstNodeFormat = firstNode.getFormat();\n      const firstNodeStyle = firstNode.getStyle();\n      if (startOffset === endOffset && (firstNodeFormat !== format || firstNodeStyle !== style)) {\n        if (firstNode.getTextContent() === '') {\n          firstNode.setFormat(format);\n          firstNode.setStyle(style);\n        } else {\n          const textNode = $createTextNode(text);\n          textNode.setFormat(format);\n          textNode.setStyle(style);\n          textNode.select();\n          if (startOffset === 0) {\n            firstNode.insertBefore(textNode, false);\n          } else {\n            const [targetNode] = firstNode.splitText(startOffset);\n            targetNode.insertAfter(textNode, false);\n          }\n          // When composing, we need to adjust the anchor offset so that\n          // we correctly replace that right range.\n          if (textNode.isComposing() && this.anchor.type === 'text') {\n            this.anchor.offset -= text.length;\n          }\n          return;\n        }\n      } else if ($isTabNode(firstNode)) {\n        // We don't need to check for delCount because there is only the entire selected node case\n        // that can hit here for content size 1 and with canInsertTextBeforeAfter false\n        const textNode = $createTextNode(text);\n        textNode.setFormat(format);\n        textNode.setStyle(style);\n        textNode.select();\n        firstNode.replace(textNode);\n        return;\n      }\n      const delCount = endOffset - startOffset;\n      firstNode = firstNode.spliceText(startOffset, delCount, text, true);\n      if (firstNode.getTextContent() === '') {\n        firstNode.remove();\n      } else if (this.anchor.type === 'text') {\n        if (firstNode.isComposing()) {\n          // When composing, we need to adjust the anchor offset so that\n          // we correctly replace that right range.\n          this.anchor.offset -= text.length;\n        } else {\n          this.format = firstNodeFormat;\n          this.style = firstNodeStyle;\n        }\n      }\n    } else {\n      const markedNodeKeysForKeep = new Set([...firstNode.getParentKeys(), ...lastNode.getParentKeys()]);\n\n      // We have to get the parent elements before the next section,\n      // as in that section we might mutate the lastNode.\n      const firstElement = $isElementNode(firstNode) ? firstNode : firstNode.getParentOrThrow();\n      let lastElement = $isElementNode(lastNode) ? lastNode : lastNode.getParentOrThrow();\n      let lastElementChild = lastNode;\n\n      // If the last element is inline, we should instead look at getting\n      // the nodes of its parent, rather than itself. This behavior will\n      // then better match how text node insertions work. We will need to\n      // also update the last element's child accordingly as we do this.\n      if (!firstElement.is(lastElement) && lastElement.isInline()) {\n        // Keep traversing till we have a non-inline element parent.\n        do {\n          lastElementChild = lastElement;\n          lastElement = lastElement.getParentOrThrow();\n        } while (lastElement.isInline());\n      }\n\n      // Handle mutations to the last node.\n      if (endPoint.type === 'text' && (endOffset !== 0 || lastNode.getTextContent() === '') || endPoint.type === 'element' && lastNode.getIndexWithinParent() < endOffset) {\n        if ($isTextNode(lastNode) && !lastNode.isToken() && endOffset !== lastNode.getTextContentSize()) {\n          if (lastNode.isSegmented()) {\n            const textNode = $createTextNode(lastNode.getTextContent());\n            lastNode.replace(textNode);\n            lastNode = textNode;\n          }\n          // root node selections only select whole nodes, so no text splice is necessary\n          if (!$isRootNode(endPoint.getNode()) && endPoint.type === 'text') {\n            lastNode = lastNode.spliceText(0, endOffset, '');\n          }\n          markedNodeKeysForKeep.add(lastNode.__key);\n        } else {\n          const lastNodeParent = lastNode.getParentOrThrow();\n          if (!lastNodeParent.canBeEmpty() && lastNodeParent.getChildrenSize() === 1) {\n            lastNodeParent.remove();\n          } else {\n            lastNode.remove();\n          }\n        }\n      } else {\n        markedNodeKeysForKeep.add(lastNode.__key);\n      }\n\n      // Either move the remaining nodes of the last parent to after\n      // the first child, or remove them entirely. If the last parent\n      // is the same as the first parent, this logic also works.\n      const lastNodeChildren = lastElement.getChildren();\n      const selectedNodesSet = new Set(selectedNodes);\n      const firstAndLastElementsAreEqual = firstElement.is(lastElement);\n\n      // We choose a target to insert all nodes after. In the case of having\n      // and inline starting parent element with a starting node that has no\n      // siblings, we should insert after the starting parent element, otherwise\n      // we will incorrectly merge into the starting parent element.\n      // TODO: should we keep on traversing parents if we're inside another\n      // nested inline element?\n      const insertionTarget = firstElement.isInline() && firstNode.getNextSibling() === null ? firstElement : firstNode;\n      for (let i = lastNodeChildren.length - 1; i >= 0; i--) {\n        const lastNodeChild = lastNodeChildren[i];\n        if (lastNodeChild.is(firstNode) || $isElementNode(lastNodeChild) && lastNodeChild.isParentOf(firstNode)) {\n          break;\n        }\n        if (lastNodeChild.isAttached()) {\n          if (!selectedNodesSet.has(lastNodeChild) || lastNodeChild.is(lastElementChild)) {\n            if (!firstAndLastElementsAreEqual) {\n              insertionTarget.insertAfter(lastNodeChild, false);\n            }\n          } else {\n            lastNodeChild.remove();\n          }\n        }\n      }\n      if (!firstAndLastElementsAreEqual) {\n        // Check if we have already moved out all the nodes of the\n        // last parent, and if so, traverse the parent tree and mark\n        // them all as being able to deleted too.\n        let parent = lastElement;\n        let lastRemovedParent = null;\n        while (parent !== null) {\n          const children = parent.getChildren();\n          const childrenLength = children.length;\n          if (childrenLength === 0 || children[childrenLength - 1].is(lastRemovedParent)) {\n            markedNodeKeysForKeep.delete(parent.__key);\n            lastRemovedParent = parent;\n          }\n          parent = parent.getParent();\n        }\n      }\n\n      // Ensure we do splicing after moving of nodes, as splicing\n      // can have side-effects (in the case of hashtags).\n      if (!firstNode.isToken()) {\n        firstNode = firstNode.spliceText(startOffset, firstNodeTextLength - startOffset, text, true);\n        if (firstNode.getTextContent() === '') {\n          firstNode.remove();\n        } else if (firstNode.isComposing() && this.anchor.type === 'text') {\n          // When composing, we need to adjust the anchor offset so that\n          // we correctly replace that right range.\n          this.anchor.offset -= text.length;\n        }\n      } else if (startOffset === firstNodeTextLength) {\n        firstNode.select();\n      } else {\n        const textNode = $createTextNode(text);\n        textNode.select();\n        firstNode.replace(textNode);\n      }\n\n      // Remove all selected nodes that haven't already been removed.\n      for (let i = 1; i < selectedNodesLength; i++) {\n        const selectedNode = selectedNodes[i];\n        const key = selectedNode.__key;\n        if (!markedNodeKeysForKeep.has(key)) {\n          selectedNode.remove();\n        }\n      }\n    }\n  }\n\n  /**\n   * Removes the text in the Selection, adjusting the EditorState accordingly.\n   */\n  removeText() {\n    if (this.isCollapsed()) {\n      return;\n    }\n    const {\n      anchor,\n      focus\n    } = this;\n    const selectedNodes = this.getNodes();\n    const firstPoint = this.isBackward() ? focus : anchor;\n    const lastPoint = this.isBackward() ? anchor : focus;\n    let firstNode = firstPoint.getNode();\n    let lastNode = lastPoint.getNode();\n    const firstBlock = $getAncestor(firstNode, INTERNAL_$isBlock);\n    const lastBlock = $getAncestor(lastNode, INTERNAL_$isBlock);\n    // If a token is partially selected then move the selection to cover the whole selection\n    if ($isTextNode(firstNode) && firstNode.isToken() && firstPoint.offset < firstNode.getTextContentSize()) {\n      firstPoint.offset = 0;\n    }\n    if (lastPoint.offset > 0 && $isTextNode(lastNode) && lastNode.isToken()) {\n      lastPoint.offset = lastNode.getTextContentSize();\n    }\n    selectedNodes.forEach(node => {\n      if (!$hasAncestor(firstNode, node) && !$hasAncestor(lastNode, node) && node.getKey() !== firstNode.getKey() && node.getKey() !== lastNode.getKey()) {\n        node.remove();\n      }\n    });\n    const fixText = (node, del) => {\n      if (node.getTextContent() === '') {\n        node.remove();\n      } else if (del !== 0 && $isTokenOrSegmented(node)) {\n        const textNode = $createTextNode(node.getTextContent());\n        textNode.setFormat(node.getFormat());\n        textNode.setStyle(node.getStyle());\n        return node.replace(textNode);\n      }\n    };\n    if (firstNode === lastNode && $isTextNode(firstNode)) {\n      const del = Math.abs(focus.offset - anchor.offset);\n      firstNode.spliceText(firstPoint.offset, del, '', true);\n      fixText(firstNode, del);\n      return;\n    }\n    if ($isTextNode(firstNode)) {\n      const del = firstNode.getTextContentSize() - firstPoint.offset;\n      firstNode.spliceText(firstPoint.offset, del, '');\n      firstNode = fixText(firstNode, del) || firstNode;\n    }\n    if ($isTextNode(lastNode)) {\n      lastNode.spliceText(0, lastPoint.offset, '');\n      lastNode = fixText(lastNode, lastPoint.offset) || lastNode;\n    }\n    if (firstNode.isAttached() && $isTextNode(firstNode)) {\n      firstNode.selectEnd();\n    } else if (lastNode.isAttached() && $isTextNode(lastNode)) {\n      lastNode.selectStart();\n    }\n\n    // Merge blocks\n    const bothElem = $isElementNode(firstBlock) && $isElementNode(lastBlock);\n    if (bothElem && firstBlock !== lastBlock) {\n      firstBlock.append(...lastBlock.getChildren());\n      lastBlock.remove();\n      lastPoint.set(firstPoint.key, firstPoint.offset, firstPoint.type);\n    }\n  }\n\n  // TO-DO: Migrate this method to the new utility function $forEachSelectedTextNode (share similar logic)\n  /**\n   * Applies the provided format to the TextNodes in the Selection, splitting or\n   * merging nodes as necessary.\n   *\n   * @param formatType the format type to apply to the nodes in the Selection.\n   * @param alignWithFormat a 32-bit integer representing formatting flags to align with.\n   */\n  formatText(formatType, alignWithFormat = null) {\n    if (this.isCollapsed()) {\n      this.toggleFormat(formatType);\n      // When changing format, we should stop composition\n      $setCompositionKey(null);\n      return;\n    }\n    const selectedNodes = this.getNodes();\n    const selectedTextNodes = [];\n    for (const selectedNode of selectedNodes) {\n      if ($isTextNode(selectedNode)) {\n        selectedTextNodes.push(selectedNode);\n      }\n    }\n    const applyFormatToParagraphs = alignWith => {\n      selectedNodes.forEach(node => {\n        if ($isParagraphNode(node)) {\n          const newFormat = node.getFormatFlags(formatType, alignWith);\n          node.setTextFormat(newFormat);\n        }\n      });\n    };\n    const selectedTextNodesLength = selectedTextNodes.length;\n    if (selectedTextNodesLength === 0) {\n      this.toggleFormat(formatType);\n      // When changing format, we should stop composition\n      $setCompositionKey(null);\n      applyFormatToParagraphs(alignWithFormat);\n      return;\n    }\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const isBackward = this.isBackward();\n    const startPoint = isBackward ? focus : anchor;\n    const endPoint = isBackward ? anchor : focus;\n    let firstIndex = 0;\n    let firstNode = selectedTextNodes[0];\n    let startOffset = startPoint.type === 'element' ? 0 : startPoint.offset;\n\n    // In case selection started at the end of text node use next text node\n    if (startPoint.type === 'text' && startOffset === firstNode.getTextContentSize()) {\n      firstIndex = 1;\n      firstNode = selectedTextNodes[1];\n      startOffset = 0;\n    }\n    if (firstNode == null) {\n      return;\n    }\n    const firstNextFormat = firstNode.getFormatFlags(formatType, alignWithFormat);\n    applyFormatToParagraphs(firstNextFormat);\n    const lastIndex = selectedTextNodesLength - 1;\n    let lastNode = selectedTextNodes[lastIndex];\n    const endOffset = endPoint.type === 'text' ? endPoint.offset : lastNode.getTextContentSize();\n\n    // Single node selected\n    if (firstNode.is(lastNode)) {\n      // No actual text is selected, so do nothing.\n      if (startOffset === endOffset) {\n        return;\n      }\n      // The entire node is selected or it is token, so just format it\n      if ($isTokenOrSegmented(firstNode) || startOffset === 0 && endOffset === firstNode.getTextContentSize()) {\n        firstNode.setFormat(firstNextFormat);\n      } else {\n        // Node is partially selected, so split it into two nodes\n        // add style the selected one.\n        const splitNodes = firstNode.splitText(startOffset, endOffset);\n        const replacement = startOffset === 0 ? splitNodes[0] : splitNodes[1];\n        replacement.setFormat(firstNextFormat);\n\n        // Update selection only if starts/ends on text node\n        if (startPoint.type === 'text') {\n          startPoint.set(replacement.__key, 0, 'text');\n        }\n        if (endPoint.type === 'text') {\n          endPoint.set(replacement.__key, endOffset - startOffset, 'text');\n        }\n      }\n      this.format = firstNextFormat;\n      return;\n    }\n    // Multiple nodes selected\n    // The entire first node isn't selected, so split it\n    if (startOffset !== 0 && !$isTokenOrSegmented(firstNode)) {\n      [, firstNode] = firstNode.splitText(startOffset);\n      startOffset = 0;\n    }\n    firstNode.setFormat(firstNextFormat);\n    const lastNextFormat = lastNode.getFormatFlags(formatType, firstNextFormat);\n    // If the offset is 0, it means no actual characters are selected,\n    // so we skip formatting the last node altogether.\n    if (endOffset > 0) {\n      if (endOffset !== lastNode.getTextContentSize() && !$isTokenOrSegmented(lastNode)) {\n        [lastNode] = lastNode.splitText(endOffset);\n      }\n      lastNode.setFormat(lastNextFormat);\n    }\n\n    // Process all text nodes in between\n    for (let i = firstIndex + 1; i < lastIndex; i++) {\n      const textNode = selectedTextNodes[i];\n      const nextFormat = textNode.getFormatFlags(formatType, lastNextFormat);\n      textNode.setFormat(nextFormat);\n    }\n\n    // Update selection only if starts/ends on text node\n    if (startPoint.type === 'text') {\n      startPoint.set(firstNode.__key, startOffset, 'text');\n    }\n    if (endPoint.type === 'text') {\n      endPoint.set(lastNode.__key, endOffset, 'text');\n    }\n    this.format = firstNextFormat | lastNextFormat;\n  }\n\n  /**\n   * Attempts to \"intelligently\" insert an arbitrary list of Lexical nodes into the EditorState at the\n   * current Selection according to a set of heuristics that determine how surrounding nodes\n   * should be changed, replaced, or moved to accommodate the incoming ones.\n   *\n   * @param nodes - the nodes to insert\n   */\n  insertNodes(nodes) {\n    if (nodes.length === 0) {\n      return;\n    }\n    if (this.anchor.key === 'root') {\n      this.insertParagraph();\n      const selection = $getSelection();\n      if (!$isRangeSelection(selection)) {\n        throw Error(`Expected RangeSelection after insertParagraph`);\n      }\n      return selection.insertNodes(nodes);\n    }\n    const firstPoint = this.isBackward() ? this.focus : this.anchor;\n    const firstNode = firstPoint.getNode();\n    const firstBlock = $getAncestor(firstNode, INTERNAL_$isBlock);\n    const last = nodes[nodes.length - 1];\n\n    // CASE 1: insert inside a code block\n    if ($isElementNode(firstBlock) && '__language' in firstBlock) {\n      if ('__language' in nodes[0]) {\n        this.insertText(nodes[0].getTextContent());\n      } else {\n        const index = $removeTextAndSplitBlock(this);\n        firstBlock.splice(index, 0, nodes);\n        last.selectEnd();\n      }\n      return;\n    }\n\n    // CASE 2: All elements of the array are inline\n    const notInline = node => ($isElementNode(node) || $isDecoratorNode(node)) && !node.isInline();\n    if (!nodes.some(notInline)) {\n      if (!$isElementNode(firstBlock)) {\n        throw Error(`Expected node ${firstNode.constructor.name} of type ${firstNode.getType()} to have a block ElementNode ancestor`);\n      }\n      const index = $removeTextAndSplitBlock(this);\n      firstBlock.splice(index, 0, nodes);\n      last.selectEnd();\n      return;\n    }\n\n    // CASE 3: At least 1 element of the array is not inline\n    const blocksParent = $wrapInlineNodes(nodes);\n    const nodeToSelect = blocksParent.getLastDescendant();\n    const blocks = blocksParent.getChildren();\n    const isMergeable = node => $isElementNode(node) && INTERNAL_$isBlock(node) && !node.isEmpty() && $isElementNode(firstBlock) && (!firstBlock.isEmpty() || firstBlock.canMergeWhenEmpty());\n    const shouldInsert = !$isElementNode(firstBlock) || !firstBlock.isEmpty();\n    const insertedParagraph = shouldInsert ? this.insertParagraph() : null;\n    const lastToInsert = blocks[blocks.length - 1];\n    let firstToInsert = blocks[0];\n    if (isMergeable(firstToInsert)) {\n      if (!$isElementNode(firstBlock)) {\n        throw Error(`Expected node ${firstNode.constructor.name} of type ${firstNode.getType()} to have a block ElementNode ancestor`);\n      }\n      firstBlock.append(...firstToInsert.getChildren());\n      firstToInsert = blocks[1];\n    }\n    if (firstToInsert) {\n      if (!(firstBlock !== null)) {\n        throw Error(`Expected node ${firstNode.constructor.name} of type ${firstNode.getType()} to have a block ancestor`);\n      }\n      insertRangeAfter(firstBlock, firstToInsert);\n    }\n    const lastInsertedBlock = $getAncestor(nodeToSelect, INTERNAL_$isBlock);\n    if (insertedParagraph && $isElementNode(lastInsertedBlock) && (insertedParagraph.canMergeWhenEmpty() || INTERNAL_$isBlock(lastToInsert))) {\n      lastInsertedBlock.append(...insertedParagraph.getChildren());\n      insertedParagraph.remove();\n    }\n    if ($isElementNode(firstBlock) && firstBlock.isEmpty()) {\n      firstBlock.remove();\n    }\n    nodeToSelect.selectEnd();\n\n    // To understand this take a look at the test \"can wrap post-linebreak nodes into new element\"\n    const lastChild = $isElementNode(firstBlock) ? firstBlock.getLastChild() : null;\n    if ($isLineBreakNode(lastChild) && lastInsertedBlock !== firstBlock) {\n      lastChild.remove();\n    }\n  }\n\n  /**\n   * Inserts a new ParagraphNode into the EditorState at the current Selection\n   *\n   * @returns the newly inserted node.\n   */\n  insertParagraph() {\n    if (this.anchor.key === 'root') {\n      const paragraph = $createParagraphNode();\n      $getRoot().splice(this.anchor.offset, 0, [paragraph]);\n      paragraph.select();\n      return paragraph;\n    }\n    const index = $removeTextAndSplitBlock(this);\n    const block = $getAncestor(this.anchor.getNode(), INTERNAL_$isBlock);\n    if (!$isElementNode(block)) {\n      throw Error(`Expected ancestor to be a block ElementNode`);\n    }\n    const firstToAppend = block.getChildAtIndex(index);\n    const nodesToInsert = firstToAppend ? [firstToAppend, ...firstToAppend.getNextSiblings()] : [];\n    const newBlock = block.insertNewAfter(this, false);\n    if (newBlock) {\n      newBlock.append(...nodesToInsert);\n      newBlock.selectStart();\n      return newBlock;\n    }\n    // if newBlock is null, it means that block is of type CodeNode.\n    return null;\n  }\n\n  /**\n   * Inserts a logical linebreak, which may be a new LineBreakNode or a new ParagraphNode, into the EditorState at the\n   * current Selection.\n   */\n  insertLineBreak(selectStart) {\n    const lineBreak = $createLineBreakNode();\n    this.insertNodes([lineBreak]);\n    // this is used in MacOS with the command 'ctrl-O' (openLineBreak)\n    if (selectStart) {\n      const parent = lineBreak.getParentOrThrow();\n      const index = lineBreak.getIndexWithinParent();\n      parent.select(index, index);\n    }\n  }\n\n  /**\n   * Extracts the nodes in the Selection, splitting nodes where necessary\n   * to get offset-level precision.\n   *\n   * @returns The nodes in the Selection\n   */\n  extract() {\n    const selectedNodes = this.getNodes();\n    const selectedNodesLength = selectedNodes.length;\n    const lastIndex = selectedNodesLength - 1;\n    const anchor = this.anchor;\n    const focus = this.focus;\n    let firstNode = selectedNodes[0];\n    let lastNode = selectedNodes[lastIndex];\n    const [anchorOffset, focusOffset] = $getCharacterOffsets(this);\n    if (selectedNodesLength === 0) {\n      return [];\n    } else if (selectedNodesLength === 1) {\n      if ($isTextNode(firstNode) && !this.isCollapsed()) {\n        const startOffset = anchorOffset > focusOffset ? focusOffset : anchorOffset;\n        const endOffset = anchorOffset > focusOffset ? anchorOffset : focusOffset;\n        const splitNodes = firstNode.splitText(startOffset, endOffset);\n        const node = startOffset === 0 ? splitNodes[0] : splitNodes[1];\n        return node != null ? [node] : [];\n      }\n      return [firstNode];\n    }\n    const isBefore = anchor.isBefore(focus);\n    if ($isTextNode(firstNode)) {\n      const startOffset = isBefore ? anchorOffset : focusOffset;\n      if (startOffset === firstNode.getTextContentSize()) {\n        selectedNodes.shift();\n      } else if (startOffset !== 0) {\n        [, firstNode] = firstNode.splitText(startOffset);\n        selectedNodes[0] = firstNode;\n      }\n    }\n    if ($isTextNode(lastNode)) {\n      const lastNodeText = lastNode.getTextContent();\n      const lastNodeTextLength = lastNodeText.length;\n      const endOffset = isBefore ? focusOffset : anchorOffset;\n      if (endOffset === 0) {\n        selectedNodes.pop();\n      } else if (endOffset !== lastNodeTextLength) {\n        [lastNode] = lastNode.splitText(endOffset);\n        selectedNodes[lastIndex] = lastNode;\n      }\n    }\n    return selectedNodes;\n  }\n\n  /**\n   * Modifies the Selection according to the parameters and a set of heuristics that account for\n   * various node types. Can be used to safely move or extend selection by one logical \"unit\" without\n   * dealing explicitly with all the possible node types.\n   *\n   * @param alter the type of modification to perform\n   * @param isBackward whether or not selection is backwards\n   * @param granularity the granularity at which to apply the modification\n   */\n  modify(alter, isBackward, granularity) {\n    const focus = this.focus;\n    const anchor = this.anchor;\n    const collapse = alter === 'move';\n\n    // Handle the selection movement around decorators.\n    const possibleNode = $getAdjacentNode(focus, isBackward);\n    if ($isDecoratorNode(possibleNode) && !possibleNode.isIsolated()) {\n      // Make it possible to move selection from range selection to\n      // node selection on the node.\n      if (collapse && possibleNode.isKeyboardSelectable()) {\n        const nodeSelection = $createNodeSelection();\n        nodeSelection.add(possibleNode.__key);\n        $setSelection(nodeSelection);\n        return;\n      }\n      const sibling = isBackward ? possibleNode.getPreviousSibling() : possibleNode.getNextSibling();\n      if (!$isTextNode(sibling)) {\n        const parent = possibleNode.getParentOrThrow();\n        let offset;\n        let elementKey;\n        if ($isElementNode(sibling)) {\n          elementKey = sibling.__key;\n          offset = isBackward ? sibling.getChildrenSize() : 0;\n        } else {\n          offset = possibleNode.getIndexWithinParent();\n          elementKey = parent.__key;\n          if (!isBackward) {\n            offset++;\n          }\n        }\n        focus.set(elementKey, offset, 'element');\n        if (collapse) {\n          anchor.set(elementKey, offset, 'element');\n        }\n        return;\n      } else {\n        const siblingKey = sibling.__key;\n        const offset = isBackward ? sibling.getTextContent().length : 0;\n        focus.set(siblingKey, offset, 'text');\n        if (collapse) {\n          anchor.set(siblingKey, offset, 'text');\n        }\n        return;\n      }\n    }\n    const editor = getActiveEditor();\n    const domSelection = getDOMSelection(editor._window);\n    if (!domSelection) {\n      return;\n    }\n    const blockCursorElement = editor._blockCursorElement;\n    const rootElement = editor._rootElement;\n    // Remove the block cursor element if it exists. This will ensure selection\n    // works as intended. If we leave it in the DOM all sorts of strange bugs\n    // occur. :/\n    if (rootElement !== null && blockCursorElement !== null && $isElementNode(possibleNode) && !possibleNode.isInline() && !possibleNode.canBeEmpty()) {\n      removeDOMBlockCursorElement(blockCursorElement, editor, rootElement);\n    }\n    // We use the DOM selection.modify API here to \"tell\" us what the selection\n    // will be. We then use it to update the Lexical selection accordingly. This\n    // is much more reliable than waiting for a beforeinput and using the ranges\n    // from getTargetRanges(), and is also better than trying to do it ourselves\n    // using Intl.Segmenter or other workarounds that struggle with word segments\n    // and line segments (especially with word wrapping and non-Roman languages).\n    moveNativeSelection(domSelection, alter, isBackward ? 'backward' : 'forward', granularity);\n    // Guard against no ranges\n    if (domSelection.rangeCount > 0) {\n      const range = domSelection.getRangeAt(0);\n      // Apply the DOM selection to our Lexical selection.\n      const anchorNode = this.anchor.getNode();\n      const root = $isRootNode(anchorNode) ? anchorNode : $getNearestRootOrShadowRoot(anchorNode);\n      this.applyDOMRange(range);\n      this.dirty = true;\n      if (!collapse) {\n        // Validate selection; make sure that the new extended selection respects shadow roots\n        const nodes = this.getNodes();\n        const validNodes = [];\n        let shrinkSelection = false;\n        for (let i = 0; i < nodes.length; i++) {\n          const nextNode = nodes[i];\n          if ($hasAncestor(nextNode, root)) {\n            validNodes.push(nextNode);\n          } else {\n            shrinkSelection = true;\n          }\n        }\n        if (shrinkSelection && validNodes.length > 0) {\n          // validNodes length check is a safeguard against an invalid selection; as getNodes()\n          // will return an empty array in this case\n          if (isBackward) {\n            const firstValidNode = validNodes[0];\n            if ($isElementNode(firstValidNode)) {\n              firstValidNode.selectStart();\n            } else {\n              firstValidNode.getParentOrThrow().selectStart();\n            }\n          } else {\n            const lastValidNode = validNodes[validNodes.length - 1];\n            if ($isElementNode(lastValidNode)) {\n              lastValidNode.selectEnd();\n            } else {\n              lastValidNode.getParentOrThrow().selectEnd();\n            }\n          }\n        }\n\n        // Because a range works on start and end, we might need to flip\n        // the anchor and focus points to match what the DOM has, not what\n        // the range has specifically.\n        if (domSelection.anchorNode !== range.startContainer || domSelection.anchorOffset !== range.startOffset) {\n          $swapPoints(this);\n        }\n      }\n    }\n  }\n  /**\n   * Helper for handling forward character and word deletion that prevents element nodes\n   * like a table, columns layout being destroyed\n   *\n   * @param anchor the anchor\n   * @param anchorNode the anchor node in the selection\n   * @param isBackward whether or not selection is backwards\n   */\n  forwardDeletion(anchor, anchorNode, isBackward) {\n    if (!isBackward && (\n    // Delete forward handle case\n    anchor.type === 'element' && $isElementNode(anchorNode) && anchor.offset === anchorNode.getChildrenSize() || anchor.type === 'text' && anchor.offset === anchorNode.getTextContentSize())) {\n      const parent = anchorNode.getParent();\n      const nextSibling = anchorNode.getNextSibling() || (parent === null ? null : parent.getNextSibling());\n      if ($isElementNode(nextSibling) && nextSibling.isShadowRoot()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Performs one logical character deletion operation on the EditorState based on the current Selection.\n   * Handles different node types.\n   *\n   * @param isBackward whether or not the selection is backwards.\n   */\n  deleteCharacter(isBackward) {\n    const wasCollapsed = this.isCollapsed();\n    if (this.isCollapsed()) {\n      const anchor = this.anchor;\n      let anchorNode = anchor.getNode();\n      if (this.forwardDeletion(anchor, anchorNode, isBackward)) {\n        return;\n      }\n\n      // Handle the deletion around decorators.\n      const focus = this.focus;\n      const possibleNode = $getAdjacentNode(focus, isBackward);\n      if ($isDecoratorNode(possibleNode) && !possibleNode.isIsolated()) {\n        // Make it possible to move selection from range selection to\n        // node selection on the node.\n        if (possibleNode.isKeyboardSelectable() && $isElementNode(anchorNode) && anchorNode.getChildrenSize() === 0) {\n          anchorNode.remove();\n          const nodeSelection = $createNodeSelection();\n          nodeSelection.add(possibleNode.__key);\n          $setSelection(nodeSelection);\n        } else {\n          possibleNode.remove();\n          const editor = getActiveEditor();\n          editor.dispatchCommand(SELECTION_CHANGE_COMMAND, undefined);\n        }\n        return;\n      } else if (!isBackward && $isElementNode(possibleNode) && $isElementNode(anchorNode) && anchorNode.isEmpty()) {\n        anchorNode.remove();\n        possibleNode.selectStart();\n        return;\n      }\n      this.modify('extend', isBackward, 'character');\n      if (!this.isCollapsed()) {\n        const focusNode = focus.type === 'text' ? focus.getNode() : null;\n        anchorNode = anchor.type === 'text' ? anchor.getNode() : null;\n        if (focusNode !== null && focusNode.isSegmented()) {\n          const offset = focus.offset;\n          const textContentSize = focusNode.getTextContentSize();\n          if (focusNode.is(anchorNode) || isBackward && offset !== textContentSize || !isBackward && offset !== 0) {\n            $removeSegment(focusNode, isBackward, offset);\n            return;\n          }\n        } else if (anchorNode !== null && anchorNode.isSegmented()) {\n          const offset = anchor.offset;\n          const textContentSize = anchorNode.getTextContentSize();\n          if (anchorNode.is(focusNode) || isBackward && offset !== 0 || !isBackward && offset !== textContentSize) {\n            $removeSegment(anchorNode, isBackward, offset);\n            return;\n          }\n        }\n        $updateCaretSelectionForUnicodeCharacter(this, isBackward);\n      } else if (isBackward && anchor.offset === 0) {\n        // Special handling around rich text nodes\n        const element = anchor.type === 'element' ? anchor.getNode() : anchor.getNode().getParentOrThrow();\n        if (element.collapseAtStart(this)) {\n          return;\n        }\n      }\n    }\n    this.removeText();\n    if (isBackward && !wasCollapsed && this.isCollapsed() && this.anchor.type === 'element' && this.anchor.offset === 0) {\n      const anchorNode = this.anchor.getNode();\n      if (anchorNode.isEmpty() && $isRootNode(anchorNode.getParent()) && anchorNode.getIndexWithinParent() === 0) {\n        anchorNode.collapseAtStart(this);\n      }\n    }\n  }\n\n  /**\n   * Performs one logical line deletion operation on the EditorState based on the current Selection.\n   * Handles different node types.\n   *\n   * @param isBackward whether or not the selection is backwards.\n   */\n  deleteLine(isBackward) {\n    if (this.isCollapsed()) {\n      // Since `domSelection.modify('extend', ..., 'lineboundary')` works well for text selections\n      // but doesn't properly handle selections which end on elements, a space character is added\n      // for such selections transforming their anchor's type to 'text'\n      const anchorIsElement = this.anchor.type === 'element';\n      if (anchorIsElement) {\n        this.insertText(' ');\n      }\n      this.modify('extend', isBackward, 'lineboundary');\n\n      // If the selection starts at the beginning of a text node (offset 0),\n      // extend the selection by one character in the specified direction.\n      // This ensures that the parent element is deleted along with its content.\n      // Otherwise, only the text content will be deleted, leaving an empty parent node.\n      if (this.isCollapsed() && this.anchor.offset === 0) {\n        this.modify('extend', isBackward, 'character');\n      }\n\n      // Adjusts selection to include an extra character added for element anchors to remove it\n      if (anchorIsElement) {\n        const startPoint = isBackward ? this.anchor : this.focus;\n        startPoint.set(startPoint.key, startPoint.offset + 1, startPoint.type);\n      }\n    }\n    this.removeText();\n  }\n\n  /**\n   * Performs one logical word deletion operation on the EditorState based on the current Selection.\n   * Handles different node types.\n   *\n   * @param isBackward whether or not the selection is backwards.\n   */\n  deleteWord(isBackward) {\n    if (this.isCollapsed()) {\n      const anchor = this.anchor;\n      const anchorNode = anchor.getNode();\n      if (this.forwardDeletion(anchor, anchorNode, isBackward)) {\n        return;\n      }\n      this.modify('extend', isBackward, 'word');\n    }\n    this.removeText();\n  }\n\n  /**\n   * Returns whether the Selection is \"backwards\", meaning the focus\n   * logically precedes the anchor in the EditorState.\n   * @returns true if the Selection is backwards, false otherwise.\n   */\n  isBackward() {\n    return this.focus.isBefore(this.anchor);\n  }\n  getStartEndPoints() {\n    return [this.anchor, this.focus];\n  }\n}\nfunction $isNodeSelection(x) {\n  return x instanceof NodeSelection;\n}\nfunction getCharacterOffset(point) {\n  const offset = point.offset;\n  if (point.type === 'text') {\n    return offset;\n  }\n  const parent = point.getNode();\n  return offset === parent.getChildrenSize() ? parent.getTextContent().length : 0;\n}\nfunction $getCharacterOffsets(selection) {\n  const anchorAndFocus = selection.getStartEndPoints();\n  if (anchorAndFocus === null) {\n    return [0, 0];\n  }\n  const [anchor, focus] = anchorAndFocus;\n  if (anchor.type === 'element' && focus.type === 'element' && anchor.key === focus.key && anchor.offset === focus.offset) {\n    return [0, 0];\n  }\n  return [getCharacterOffset(anchor), getCharacterOffset(focus)];\n}\nfunction $swapPoints(selection) {\n  const focus = selection.focus;\n  const anchor = selection.anchor;\n  const anchorKey = anchor.key;\n  const anchorOffset = anchor.offset;\n  const anchorType = anchor.type;\n  $setPointValues(anchor, focus.key, focus.offset, focus.type);\n  $setPointValues(focus, anchorKey, anchorOffset, anchorType);\n  selection._cachedNodes = null;\n}\nfunction moveNativeSelection(domSelection, alter, direction, granularity) {\n  // Selection.modify() method applies a change to the current selection or cursor position,\n  // but is still non-standard in some browsers.\n  domSelection.modify(alter, direction, granularity);\n}\nfunction $updateCaretSelectionForUnicodeCharacter(selection, isBackward) {\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n  if (anchorNode === focusNode && anchor.type === 'text' && focus.type === 'text') {\n    // Handling of multibyte characters\n    const anchorOffset = anchor.offset;\n    const focusOffset = focus.offset;\n    const isBefore = anchorOffset < focusOffset;\n    const startOffset = isBefore ? anchorOffset : focusOffset;\n    const endOffset = isBefore ? focusOffset : anchorOffset;\n    const characterOffset = endOffset - 1;\n    if (startOffset !== characterOffset) {\n      const text = anchorNode.getTextContent().slice(startOffset, endOffset);\n      if (!doesContainGrapheme(text)) {\n        if (isBackward) {\n          focus.offset = characterOffset;\n        } else {\n          anchor.offset = characterOffset;\n        }\n      }\n    }\n  }\n}\nfunction $removeSegment(node, isBackward, offset) {\n  const textNode = node;\n  const textContent = textNode.getTextContent();\n  const split = textContent.split(/(?=\\s)/g);\n  const splitLength = split.length;\n  let segmentOffset = 0;\n  let restoreOffset = 0;\n  for (let i = 0; i < splitLength; i++) {\n    const text = split[i];\n    const isLast = i === splitLength - 1;\n    restoreOffset = segmentOffset;\n    segmentOffset += text.length;\n    if (isBackward && segmentOffset === offset || segmentOffset > offset || isLast) {\n      split.splice(i, 1);\n      if (isLast) {\n        restoreOffset = undefined;\n      }\n      break;\n    }\n  }\n  const nextTextContent = split.join('').trim();\n  if (nextTextContent === '') {\n    textNode.remove();\n  } else {\n    textNode.setTextContent(nextTextContent);\n    textNode.select(restoreOffset, restoreOffset);\n  }\n}\nfunction shouldResolveAncestor(resolvedElement, resolvedOffset, lastPoint) {\n  const parent = resolvedElement.getParent();\n  return lastPoint === null || parent === null || !parent.canBeEmpty() || parent !== lastPoint.getNode();\n}\nfunction $internalResolveSelectionPoint(dom, offset, lastPoint, editor) {\n  let resolvedOffset = offset;\n  let resolvedNode;\n  // If we have selection on an element, we will\n  // need to figure out (using the offset) what text\n  // node should be selected.\n\n  if (dom.nodeType === DOM_ELEMENT_TYPE) {\n    // Resolve element to a ElementNode, or TextNode, or null\n    let moveSelectionToEnd = false;\n    // Given we're moving selection to another node, selection is\n    // definitely dirty.\n    // We use the anchor to find which child node to select\n    const childNodes = dom.childNodes;\n    const childNodesLength = childNodes.length;\n    const blockCursorElement = editor._blockCursorElement;\n    // If the anchor is the same as length, then this means we\n    // need to select the very last text node.\n    if (resolvedOffset === childNodesLength) {\n      moveSelectionToEnd = true;\n      resolvedOffset = childNodesLength - 1;\n    }\n    let childDOM = childNodes[resolvedOffset];\n    let hasBlockCursor = false;\n    if (childDOM === blockCursorElement) {\n      childDOM = childNodes[resolvedOffset + 1];\n      hasBlockCursor = true;\n    } else if (blockCursorElement !== null) {\n      const blockCursorElementParent = blockCursorElement.parentNode;\n      if (dom === blockCursorElementParent) {\n        const blockCursorOffset = Array.prototype.indexOf.call(blockCursorElementParent.children, blockCursorElement);\n        if (offset > blockCursorOffset) {\n          resolvedOffset--;\n        }\n      }\n    }\n    resolvedNode = $getNodeFromDOM(childDOM);\n    if ($isTextNode(resolvedNode)) {\n      resolvedOffset = getTextNodeOffset(resolvedNode, moveSelectionToEnd);\n    } else {\n      let resolvedElement = $getNodeFromDOM(dom);\n      // Ensure resolvedElement is actually a element.\n      if (resolvedElement === null) {\n        return null;\n      }\n      if ($isElementNode(resolvedElement)) {\n        const elementDOM = editor.getElementByKey(resolvedElement.getKey());\n        if (!(elementDOM !== null)) {\n          throw Error(`$internalResolveSelectionPoint: node in DOM but not keyToDOMMap`);\n        }\n        const slot = resolvedElement.getDOMSlot(elementDOM);\n        [resolvedElement, resolvedOffset] = slot.resolveChildIndex(resolvedElement, elementDOM, dom, offset);\n        // This is just a typescript workaround, it is true but lost due to mutability\n        if (!$isElementNode(resolvedElement)) {\n          throw Error(`$internalResolveSelectionPoint: resolvedElement is not an ElementNode`);\n        }\n        if (moveSelectionToEnd && resolvedOffset >= resolvedElement.getChildrenSize()) {\n          resolvedOffset = Math.max(0, resolvedElement.getChildrenSize() - 1);\n        }\n        let child = resolvedElement.getChildAtIndex(resolvedOffset);\n        if ($isElementNode(child) && shouldResolveAncestor(child, resolvedOffset, lastPoint)) {\n          const descendant = moveSelectionToEnd ? child.getLastDescendant() : child.getFirstDescendant();\n          if (descendant === null) {\n            resolvedElement = child;\n          } else {\n            child = descendant;\n            resolvedElement = $isElementNode(child) ? child : child.getParentOrThrow();\n          }\n          resolvedOffset = 0;\n        }\n        if ($isTextNode(child)) {\n          resolvedNode = child;\n          resolvedElement = null;\n          resolvedOffset = getTextNodeOffset(child, moveSelectionToEnd);\n        } else if (child !== resolvedElement && moveSelectionToEnd && !hasBlockCursor) {\n          if (!$isElementNode(resolvedElement)) {\n            throw Error(`invariant`);\n          }\n          resolvedOffset = Math.min(resolvedElement.getChildrenSize(), resolvedOffset + 1);\n        }\n      } else {\n        const index = resolvedElement.getIndexWithinParent();\n        // When selecting decorators, there can be some selection issues when using resolvedOffset,\n        // and instead we should be checking if we're using the offset\n        if (offset === 0 && $isDecoratorNode(resolvedElement) && $getNodeFromDOM(dom) === resolvedElement) {\n          resolvedOffset = index;\n        } else {\n          resolvedOffset = index + 1;\n        }\n        resolvedElement = resolvedElement.getParentOrThrow();\n      }\n      if ($isElementNode(resolvedElement)) {\n        return $createPoint(resolvedElement.__key, resolvedOffset, 'element');\n      }\n    }\n  } else {\n    // TextNode or null\n    resolvedNode = $getNodeFromDOM(dom);\n  }\n  if (!$isTextNode(resolvedNode)) {\n    return null;\n  }\n  return $createPoint(resolvedNode.__key, resolvedOffset, 'text');\n}\nfunction resolveSelectionPointOnBoundary(point, isBackward, isCollapsed) {\n  const offset = point.offset;\n  const node = point.getNode();\n  if (offset === 0) {\n    const prevSibling = node.getPreviousSibling();\n    const parent = node.getParent();\n    if (!isBackward) {\n      if ($isElementNode(prevSibling) && !isCollapsed && prevSibling.isInline()) {\n        point.key = prevSibling.__key;\n        point.offset = prevSibling.getChildrenSize();\n        // @ts-expect-error: intentional\n        point.type = 'element';\n      } else if ($isTextNode(prevSibling)) {\n        point.key = prevSibling.__key;\n        point.offset = prevSibling.getTextContent().length;\n      }\n    } else if ((isCollapsed || !isBackward) && prevSibling === null && $isElementNode(parent) && parent.isInline()) {\n      const parentSibling = parent.getPreviousSibling();\n      if ($isTextNode(parentSibling)) {\n        point.key = parentSibling.__key;\n        point.offset = parentSibling.getTextContent().length;\n      }\n    }\n  } else if (offset === node.getTextContent().length) {\n    const nextSibling = node.getNextSibling();\n    const parent = node.getParent();\n    if (isBackward && $isElementNode(nextSibling) && nextSibling.isInline()) {\n      point.key = nextSibling.__key;\n      point.offset = 0;\n      // @ts-expect-error: intentional\n      point.type = 'element';\n    } else if ((isCollapsed || isBackward) && nextSibling === null && $isElementNode(parent) && parent.isInline() && !parent.canInsertTextAfter()) {\n      const parentSibling = parent.getNextSibling();\n      if ($isTextNode(parentSibling)) {\n        point.key = parentSibling.__key;\n        point.offset = 0;\n      }\n    }\n  }\n}\nfunction $normalizeSelectionPointsForBoundaries(anchor, focus, lastSelection) {\n  if (anchor.type === 'text' && focus.type === 'text') {\n    const isBackward = anchor.isBefore(focus);\n    const isCollapsed = anchor.is(focus);\n\n    // Attempt to normalize the offset to the previous sibling if we're at the\n    // start of a text node and the sibling is a text node or inline element.\n    resolveSelectionPointOnBoundary(anchor, isBackward, isCollapsed);\n    resolveSelectionPointOnBoundary(focus, !isBackward, isCollapsed);\n    if (isCollapsed) {\n      focus.key = anchor.key;\n      focus.offset = anchor.offset;\n      focus.type = anchor.type;\n    }\n    const editor = getActiveEditor();\n    if (editor.isComposing() && editor._compositionKey !== anchor.key && $isRangeSelection(lastSelection)) {\n      const lastAnchor = lastSelection.anchor;\n      const lastFocus = lastSelection.focus;\n      $setPointValues(anchor, lastAnchor.key, lastAnchor.offset, lastAnchor.type);\n      $setPointValues(focus, lastFocus.key, lastFocus.offset, lastFocus.type);\n    }\n  }\n}\nfunction $internalResolveSelectionPoints(anchorDOM, anchorOffset, focusDOM, focusOffset, editor, lastSelection) {\n  if (anchorDOM === null || focusDOM === null || !isSelectionWithinEditor(editor, anchorDOM, focusDOM)) {\n    return null;\n  }\n  const resolvedAnchorPoint = $internalResolveSelectionPoint(anchorDOM, anchorOffset, $isRangeSelection(lastSelection) ? lastSelection.anchor : null, editor);\n  if (resolvedAnchorPoint === null) {\n    return null;\n  }\n  {\n    $validatePoint(editor, 'anchor', resolvedAnchorPoint);\n  }\n  const resolvedFocusPoint = $internalResolveSelectionPoint(focusDOM, focusOffset, $isRangeSelection(lastSelection) ? lastSelection.focus : null, editor);\n  if (resolvedFocusPoint === null) {\n    return null;\n  }\n  {\n    $validatePoint(editor, 'focus', resolvedAnchorPoint);\n  }\n  if (resolvedAnchorPoint.type === 'element' && resolvedFocusPoint.type === 'element') {\n    const anchorNode = $getNodeFromDOM(anchorDOM);\n    const focusNode = $getNodeFromDOM(focusDOM);\n    // Ensure if we're selecting the content of a decorator that we\n    // return null for this point, as it's not in the controlled scope\n    // of Lexical.\n    if ($isDecoratorNode(anchorNode) && $isDecoratorNode(focusNode)) {\n      return null;\n    }\n  }\n\n  // Handle normalization of selection when it is at the boundaries.\n  $normalizeSelectionPointsForBoundaries(resolvedAnchorPoint, resolvedFocusPoint, lastSelection);\n  return [resolvedAnchorPoint, resolvedFocusPoint];\n}\nfunction $isBlockElementNode(node) {\n  return $isElementNode(node) && !node.isInline();\n}\n\n// This is used to make a selection when the existing\n// selection is null, i.e. forcing selection on the editor\n// when it current exists outside the editor.\n\nfunction $internalMakeRangeSelection(anchorKey, anchorOffset, focusKey, focusOffset, anchorType, focusType) {\n  const editorState = getActiveEditorState();\n  const selection = new RangeSelection($createPoint(anchorKey, anchorOffset, anchorType), $createPoint(focusKey, focusOffset, focusType), 0, '');\n  selection.dirty = true;\n  editorState._selection = selection;\n  return selection;\n}\nfunction $createRangeSelection() {\n  const anchor = $createPoint('root', 0, 'element');\n  const focus = $createPoint('root', 0, 'element');\n  return new RangeSelection(anchor, focus, 0, '');\n}\nfunction $createNodeSelection() {\n  return new NodeSelection(new Set());\n}\nfunction $internalCreateSelection(editor) {\n  const currentEditorState = editor.getEditorState();\n  const lastSelection = currentEditorState._selection;\n  const domSelection = getDOMSelection(editor._window);\n  if ($isRangeSelection(lastSelection) || lastSelection == null) {\n    return $internalCreateRangeSelection(lastSelection, domSelection, editor, null);\n  }\n  return lastSelection.clone();\n}\nfunction $createRangeSelectionFromDom(domSelection, editor) {\n  return $internalCreateRangeSelection(null, domSelection, editor, null);\n}\nfunction $internalCreateRangeSelection(lastSelection, domSelection, editor, event) {\n  const windowObj = editor._window;\n  if (windowObj === null) {\n    return null;\n  }\n  // When we create a selection, we try to use the previous\n  // selection where possible, unless an actual user selection\n  // change has occurred. When we do need to create a new selection\n  // we validate we can have text nodes for both anchor and focus\n  // nodes. If that holds true, we then return that selection\n  // as a mutable object that we use for the editor state for this\n  // update cycle. If a selection gets changed, and requires a\n  // update to native DOM selection, it gets marked as \"dirty\".\n  // If the selection changes, but matches with the existing\n  // DOM selection, then we only need to sync it. Otherwise,\n  // we generally bail out of doing an update to selection during\n  // reconciliation unless there are dirty nodes that need\n  // reconciling.\n\n  const windowEvent = event || windowObj.event;\n  const eventType = windowEvent ? windowEvent.type : undefined;\n  const isSelectionChange = eventType === 'selectionchange';\n  const useDOMSelection = !getIsProcessingMutations() && (isSelectionChange || eventType === 'beforeinput' || eventType === 'compositionstart' || eventType === 'compositionend' || eventType === 'click' && windowEvent && windowEvent.detail === 3 || eventType === 'drop' || eventType === undefined);\n  let anchorDOM, focusDOM, anchorOffset, focusOffset;\n  if (!$isRangeSelection(lastSelection) || useDOMSelection) {\n    if (domSelection === null) {\n      return null;\n    }\n    anchorDOM = domSelection.anchorNode;\n    focusDOM = domSelection.focusNode;\n    anchorOffset = domSelection.anchorOffset;\n    focusOffset = domSelection.focusOffset;\n    if (isSelectionChange && $isRangeSelection(lastSelection) && !isSelectionWithinEditor(editor, anchorDOM, focusDOM)) {\n      return lastSelection.clone();\n    }\n  } else {\n    return lastSelection.clone();\n  }\n  // Let's resolve the text nodes from the offsets and DOM nodes we have from\n  // native selection.\n  const resolvedSelectionPoints = $internalResolveSelectionPoints(anchorDOM, anchorOffset, focusDOM, focusOffset, editor, lastSelection);\n  if (resolvedSelectionPoints === null) {\n    return null;\n  }\n  const [resolvedAnchorPoint, resolvedFocusPoint] = resolvedSelectionPoints;\n  return new RangeSelection(resolvedAnchorPoint, resolvedFocusPoint, !$isRangeSelection(lastSelection) ? 0 : lastSelection.format, !$isRangeSelection(lastSelection) ? '' : lastSelection.style);\n}\nfunction $validatePoint(editor, name, point) {\n  const node = $getNodeByKey(point.key);\n  if (!(node !== undefined)) {\n    throw Error(`$validatePoint: ${name} key ${point.key} not found in current editorState`);\n  }\n  if (point.type === 'text') {\n    if (!$isTextNode(node)) {\n      throw Error(`$validatePoint: ${name} key ${point.key} is not a TextNode`);\n    }\n    const size = node.getTextContentSize();\n    if (!(point.offset <= size)) {\n      throw Error(`$validatePoint: ${name} point.offset > node.getTextContentSize() (${String(point.offset)} > ${String(size)})`);\n    }\n  } else {\n    if (!$isElementNode(node)) {\n      throw Error(`$validatePoint: ${name} key ${point.key} is not an ElementNode`);\n    }\n    const size = node.getChildrenSize();\n    if (!(point.offset <= size)) {\n      throw Error(`$validatePoint: ${name} point.offset > node.getChildrenSize() (${String(point.offset)} > ${String(size)})`);\n    }\n  }\n}\nfunction $getSelection() {\n  const editorState = getActiveEditorState();\n  return editorState._selection;\n}\nfunction $getPreviousSelection() {\n  const editor = getActiveEditor();\n  return editor._editorState._selection;\n}\nfunction $updateElementSelectionOnCreateDeleteNode(selection, parentNode, nodeOffset, times = 1) {\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n  if (!parentNode.is(anchorNode) && !parentNode.is(focusNode)) {\n    return;\n  }\n  const parentKey = parentNode.__key;\n  // Single node. We shift selection but never redimension it\n  if (selection.isCollapsed()) {\n    const selectionOffset = anchor.offset;\n    if (nodeOffset <= selectionOffset && times > 0 || nodeOffset < selectionOffset && times < 0) {\n      const newSelectionOffset = Math.max(0, selectionOffset + times);\n      anchor.set(parentKey, newSelectionOffset, 'element');\n      focus.set(parentKey, newSelectionOffset, 'element');\n      // The new selection might point to text nodes, try to resolve them\n      $updateSelectionResolveTextNodes(selection);\n    }\n  } else {\n    // Multiple nodes selected. We shift or redimension selection\n    const isBackward = selection.isBackward();\n    const firstPoint = isBackward ? focus : anchor;\n    const firstPointNode = firstPoint.getNode();\n    const lastPoint = isBackward ? anchor : focus;\n    const lastPointNode = lastPoint.getNode();\n    if (parentNode.is(firstPointNode)) {\n      const firstPointOffset = firstPoint.offset;\n      if (nodeOffset <= firstPointOffset && times > 0 || nodeOffset < firstPointOffset && times < 0) {\n        firstPoint.set(parentKey, Math.max(0, firstPointOffset + times), 'element');\n      }\n    }\n    if (parentNode.is(lastPointNode)) {\n      const lastPointOffset = lastPoint.offset;\n      if (nodeOffset <= lastPointOffset && times > 0 || nodeOffset < lastPointOffset && times < 0) {\n        lastPoint.set(parentKey, Math.max(0, lastPointOffset + times), 'element');\n      }\n    }\n  }\n  // The new selection might point to text nodes, try to resolve them\n  $updateSelectionResolveTextNodes(selection);\n}\nfunction $updateSelectionResolveTextNodes(selection) {\n  const anchor = selection.anchor;\n  const anchorOffset = anchor.offset;\n  const focus = selection.focus;\n  const focusOffset = focus.offset;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n  if (selection.isCollapsed()) {\n    if (!$isElementNode(anchorNode)) {\n      return;\n    }\n    const childSize = anchorNode.getChildrenSize();\n    const anchorOffsetAtEnd = anchorOffset >= childSize;\n    const child = anchorOffsetAtEnd ? anchorNode.getChildAtIndex(childSize - 1) : anchorNode.getChildAtIndex(anchorOffset);\n    if ($isTextNode(child)) {\n      let newOffset = 0;\n      if (anchorOffsetAtEnd) {\n        newOffset = child.getTextContentSize();\n      }\n      anchor.set(child.__key, newOffset, 'text');\n      focus.set(child.__key, newOffset, 'text');\n    }\n    return;\n  }\n  if ($isElementNode(anchorNode)) {\n    const childSize = anchorNode.getChildrenSize();\n    const anchorOffsetAtEnd = anchorOffset >= childSize;\n    const child = anchorOffsetAtEnd ? anchorNode.getChildAtIndex(childSize - 1) : anchorNode.getChildAtIndex(anchorOffset);\n    if ($isTextNode(child)) {\n      let newOffset = 0;\n      if (anchorOffsetAtEnd) {\n        newOffset = child.getTextContentSize();\n      }\n      anchor.set(child.__key, newOffset, 'text');\n    }\n  }\n  if ($isElementNode(focusNode)) {\n    const childSize = focusNode.getChildrenSize();\n    const focusOffsetAtEnd = focusOffset >= childSize;\n    const child = focusOffsetAtEnd ? focusNode.getChildAtIndex(childSize - 1) : focusNode.getChildAtIndex(focusOffset);\n    if ($isTextNode(child)) {\n      let newOffset = 0;\n      if (focusOffsetAtEnd) {\n        newOffset = child.getTextContentSize();\n      }\n      focus.set(child.__key, newOffset, 'text');\n    }\n  }\n}\nfunction applySelectionTransforms(nextEditorState, editor) {\n  const prevEditorState = editor.getEditorState();\n  const prevSelection = prevEditorState._selection;\n  const nextSelection = nextEditorState._selection;\n  if ($isRangeSelection(nextSelection)) {\n    const anchor = nextSelection.anchor;\n    const focus = nextSelection.focus;\n    let anchorNode;\n    if (anchor.type === 'text') {\n      anchorNode = anchor.getNode();\n      anchorNode.selectionTransform(prevSelection, nextSelection);\n    }\n    if (focus.type === 'text') {\n      const focusNode = focus.getNode();\n      if (anchorNode !== focusNode) {\n        focusNode.selectionTransform(prevSelection, nextSelection);\n      }\n    }\n  }\n}\nfunction moveSelectionPointToSibling(point, node, parent, prevSibling, nextSibling) {\n  let siblingKey = null;\n  let offset = 0;\n  let type = null;\n  if (prevSibling !== null) {\n    siblingKey = prevSibling.__key;\n    if ($isTextNode(prevSibling)) {\n      offset = prevSibling.getTextContentSize();\n      type = 'text';\n    } else if ($isElementNode(prevSibling)) {\n      offset = prevSibling.getChildrenSize();\n      type = 'element';\n    }\n  } else {\n    if (nextSibling !== null) {\n      siblingKey = nextSibling.__key;\n      if ($isTextNode(nextSibling)) {\n        type = 'text';\n      } else if ($isElementNode(nextSibling)) {\n        type = 'element';\n      }\n    }\n  }\n  if (siblingKey !== null && type !== null) {\n    point.set(siblingKey, offset, type);\n  } else {\n    offset = node.getIndexWithinParent();\n    if (offset === -1) {\n      // Move selection to end of parent\n      offset = parent.getChildrenSize();\n    }\n    point.set(parent.__key, offset, 'element');\n  }\n}\nfunction adjustPointOffsetForMergedSibling(point, isBefore, key, target, textLength) {\n  if (point.type === 'text') {\n    point.key = key;\n    if (!isBefore) {\n      point.offset += textLength;\n    }\n  } else if (point.offset > target.getIndexWithinParent()) {\n    point.offset -= 1;\n  }\n}\nfunction updateDOMSelection(prevSelection, nextSelection, editor, domSelection, tags, rootElement, nodeCount) {\n  const anchorDOMNode = domSelection.anchorNode;\n  const focusDOMNode = domSelection.focusNode;\n  const anchorOffset = domSelection.anchorOffset;\n  const focusOffset = domSelection.focusOffset;\n  const activeElement = document.activeElement;\n\n  // TODO: make this not hard-coded, and add another config option\n  // that makes this configurable.\n  if (tags.has('collaboration') && activeElement !== rootElement || activeElement !== null && isSelectionCapturedInDecoratorInput(activeElement)) {\n    return;\n  }\n  if (!$isRangeSelection(nextSelection)) {\n    // We don't remove selection if the prevSelection is null because\n    // of editor.setRootElement(). If this occurs on init when the\n    // editor is already focused, then this can cause the editor to\n    // lose focus.\n    if (prevSelection !== null && isSelectionWithinEditor(editor, anchorDOMNode, focusDOMNode)) {\n      domSelection.removeAllRanges();\n    }\n    return;\n  }\n  const anchor = nextSelection.anchor;\n  const focus = nextSelection.focus;\n  const anchorKey = anchor.key;\n  const focusKey = focus.key;\n  const anchorDOM = getElementByKeyOrThrow(editor, anchorKey);\n  const focusDOM = getElementByKeyOrThrow(editor, focusKey);\n  const nextAnchorOffset = anchor.offset;\n  const nextFocusOffset = focus.offset;\n  const nextFormat = nextSelection.format;\n  const nextStyle = nextSelection.style;\n  const isCollapsed = nextSelection.isCollapsed();\n  let nextAnchorNode = anchorDOM;\n  let nextFocusNode = focusDOM;\n  let anchorFormatOrStyleChanged = false;\n  if (anchor.type === 'text') {\n    nextAnchorNode = getDOMTextNode(anchorDOM);\n    const anchorNode = anchor.getNode();\n    anchorFormatOrStyleChanged = anchorNode.getFormat() !== nextFormat || anchorNode.getStyle() !== nextStyle;\n  } else if ($isRangeSelection(prevSelection) && prevSelection.anchor.type === 'text') {\n    anchorFormatOrStyleChanged = true;\n  }\n  if (focus.type === 'text') {\n    nextFocusNode = getDOMTextNode(focusDOM);\n  }\n\n  // If we can't get an underlying text node for selection, then\n  // we should avoid setting selection to something incorrect.\n  if (nextAnchorNode === null || nextFocusNode === null) {\n    return;\n  }\n  if (isCollapsed && (prevSelection === null || anchorFormatOrStyleChanged || $isRangeSelection(prevSelection) && (prevSelection.format !== nextFormat || prevSelection.style !== nextStyle))) {\n    markCollapsedSelectionFormat(nextFormat, nextStyle, nextAnchorOffset, anchorKey, performance.now());\n  }\n\n  // Diff against the native DOM selection to ensure we don't do\n  // an unnecessary selection update. We also skip this check if\n  // we're moving selection to within an element, as this can\n  // sometimes be problematic around scrolling.\n  if (anchorOffset === nextAnchorOffset && focusOffset === nextFocusOffset && anchorDOMNode === nextAnchorNode && focusDOMNode === nextFocusNode &&\n  // Badly interpreted range selection when collapsed - #1482\n  !(domSelection.type === 'Range' && isCollapsed)) {\n    // If the root element does not have focus, ensure it has focus\n    if (activeElement === null || !rootElement.contains(activeElement)) {\n      rootElement.focus({\n        preventScroll: true\n      });\n    }\n    if (anchor.type !== 'element') {\n      return;\n    }\n  }\n\n  // Apply the updated selection to the DOM. Note: this will trigger\n  // a \"selectionchange\" event, although it will be asynchronous.\n  try {\n    domSelection.setBaseAndExtent(nextAnchorNode, nextAnchorOffset, nextFocusNode, nextFocusOffset);\n  } catch (error) {\n    // If we encounter an error, continue. This can sometimes\n    // occur with FF and there's no good reason as to why it\n    // should happen.\n    {\n      console.warn(error);\n    }\n  }\n  if (!tags.has('skip-scroll-into-view') && nextSelection.isCollapsed() && rootElement !== null && rootElement === document.activeElement) {\n    const selectionTarget = nextSelection instanceof RangeSelection && nextSelection.anchor.type === 'element' ? nextAnchorNode.childNodes[nextAnchorOffset] || null : domSelection.rangeCount > 0 ? domSelection.getRangeAt(0) : null;\n    if (selectionTarget !== null) {\n      let selectionRect;\n      if (selectionTarget instanceof Text) {\n        const range = document.createRange();\n        range.selectNode(selectionTarget);\n        selectionRect = range.getBoundingClientRect();\n      } else {\n        selectionRect = selectionTarget.getBoundingClientRect();\n      }\n      scrollIntoViewIfNeeded(editor, selectionRect, rootElement);\n    }\n  }\n  markSelectionChangeFromDOMUpdate();\n}\nfunction $insertNodes(nodes) {\n  let selection = $getSelection() || $getPreviousSelection();\n  if (selection === null) {\n    selection = $getRoot().selectEnd();\n  }\n  selection.insertNodes(nodes);\n}\nfunction $getTextContent() {\n  const selection = $getSelection();\n  if (selection === null) {\n    return '';\n  }\n  return selection.getTextContent();\n}\nfunction $removeTextAndSplitBlock(selection) {\n  let selection_ = selection;\n  if (!selection.isCollapsed()) {\n    selection_.removeText();\n  }\n  // A new selection can originate as a result of node replacement, in which case is registered via\n  // $setSelection\n  const newSelection = $getSelection();\n  if ($isRangeSelection(newSelection)) {\n    selection_ = newSelection;\n  }\n  if (!$isRangeSelection(selection_)) {\n    throw Error(`Unexpected dirty selection to be null`);\n  }\n  const anchor = selection_.anchor;\n  let node = anchor.getNode();\n  let offset = anchor.offset;\n  while (!INTERNAL_$isBlock(node)) {\n    [node, offset] = $splitNodeAtPoint(node, offset);\n  }\n  return offset;\n}\nfunction $splitNodeAtPoint(node, offset) {\n  const parent = node.getParent();\n  if (!parent) {\n    const paragraph = $createParagraphNode();\n    $getRoot().append(paragraph);\n    paragraph.select();\n    return [$getRoot(), 0];\n  }\n  if ($isTextNode(node)) {\n    const split = node.splitText(offset);\n    if (split.length === 0) {\n      return [parent, node.getIndexWithinParent()];\n    }\n    const x = offset === 0 ? 0 : 1;\n    const index = split[0].getIndexWithinParent() + x;\n    return [parent, index];\n  }\n  if (!$isElementNode(node) || offset === 0) {\n    return [parent, node.getIndexWithinParent()];\n  }\n  const firstToAppend = node.getChildAtIndex(offset);\n  if (firstToAppend) {\n    const insertPoint = new RangeSelection($createPoint(node.__key, offset, 'element'), $createPoint(node.__key, offset, 'element'), 0, '');\n    const newElement = node.insertNewAfter(insertPoint);\n    if (newElement) {\n      newElement.append(firstToAppend, ...firstToAppend.getNextSiblings());\n    }\n  }\n  return [parent, node.getIndexWithinParent() + 1];\n}\nfunction $wrapInlineNodes(nodes) {\n  // We temporarily insert the topLevelNodes into an arbitrary ElementNode,\n  // since insertAfter does not work on nodes that have no parent (TO-DO: fix that).\n  const virtualRoot = $createParagraphNode();\n  let currentBlock = null;\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    const isLineBreakNode = $isLineBreakNode(node);\n    if (isLineBreakNode || $isDecoratorNode(node) && node.isInline() || $isElementNode(node) && node.isInline() || $isTextNode(node) || node.isParentRequired()) {\n      if (currentBlock === null) {\n        currentBlock = node.createParentElementNode();\n        virtualRoot.append(currentBlock);\n        // In the case of LineBreakNode, we just need to\n        // add an empty ParagraphNode to the topLevelBlocks.\n        if (isLineBreakNode) {\n          continue;\n        }\n      }\n      if (currentBlock !== null) {\n        currentBlock.append(node);\n      }\n    } else {\n      virtualRoot.append(node);\n      currentBlock = null;\n    }\n  }\n  return virtualRoot;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nlet activeEditorState = null;\nlet activeEditor = null;\nlet isReadOnlyMode = false;\nlet isAttemptingToRecoverFromReconcilerError = false;\nlet infiniteTransformCount = 0;\nconst observerOptions = {\n  characterData: true,\n  childList: true,\n  subtree: true\n};\nfunction isCurrentlyReadOnlyMode() {\n  return isReadOnlyMode || activeEditorState !== null && activeEditorState._readOnly;\n}\nfunction errorOnReadOnly() {\n  if (isReadOnlyMode) {\n    {\n      throw Error(`Cannot use method in read-only mode.`);\n    }\n  }\n}\nfunction errorOnInfiniteTransforms() {\n  if (infiniteTransformCount > 99) {\n    {\n      throw Error(`One or more transforms are endlessly triggering additional transforms. May have encountered infinite recursion caused by transforms that have their preconditions too lose and/or conflict with each other.`);\n    }\n  }\n}\nfunction getActiveEditorState() {\n  if (activeEditorState === null) {\n    {\n      throw Error(`Unable to find an active editor state. State helpers or node methods can only be used synchronously during the callback of editor.update(), editor.read(), or editorState.read().${collectBuildInformation()}`);\n    }\n  }\n  return activeEditorState;\n}\nfunction getActiveEditor() {\n  if (activeEditor === null) {\n    {\n      throw Error(`Unable to find an active editor. This method can only be used synchronously during the callback of editor.update() or editor.read().${collectBuildInformation()}`);\n    }\n  }\n  return activeEditor;\n}\nfunction collectBuildInformation() {\n  let compatibleEditors = 0;\n  const incompatibleEditors = new Set();\n  const thisVersion = LexicalEditor.version;\n  if (typeof window !== 'undefined') {\n    for (const node of document.querySelectorAll('[contenteditable]')) {\n      const editor = getEditorPropertyFromDOMNode(node);\n      if (isLexicalEditor(editor)) {\n        compatibleEditors++;\n      } else if (editor) {\n        let version = String(editor.constructor.version || '<0.17.1');\n        if (version === thisVersion) {\n          version += ' (separately built, likely a bundler configuration issue)';\n        }\n        incompatibleEditors.add(version);\n      }\n    }\n  }\n  let output = ` Detected on the page: ${compatibleEditors} compatible editor(s) with version ${thisVersion}`;\n  if (incompatibleEditors.size) {\n    output += ` and incompatible editors with versions ${Array.from(incompatibleEditors).join(', ')}`;\n  }\n  return output;\n}\nfunction internalGetActiveEditor() {\n  return activeEditor;\n}\nfunction internalGetActiveEditorState() {\n  return activeEditorState;\n}\nfunction $applyTransforms(editor, node, transformsCache) {\n  const type = node.__type;\n  const registeredNode = getRegisteredNodeOrThrow(editor, type);\n  let transformsArr = transformsCache.get(type);\n  if (transformsArr === undefined) {\n    transformsArr = Array.from(registeredNode.transforms);\n    transformsCache.set(type, transformsArr);\n  }\n  const transformsArrLength = transformsArr.length;\n  for (let i = 0; i < transformsArrLength; i++) {\n    transformsArr[i](node);\n    if (!node.isAttached()) {\n      break;\n    }\n  }\n}\nfunction $isNodeValidForTransform(node, compositionKey) {\n  return node !== undefined &&\n  // We don't want to transform nodes being composed\n  node.__key !== compositionKey && node.isAttached();\n}\nfunction $normalizeAllDirtyTextNodes(editorState, editor) {\n  const dirtyLeaves = editor._dirtyLeaves;\n  const nodeMap = editorState._nodeMap;\n  for (const nodeKey of dirtyLeaves) {\n    const node = nodeMap.get(nodeKey);\n    if ($isTextNode(node) && node.isAttached() && node.isSimpleText() && !node.isUnmergeable()) {\n      $normalizeTextNode(node);\n    }\n  }\n}\nfunction addTags(editor, tags) {\n  if (!tags) {\n    return;\n  }\n  const updateTags = editor._updateTags;\n  let tags_ = tags;\n  if (!Array.isArray(tags)) {\n    tags_ = [tags];\n  }\n  for (const tag of tags_) {\n    updateTags.add(tag);\n  }\n}\n\n/**\n * Transform heuristic:\n * 1. We transform leaves first. If transforms generate additional dirty nodes we repeat step 1.\n * The reasoning behind this is that marking a leaf as dirty marks all its parent elements as dirty too.\n * 2. We transform elements. If element transforms generate additional dirty nodes we repeat step 1.\n * If element transforms only generate additional dirty elements we only repeat step 2.\n *\n * Note that to keep track of newly dirty nodes and subtrees we leverage the editor._dirtyNodes and\n * editor._subtrees which we reset in every loop.\n */\nfunction $applyAllTransforms(editorState, editor) {\n  const dirtyLeaves = editor._dirtyLeaves;\n  const dirtyElements = editor._dirtyElements;\n  const nodeMap = editorState._nodeMap;\n  const compositionKey = $getCompositionKey();\n  const transformsCache = new Map();\n  let untransformedDirtyLeaves = dirtyLeaves;\n  let untransformedDirtyLeavesLength = untransformedDirtyLeaves.size;\n  let untransformedDirtyElements = dirtyElements;\n  let untransformedDirtyElementsLength = untransformedDirtyElements.size;\n  while (untransformedDirtyLeavesLength > 0 || untransformedDirtyElementsLength > 0) {\n    if (untransformedDirtyLeavesLength > 0) {\n      // We leverage editor._dirtyLeaves to track the new dirty leaves after the transforms\n      editor._dirtyLeaves = new Set();\n      for (const nodeKey of untransformedDirtyLeaves) {\n        const node = nodeMap.get(nodeKey);\n        if ($isTextNode(node) && node.isAttached() && node.isSimpleText() && !node.isUnmergeable()) {\n          $normalizeTextNode(node);\n        }\n        if (node !== undefined && $isNodeValidForTransform(node, compositionKey)) {\n          $applyTransforms(editor, node, transformsCache);\n        }\n        dirtyLeaves.add(nodeKey);\n      }\n      untransformedDirtyLeaves = editor._dirtyLeaves;\n      untransformedDirtyLeavesLength = untransformedDirtyLeaves.size;\n\n      // We want to prioritize node transforms over element transforms\n      if (untransformedDirtyLeavesLength > 0) {\n        infiniteTransformCount++;\n        continue;\n      }\n    }\n\n    // All dirty leaves have been processed. Let's do elements!\n    // We have previously processed dirty leaves, so let's restart the editor leaves Set to track\n    // new ones caused by element transforms\n    editor._dirtyLeaves = new Set();\n    editor._dirtyElements = new Map();\n    for (const currentUntransformedDirtyElement of untransformedDirtyElements) {\n      const nodeKey = currentUntransformedDirtyElement[0];\n      const intentionallyMarkedAsDirty = currentUntransformedDirtyElement[1];\n      if (nodeKey !== 'root' && !intentionallyMarkedAsDirty) {\n        continue;\n      }\n      const node = nodeMap.get(nodeKey);\n      if (node !== undefined && $isNodeValidForTransform(node, compositionKey)) {\n        $applyTransforms(editor, node, transformsCache);\n      }\n      dirtyElements.set(nodeKey, intentionallyMarkedAsDirty);\n    }\n    untransformedDirtyLeaves = editor._dirtyLeaves;\n    untransformedDirtyLeavesLength = untransformedDirtyLeaves.size;\n    untransformedDirtyElements = editor._dirtyElements;\n    untransformedDirtyElementsLength = untransformedDirtyElements.size;\n    infiniteTransformCount++;\n  }\n  editor._dirtyLeaves = dirtyLeaves;\n  editor._dirtyElements = dirtyElements;\n}\nfunction $parseSerializedNode(serializedNode) {\n  const internalSerializedNode = serializedNode;\n  return $parseSerializedNodeImpl(internalSerializedNode, getActiveEditor()._nodes);\n}\nfunction $parseSerializedNodeImpl(serializedNode, registeredNodes) {\n  const type = serializedNode.type;\n  const registeredNode = registeredNodes.get(type);\n  if (registeredNode === undefined) {\n    {\n      throw Error(`parseEditorState: type \"${type}\" + not found`);\n    }\n  }\n  const nodeClass = registeredNode.klass;\n  if (serializedNode.type !== nodeClass.getType()) {\n    {\n      throw Error(`LexicalNode: Node ${nodeClass.name} does not implement .importJSON().`);\n    }\n  }\n  const node = nodeClass.importJSON(serializedNode);\n  const children = serializedNode.children;\n  if ($isElementNode(node) && Array.isArray(children)) {\n    for (let i = 0; i < children.length; i++) {\n      const serializedJSONChildNode = children[i];\n      const childNode = $parseSerializedNodeImpl(serializedJSONChildNode, registeredNodes);\n      node.append(childNode);\n    }\n  }\n  return node;\n}\nfunction parseEditorState(serializedEditorState, editor, updateFn) {\n  const editorState = createEmptyEditorState();\n  const previousActiveEditorState = activeEditorState;\n  const previousReadOnlyMode = isReadOnlyMode;\n  const previousActiveEditor = activeEditor;\n  const previousDirtyElements = editor._dirtyElements;\n  const previousDirtyLeaves = editor._dirtyLeaves;\n  const previousCloneNotNeeded = editor._cloneNotNeeded;\n  const previousDirtyType = editor._dirtyType;\n  editor._dirtyElements = new Map();\n  editor._dirtyLeaves = new Set();\n  editor._cloneNotNeeded = new Set();\n  editor._dirtyType = 0;\n  activeEditorState = editorState;\n  isReadOnlyMode = false;\n  activeEditor = editor;\n  try {\n    const registeredNodes = editor._nodes;\n    const serializedNode = serializedEditorState.root;\n    $parseSerializedNodeImpl(serializedNode, registeredNodes);\n    if (updateFn) {\n      updateFn();\n    }\n\n    // Make the editorState immutable\n    editorState._readOnly = true;\n    {\n      handleDEVOnlyPendingUpdateGuarantees(editorState);\n    }\n  } catch (error) {\n    if (error instanceof Error) {\n      editor._onError(error);\n    }\n  } finally {\n    editor._dirtyElements = previousDirtyElements;\n    editor._dirtyLeaves = previousDirtyLeaves;\n    editor._cloneNotNeeded = previousCloneNotNeeded;\n    editor._dirtyType = previousDirtyType;\n    activeEditorState = previousActiveEditorState;\n    isReadOnlyMode = previousReadOnlyMode;\n    activeEditor = previousActiveEditor;\n  }\n  return editorState;\n}\n\n// This technically isn't an update but given we need\n// exposure to the module's active bindings, we have this\n// function here\n\nfunction readEditorState(editor, editorState, callbackFn) {\n  const previousActiveEditorState = activeEditorState;\n  const previousReadOnlyMode = isReadOnlyMode;\n  const previousActiveEditor = activeEditor;\n  activeEditorState = editorState;\n  isReadOnlyMode = true;\n  activeEditor = editor;\n  try {\n    return callbackFn();\n  } finally {\n    activeEditorState = previousActiveEditorState;\n    isReadOnlyMode = previousReadOnlyMode;\n    activeEditor = previousActiveEditor;\n  }\n}\nfunction handleDEVOnlyPendingUpdateGuarantees(pendingEditorState) {\n  // Given we can't Object.freeze the nodeMap as it's a Map,\n  // we instead replace its set, clear and delete methods.\n  const nodeMap = pendingEditorState._nodeMap;\n  nodeMap.set = () => {\n    throw new Error('Cannot call set() on a frozen Lexical node map');\n  };\n  nodeMap.clear = () => {\n    throw new Error('Cannot call clear() on a frozen Lexical node map');\n  };\n  nodeMap.delete = () => {\n    throw new Error('Cannot call delete() on a frozen Lexical node map');\n  };\n}\nfunction $commitPendingUpdates(editor, recoveryEditorState) {\n  const pendingEditorState = editor._pendingEditorState;\n  const rootElement = editor._rootElement;\n  const shouldSkipDOM = editor._headless || rootElement === null;\n  if (pendingEditorState === null) {\n    return;\n  }\n\n  // ======\n  // Reconciliation has started.\n  // ======\n\n  const currentEditorState = editor._editorState;\n  const currentSelection = currentEditorState._selection;\n  const pendingSelection = pendingEditorState._selection;\n  const needsUpdate = editor._dirtyType !== NO_DIRTY_NODES;\n  const previousActiveEditorState = activeEditorState;\n  const previousReadOnlyMode = isReadOnlyMode;\n  const previousActiveEditor = activeEditor;\n  const previouslyUpdating = editor._updating;\n  const observer = editor._observer;\n  let mutatedNodes = null;\n  editor._pendingEditorState = null;\n  editor._editorState = pendingEditorState;\n  if (!shouldSkipDOM && needsUpdate && observer !== null) {\n    activeEditor = editor;\n    activeEditorState = pendingEditorState;\n    isReadOnlyMode = false;\n    // We don't want updates to sync block the reconciliation.\n    editor._updating = true;\n    try {\n      const dirtyType = editor._dirtyType;\n      const dirtyElements = editor._dirtyElements;\n      const dirtyLeaves = editor._dirtyLeaves;\n      observer.disconnect();\n      mutatedNodes = $reconcileRoot(currentEditorState, pendingEditorState, editor, dirtyType, dirtyElements, dirtyLeaves);\n    } catch (error) {\n      // Report errors\n      if (error instanceof Error) {\n        editor._onError(error);\n      }\n\n      // Reset editor and restore incoming editor state to the DOM\n      if (!isAttemptingToRecoverFromReconcilerError) {\n        resetEditor(editor, null, rootElement, pendingEditorState);\n        initMutationObserver(editor);\n        editor._dirtyType = FULL_RECONCILE;\n        isAttemptingToRecoverFromReconcilerError = true;\n        $commitPendingUpdates(editor, currentEditorState);\n        isAttemptingToRecoverFromReconcilerError = false;\n      } else {\n        // To avoid a possible situation of infinite loops, lets throw\n        throw error;\n      }\n      return;\n    } finally {\n      observer.observe(rootElement, observerOptions);\n      editor._updating = previouslyUpdating;\n      activeEditorState = previousActiveEditorState;\n      isReadOnlyMode = previousReadOnlyMode;\n      activeEditor = previousActiveEditor;\n    }\n  }\n  if (!pendingEditorState._readOnly) {\n    pendingEditorState._readOnly = true;\n    {\n      handleDEVOnlyPendingUpdateGuarantees(pendingEditorState);\n      if ($isRangeSelection(pendingSelection)) {\n        Object.freeze(pendingSelection.anchor);\n        Object.freeze(pendingSelection.focus);\n      }\n      Object.freeze(pendingSelection);\n    }\n  }\n  const dirtyLeaves = editor._dirtyLeaves;\n  const dirtyElements = editor._dirtyElements;\n  const normalizedNodes = editor._normalizedNodes;\n  const tags = editor._updateTags;\n  const deferred = editor._deferred;\n  if (needsUpdate) {\n    editor._dirtyType = NO_DIRTY_NODES;\n    editor._cloneNotNeeded.clear();\n    editor._dirtyLeaves = new Set();\n    editor._dirtyElements = new Map();\n    editor._normalizedNodes = new Set();\n    editor._updateTags = new Set();\n  }\n  $garbageCollectDetachedDecorators(editor, pendingEditorState);\n\n  // ======\n  // Reconciliation has finished. Now update selection and trigger listeners.\n  // ======\n\n  const domSelection = shouldSkipDOM ? null : getDOMSelection(editor._window);\n\n  // Attempt to update the DOM selection, including focusing of the root element,\n  // and scroll into view if needed.\n  if (editor._editable &&\n  // domSelection will be null in headless\n  domSelection !== null && (needsUpdate || pendingSelection === null || pendingSelection.dirty) && rootElement !== null && !tags.has('skip-dom-selection')) {\n    activeEditor = editor;\n    activeEditorState = pendingEditorState;\n    try {\n      if (observer !== null) {\n        observer.disconnect();\n      }\n      if (needsUpdate || pendingSelection === null || pendingSelection.dirty) {\n        const blockCursorElement = editor._blockCursorElement;\n        if (blockCursorElement !== null) {\n          removeDOMBlockCursorElement(blockCursorElement, editor, rootElement);\n        }\n        updateDOMSelection(currentSelection, pendingSelection, editor, domSelection, tags, rootElement);\n      }\n      updateDOMBlockCursorElement(editor, rootElement, pendingSelection);\n      if (observer !== null) {\n        observer.observe(rootElement, observerOptions);\n      }\n    } finally {\n      activeEditor = previousActiveEditor;\n      activeEditorState = previousActiveEditorState;\n    }\n  }\n  if (mutatedNodes !== null) {\n    triggerMutationListeners(editor, mutatedNodes, tags, dirtyLeaves, currentEditorState);\n  }\n  if (!$isRangeSelection(pendingSelection) && pendingSelection !== null && (currentSelection === null || !currentSelection.is(pendingSelection))) {\n    editor.dispatchCommand(SELECTION_CHANGE_COMMAND, undefined);\n  }\n  /**\n   * Capture pendingDecorators after garbage collecting detached decorators\n   */\n  const pendingDecorators = editor._pendingDecorators;\n  if (pendingDecorators !== null) {\n    editor._decorators = pendingDecorators;\n    editor._pendingDecorators = null;\n    triggerListeners('decorator', editor, true, pendingDecorators);\n  }\n\n  // If reconciler fails, we reset whole editor (so current editor state becomes empty)\n  // and attempt to re-render pendingEditorState. If that goes through we trigger\n  // listeners, but instead use recoverEditorState which is current editor state before reset\n  // This specifically important for collab that relies on prevEditorState from update\n  // listener to calculate delta of changed nodes/properties\n  triggerTextContentListeners(editor, recoveryEditorState || currentEditorState, pendingEditorState);\n  triggerListeners('update', editor, true, {\n    dirtyElements,\n    dirtyLeaves,\n    editorState: pendingEditorState,\n    normalizedNodes,\n    prevEditorState: recoveryEditorState || currentEditorState,\n    tags\n  });\n  triggerDeferredUpdateCallbacks(editor, deferred);\n  $triggerEnqueuedUpdates(editor);\n}\nfunction triggerTextContentListeners(editor, currentEditorState, pendingEditorState) {\n  const currentTextContent = getEditorStateTextContent(currentEditorState);\n  const latestTextContent = getEditorStateTextContent(pendingEditorState);\n  if (currentTextContent !== latestTextContent) {\n    triggerListeners('textcontent', editor, true, latestTextContent);\n  }\n}\nfunction triggerMutationListeners(editor, mutatedNodes, updateTags, dirtyLeaves, prevEditorState) {\n  const listeners = Array.from(editor._listeners.mutation);\n  const listenersLength = listeners.length;\n  for (let i = 0; i < listenersLength; i++) {\n    const [listener, klass] = listeners[i];\n    const mutatedNodesByType = mutatedNodes.get(klass);\n    if (mutatedNodesByType !== undefined) {\n      listener(mutatedNodesByType, {\n        dirtyLeaves,\n        prevEditorState,\n        updateTags\n      });\n    }\n  }\n}\nfunction triggerListeners(type, editor, isCurrentlyEnqueuingUpdates, ...payload) {\n  const previouslyUpdating = editor._updating;\n  editor._updating = isCurrentlyEnqueuingUpdates;\n  try {\n    const listeners = Array.from(editor._listeners[type]);\n    for (let i = 0; i < listeners.length; i++) {\n      // @ts-ignore\n      listeners[i].apply(null, payload);\n    }\n  } finally {\n    editor._updating = previouslyUpdating;\n  }\n}\nfunction triggerCommandListeners(editor, type, payload) {\n  if (editor._updating === false || activeEditor !== editor) {\n    let returnVal = false;\n    editor.update(() => {\n      returnVal = triggerCommandListeners(editor, type, payload);\n    });\n    return returnVal;\n  }\n  const editors = getEditorsToPropagate(editor);\n  for (let i = 4; i >= 0; i--) {\n    for (let e = 0; e < editors.length; e++) {\n      const currentEditor = editors[e];\n      const commandListeners = currentEditor._commands;\n      const listenerInPriorityOrder = commandListeners.get(type);\n      if (listenerInPriorityOrder !== undefined) {\n        const listenersSet = listenerInPriorityOrder[i];\n        if (listenersSet !== undefined) {\n          const listeners = Array.from(listenersSet);\n          const listenersLength = listeners.length;\n          for (let j = 0; j < listenersLength; j++) {\n            if (listeners[j](payload, editor) === true) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n  }\n  return false;\n}\nfunction $triggerEnqueuedUpdates(editor) {\n  const queuedUpdates = editor._updates;\n  if (queuedUpdates.length !== 0) {\n    const queuedUpdate = queuedUpdates.shift();\n    if (queuedUpdate) {\n      const [updateFn, options] = queuedUpdate;\n      $beginUpdate(editor, updateFn, options);\n    }\n  }\n}\nfunction triggerDeferredUpdateCallbacks(editor, deferred) {\n  editor._deferred = [];\n  if (deferred.length !== 0) {\n    const previouslyUpdating = editor._updating;\n    editor._updating = true;\n    try {\n      for (let i = 0; i < deferred.length; i++) {\n        deferred[i]();\n      }\n    } finally {\n      editor._updating = previouslyUpdating;\n    }\n  }\n}\nfunction processNestedUpdates(editor, initialSkipTransforms) {\n  const queuedUpdates = editor._updates;\n  let skipTransforms = initialSkipTransforms || false;\n\n  // Updates might grow as we process them, we so we'll need\n  // to handle each update as we go until the updates array is\n  // empty.\n  while (queuedUpdates.length !== 0) {\n    const queuedUpdate = queuedUpdates.shift();\n    if (queuedUpdate) {\n      const [nextUpdateFn, options] = queuedUpdate;\n      let onUpdate;\n      if (options !== undefined) {\n        onUpdate = options.onUpdate;\n        if (options.skipTransforms) {\n          skipTransforms = true;\n        }\n        if (options.discrete) {\n          const pendingEditorState = editor._pendingEditorState;\n          if (!(pendingEditorState !== null)) {\n            throw Error(`Unexpected empty pending editor state on discrete nested update`);\n          }\n          pendingEditorState._flushSync = true;\n        }\n        if (onUpdate) {\n          editor._deferred.push(onUpdate);\n        }\n        addTags(editor, options.tag);\n      }\n      nextUpdateFn();\n    }\n  }\n  return skipTransforms;\n}\nfunction $beginUpdate(editor, updateFn, options) {\n  const updateTags = editor._updateTags;\n  let onUpdate;\n  let skipTransforms = false;\n  let discrete = false;\n  if (options !== undefined) {\n    onUpdate = options.onUpdate;\n    addTags(editor, options.tag);\n    skipTransforms = options.skipTransforms || false;\n    discrete = options.discrete || false;\n  }\n  if (onUpdate) {\n    editor._deferred.push(onUpdate);\n  }\n  const currentEditorState = editor._editorState;\n  let pendingEditorState = editor._pendingEditorState;\n  let editorStateWasCloned = false;\n  if (pendingEditorState === null || pendingEditorState._readOnly) {\n    pendingEditorState = editor._pendingEditorState = cloneEditorState(pendingEditorState || currentEditorState);\n    editorStateWasCloned = true;\n  }\n  pendingEditorState._flushSync = discrete;\n  const previousActiveEditorState = activeEditorState;\n  const previousReadOnlyMode = isReadOnlyMode;\n  const previousActiveEditor = activeEditor;\n  const previouslyUpdating = editor._updating;\n  activeEditorState = pendingEditorState;\n  isReadOnlyMode = false;\n  editor._updating = true;\n  activeEditor = editor;\n  try {\n    if (editorStateWasCloned) {\n      if (editor._headless) {\n        if (currentEditorState._selection !== null) {\n          pendingEditorState._selection = currentEditorState._selection.clone();\n        }\n      } else {\n        pendingEditorState._selection = $internalCreateSelection(editor);\n      }\n    }\n    const startingCompositionKey = editor._compositionKey;\n    updateFn();\n    skipTransforms = processNestedUpdates(editor, skipTransforms);\n    applySelectionTransforms(pendingEditorState, editor);\n    if (editor._dirtyType !== NO_DIRTY_NODES) {\n      if (skipTransforms) {\n        $normalizeAllDirtyTextNodes(pendingEditorState, editor);\n      } else {\n        $applyAllTransforms(pendingEditorState, editor);\n      }\n      processNestedUpdates(editor);\n      $garbageCollectDetachedNodes(currentEditorState, pendingEditorState, editor._dirtyLeaves, editor._dirtyElements);\n    }\n    const endingCompositionKey = editor._compositionKey;\n    if (startingCompositionKey !== endingCompositionKey) {\n      pendingEditorState._flushSync = true;\n    }\n    const pendingSelection = pendingEditorState._selection;\n    if ($isRangeSelection(pendingSelection)) {\n      const pendingNodeMap = pendingEditorState._nodeMap;\n      const anchorKey = pendingSelection.anchor.key;\n      const focusKey = pendingSelection.focus.key;\n      if (pendingNodeMap.get(anchorKey) === undefined || pendingNodeMap.get(focusKey) === undefined) {\n        {\n          throw Error(`updateEditor: selection has been lost because the previously selected nodes have been removed and selection wasn't moved to another node. Ensure selection changes after removing/replacing a selected node.`);\n        }\n      }\n    } else if ($isNodeSelection(pendingSelection)) {\n      // TODO: we should also validate node selection?\n      if (pendingSelection._nodes.size === 0) {\n        pendingEditorState._selection = null;\n      }\n    }\n  } catch (error) {\n    // Report errors\n    if (error instanceof Error) {\n      editor._onError(error);\n    }\n\n    // Restore existing editor state to the DOM\n    editor._pendingEditorState = currentEditorState;\n    editor._dirtyType = FULL_RECONCILE;\n    editor._cloneNotNeeded.clear();\n    editor._dirtyLeaves = new Set();\n    editor._dirtyElements.clear();\n    $commitPendingUpdates(editor);\n    return;\n  } finally {\n    activeEditorState = previousActiveEditorState;\n    isReadOnlyMode = previousReadOnlyMode;\n    activeEditor = previousActiveEditor;\n    editor._updating = previouslyUpdating;\n    infiniteTransformCount = 0;\n  }\n  const shouldUpdate = editor._dirtyType !== NO_DIRTY_NODES || editor._deferred.length > 0 || editorStateHasDirtySelection(pendingEditorState, editor);\n  if (shouldUpdate) {\n    if (pendingEditorState._flushSync) {\n      pendingEditorState._flushSync = false;\n      $commitPendingUpdates(editor);\n    } else if (editorStateWasCloned) {\n      scheduleMicroTask(() => {\n        $commitPendingUpdates(editor);\n      });\n    }\n  } else {\n    pendingEditorState._flushSync = false;\n    if (editorStateWasCloned) {\n      updateTags.clear();\n      editor._deferred = [];\n      editor._pendingEditorState = null;\n    }\n  }\n}\nfunction updateEditor(editor, updateFn, options) {\n  if (editor._updating) {\n    editor._updates.push([updateFn, options]);\n  } else {\n    $beginUpdate(editor, updateFn, options);\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\n\n/**\n * A utility class for managing the DOM children of an ElementNode\n */\nclass ElementDOMSlot {\n  constructor(/** The element returned by createDOM */\n  element, /** All managed children will be inserted before this node, if defined */\n  before, /** All managed children will be inserted after this node, if defined */\n  after) {\n    this.element = element;\n    this.before = before || null;\n    this.after = after || null;\n  }\n  /**\n   * Return a new ElementDOMSlot where all managed children will be inserted before this node\n   */\n  withBefore(before) {\n    return new ElementDOMSlot(this.element, before, this.after);\n  }\n  /**\n   * Return a new ElementDOMSlot where all managed children will be inserted after this node\n   */\n  withAfter(after) {\n    return new ElementDOMSlot(this.element, this.before, after);\n  }\n  /**\n   * Return a new ElementDOMSlot with an updated root element\n   */\n  withElement(element) {\n    return new ElementDOMSlot(element, this.before, this.after);\n  }\n  /**\n   * Insert the given child before this.before and any reconciler managed line break node,\n   * or append it if this.before is not defined\n   */\n  insertChild(dom) {\n    const before = this.before || this.getManagedLineBreak();\n    if (!(before === null || before.parentElement === this.element)) {\n      throw Error(`ElementDOMSlot.insertChild: before is not in element`);\n    }\n    this.element.insertBefore(dom, before);\n    return this;\n  }\n  /**\n   * Remove the managed child from this container, will throw if it was not already there\n   */\n  removeChild(dom) {\n    if (!(dom.parentElement === this.element)) {\n      throw Error(`ElementDOMSlot.removeChild: dom is not in element`);\n    }\n    this.element.removeChild(dom);\n    return this;\n  }\n  /**\n   * Replace managed child prevDom with dom. Will throw if prevDom is not a child\n   *\n   * @param dom The new node to replace prevDom\n   * @param prevDom the node that will be replaced\n   */\n  replaceChild(dom, prevDom) {\n    if (!(prevDom.parentElement === this.element)) {\n      throw Error(`ElementDOMSlot.replaceChild: prevDom is not in element`);\n    }\n    this.element.replaceChild(dom, prevDom);\n    return this;\n  }\n  /**\n   * Returns the first managed child of this node,\n   * which will either be this.after.nextSibling or this.element.firstChild,\n   * and will never be this.before if it is defined.\n   */\n  getFirstChild() {\n    const firstChild = this.after ? this.after.nextSibling : this.element.firstChild;\n    return firstChild === this.before || firstChild === this.getManagedLineBreak() ? null : firstChild;\n  }\n  /**\n   * @internal\n   */\n  getManagedLineBreak() {\n    const element = this.element;\n    return element.__lexicalLineBreak || null;\n  }\n  /** @internal */\n  setManagedLineBreak(lineBreakType) {\n    if (lineBreakType === null) {\n      this.removeManagedLineBreak();\n    } else {\n      const webkitHack = lineBreakType === 'decorator' && (IS_IOS || IS_SAFARI);\n      this.insertManagedLineBreak(webkitHack);\n    }\n  }\n\n  /** @internal */\n  removeManagedLineBreak() {\n    const br = this.getManagedLineBreak();\n    if (br) {\n      const element = this.element;\n      const sibling = br.nodeName === 'IMG' ? br.nextSibling : null;\n      if (sibling) {\n        element.removeChild(sibling);\n      }\n      element.removeChild(br);\n      element.__lexicalLineBreak = undefined;\n    }\n  }\n  /** @internal */\n  insertManagedLineBreak(webkitHack) {\n    const prevBreak = this.getManagedLineBreak();\n    if (prevBreak) {\n      if (webkitHack === (prevBreak.nodeName === 'IMG')) {\n        return;\n      }\n      this.removeManagedLineBreak();\n    }\n    const element = this.element;\n    const before = this.before;\n    const br = document.createElement('br');\n    element.insertBefore(br, before);\n    if (webkitHack) {\n      const img = document.createElement('img');\n      img.setAttribute('data-lexical-linebreak', 'true');\n      img.style.cssText = 'display: inline !important; border: 0px !important; margin: 0px !important;';\n      img.alt = '';\n      element.insertBefore(img, br);\n      element.__lexicalLineBreak = img;\n    } else {\n      element.__lexicalLineBreak = br;\n    }\n  }\n\n  /**\n   * @internal\n   *\n   * Returns the offset of the first child\n   */\n  getFirstChildOffset() {\n    let i = 0;\n    for (let node = this.after; node !== null; node = node.previousSibling) {\n      i++;\n    }\n    return i;\n  }\n\n  /**\n   * @internal\n   */\n  resolveChildIndex(element, elementDOM, initialDOM, initialOffset) {\n    if (initialDOM === this.element) {\n      const firstChildOffset = this.getFirstChildOffset();\n      return [element, Math.min(firstChildOffset + element.getChildrenSize(), Math.max(firstChildOffset, initialOffset))];\n    }\n    // The resolved offset must be before or after the children\n    const initialPath = indexPath(elementDOM, initialDOM);\n    initialPath.push(initialOffset);\n    const elementPath = indexPath(elementDOM, this.element);\n    let offset = element.getIndexWithinParent();\n    for (let i = 0; i < elementPath.length; i++) {\n      const target = initialPath[i];\n      const source = elementPath[i];\n      if (target === undefined || target < source) {\n        break;\n      } else if (target > source) {\n        offset += 1;\n        break;\n      }\n    }\n    return [element.getParentOrThrow(), offset];\n  }\n}\nfunction indexPath(root, child) {\n  const path = [];\n  let node = child;\n  for (; node !== root && node !== null; node = child.parentNode) {\n    let i = 0;\n    for (let sibling = node.previousSibling; sibling !== null; sibling = node.previousSibling) {\n      i++;\n    }\n    path.push(i);\n  }\n  if (!(node === root)) {\n    throw Error(`indexPath: root is not a parent of child`);\n  }\n  return path.reverse();\n}\n\n/** @noInheritDoc */\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nclass ElementNode extends LexicalNode {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  constructor(key) {\n    super(key);\n    this.__first = null;\n    this.__last = null;\n    this.__size = 0;\n    this.__format = 0;\n    this.__style = '';\n    this.__indent = 0;\n    this.__dir = null;\n  }\n  afterCloneFrom(prevNode) {\n    super.afterCloneFrom(prevNode);\n    this.__first = prevNode.__first;\n    this.__last = prevNode.__last;\n    this.__size = prevNode.__size;\n    this.__indent = prevNode.__indent;\n    this.__format = prevNode.__format;\n    this.__style = prevNode.__style;\n    this.__dir = prevNode.__dir;\n  }\n  getFormat() {\n    const self = this.getLatest();\n    return self.__format;\n  }\n  getFormatType() {\n    const format = this.getFormat();\n    return ELEMENT_FORMAT_TO_TYPE[format] || '';\n  }\n  getStyle() {\n    const self = this.getLatest();\n    return self.__style;\n  }\n  getIndent() {\n    const self = this.getLatest();\n    return self.__indent;\n  }\n  getChildren() {\n    const children = [];\n    let child = this.getFirstChild();\n    while (child !== null) {\n      children.push(child);\n      child = child.getNextSibling();\n    }\n    return children;\n  }\n  getChildrenKeys() {\n    const children = [];\n    let child = this.getFirstChild();\n    while (child !== null) {\n      children.push(child.__key);\n      child = child.getNextSibling();\n    }\n    return children;\n  }\n  getChildrenSize() {\n    const self = this.getLatest();\n    return self.__size;\n  }\n  isEmpty() {\n    return this.getChildrenSize() === 0;\n  }\n  isDirty() {\n    const editor = getActiveEditor();\n    const dirtyElements = editor._dirtyElements;\n    return dirtyElements !== null && dirtyElements.has(this.__key);\n  }\n  isLastChild() {\n    const self = this.getLatest();\n    const parentLastChild = this.getParentOrThrow().getLastChild();\n    return parentLastChild !== null && parentLastChild.is(self);\n  }\n  getAllTextNodes() {\n    const textNodes = [];\n    let child = this.getFirstChild();\n    while (child !== null) {\n      if ($isTextNode(child)) {\n        textNodes.push(child);\n      }\n      if ($isElementNode(child)) {\n        const subChildrenNodes = child.getAllTextNodes();\n        textNodes.push(...subChildrenNodes);\n      }\n      child = child.getNextSibling();\n    }\n    return textNodes;\n  }\n  getFirstDescendant() {\n    let node = this.getFirstChild();\n    while ($isElementNode(node)) {\n      const child = node.getFirstChild();\n      if (child === null) {\n        break;\n      }\n      node = child;\n    }\n    return node;\n  }\n  getLastDescendant() {\n    let node = this.getLastChild();\n    while ($isElementNode(node)) {\n      const child = node.getLastChild();\n      if (child === null) {\n        break;\n      }\n      node = child;\n    }\n    return node;\n  }\n  getDescendantByIndex(index) {\n    const children = this.getChildren();\n    const childrenLength = children.length;\n    // For non-empty element nodes, we resolve its descendant\n    // (either a leaf node or the bottom-most element)\n    if (index >= childrenLength) {\n      const resolvedNode = children[childrenLength - 1];\n      return $isElementNode(resolvedNode) && resolvedNode.getLastDescendant() || resolvedNode || null;\n    }\n    const resolvedNode = children[index];\n    return $isElementNode(resolvedNode) && resolvedNode.getFirstDescendant() || resolvedNode || null;\n  }\n  getFirstChild() {\n    const self = this.getLatest();\n    const firstKey = self.__first;\n    return firstKey === null ? null : $getNodeByKey(firstKey);\n  }\n  getFirstChildOrThrow() {\n    const firstChild = this.getFirstChild();\n    if (firstChild === null) {\n      {\n        throw Error(`Expected node ${this.__key} to have a first child.`);\n      }\n    }\n    return firstChild;\n  }\n  getLastChild() {\n    const self = this.getLatest();\n    const lastKey = self.__last;\n    return lastKey === null ? null : $getNodeByKey(lastKey);\n  }\n  getLastChildOrThrow() {\n    const lastChild = this.getLastChild();\n    if (lastChild === null) {\n      {\n        throw Error(`Expected node ${this.__key} to have a last child.`);\n      }\n    }\n    return lastChild;\n  }\n  getChildAtIndex(index) {\n    const size = this.getChildrenSize();\n    let node;\n    let i;\n    if (index < size / 2) {\n      node = this.getFirstChild();\n      i = 0;\n      while (node !== null && i <= index) {\n        if (i === index) {\n          return node;\n        }\n        node = node.getNextSibling();\n        i++;\n      }\n      return null;\n    }\n    node = this.getLastChild();\n    i = size - 1;\n    while (node !== null && i >= index) {\n      if (i === index) {\n        return node;\n      }\n      node = node.getPreviousSibling();\n      i--;\n    }\n    return null;\n  }\n  getTextContent() {\n    let textContent = '';\n    const children = this.getChildren();\n    const childrenLength = children.length;\n    for (let i = 0; i < childrenLength; i++) {\n      const child = children[i];\n      textContent += child.getTextContent();\n      if ($isElementNode(child) && i !== childrenLength - 1 && !child.isInline()) {\n        textContent += DOUBLE_LINE_BREAK;\n      }\n    }\n    return textContent;\n  }\n  getTextContentSize() {\n    let textContentSize = 0;\n    const children = this.getChildren();\n    const childrenLength = children.length;\n    for (let i = 0; i < childrenLength; i++) {\n      const child = children[i];\n      textContentSize += child.getTextContentSize();\n      if ($isElementNode(child) && i !== childrenLength - 1 && !child.isInline()) {\n        textContentSize += DOUBLE_LINE_BREAK.length;\n      }\n    }\n    return textContentSize;\n  }\n  getDirection() {\n    const self = this.getLatest();\n    return self.__dir;\n  }\n  hasFormat(type) {\n    if (type !== '') {\n      const formatFlag = ELEMENT_TYPE_TO_FORMAT[type];\n      return (this.getFormat() & formatFlag) !== 0;\n    }\n    return false;\n  }\n\n  // Mutators\n\n  select(_anchorOffset, _focusOffset) {\n    errorOnReadOnly();\n    const selection = $getSelection();\n    let anchorOffset = _anchorOffset;\n    let focusOffset = _focusOffset;\n    const childrenCount = this.getChildrenSize();\n    if (!this.canBeEmpty()) {\n      if (_anchorOffset === 0 && _focusOffset === 0) {\n        const firstChild = this.getFirstChild();\n        if ($isTextNode(firstChild) || $isElementNode(firstChild)) {\n          return firstChild.select(0, 0);\n        }\n      } else if ((_anchorOffset === undefined || _anchorOffset === childrenCount) && (_focusOffset === undefined || _focusOffset === childrenCount)) {\n        const lastChild = this.getLastChild();\n        if ($isTextNode(lastChild) || $isElementNode(lastChild)) {\n          return lastChild.select();\n        }\n      }\n    }\n    if (anchorOffset === undefined) {\n      anchorOffset = childrenCount;\n    }\n    if (focusOffset === undefined) {\n      focusOffset = childrenCount;\n    }\n    const key = this.__key;\n    if (!$isRangeSelection(selection)) {\n      return $internalMakeRangeSelection(key, anchorOffset, key, focusOffset, 'element', 'element');\n    } else {\n      selection.anchor.set(key, anchorOffset, 'element');\n      selection.focus.set(key, focusOffset, 'element');\n      selection.dirty = true;\n    }\n    return selection;\n  }\n  selectStart() {\n    const firstNode = this.getFirstDescendant();\n    return firstNode ? firstNode.selectStart() : this.select();\n  }\n  selectEnd() {\n    const lastNode = this.getLastDescendant();\n    return lastNode ? lastNode.selectEnd() : this.select();\n  }\n  clear() {\n    const writableSelf = this.getWritable();\n    const children = this.getChildren();\n    children.forEach(child => child.remove());\n    return writableSelf;\n  }\n  append(...nodesToAppend) {\n    return this.splice(this.getChildrenSize(), 0, nodesToAppend);\n  }\n  setDirection(direction) {\n    const self = this.getWritable();\n    self.__dir = direction;\n    return self;\n  }\n  setFormat(type) {\n    const self = this.getWritable();\n    self.__format = type !== '' ? ELEMENT_TYPE_TO_FORMAT[type] : 0;\n    return this;\n  }\n  setStyle(style) {\n    const self = this.getWritable();\n    self.__style = style || '';\n    return this;\n  }\n  setIndent(indentLevel) {\n    const self = this.getWritable();\n    self.__indent = indentLevel;\n    return this;\n  }\n  splice(start, deleteCount, nodesToInsert) {\n    const nodesToInsertLength = nodesToInsert.length;\n    const oldSize = this.getChildrenSize();\n    const writableSelf = this.getWritable();\n    if (!(start + deleteCount <= oldSize)) {\n      throw Error(`ElementNode.splice: start + deleteCount > oldSize (${String(start)} + ${String(deleteCount)} > ${String(oldSize)})`);\n    }\n    const writableSelfKey = writableSelf.__key;\n    const nodesToInsertKeys = [];\n    const nodesToRemoveKeys = [];\n    const nodeAfterRange = this.getChildAtIndex(start + deleteCount);\n    let nodeBeforeRange = null;\n    let newSize = oldSize - deleteCount + nodesToInsertLength;\n    if (start !== 0) {\n      if (start === oldSize) {\n        nodeBeforeRange = this.getLastChild();\n      } else {\n        const node = this.getChildAtIndex(start);\n        if (node !== null) {\n          nodeBeforeRange = node.getPreviousSibling();\n        }\n      }\n    }\n    if (deleteCount > 0) {\n      let nodeToDelete = nodeBeforeRange === null ? this.getFirstChild() : nodeBeforeRange.getNextSibling();\n      for (let i = 0; i < deleteCount; i++) {\n        if (nodeToDelete === null) {\n          {\n            throw Error(`splice: sibling not found`);\n          }\n        }\n        const nextSibling = nodeToDelete.getNextSibling();\n        const nodeKeyToDelete = nodeToDelete.__key;\n        const writableNodeToDelete = nodeToDelete.getWritable();\n        removeFromParent(writableNodeToDelete);\n        nodesToRemoveKeys.push(nodeKeyToDelete);\n        nodeToDelete = nextSibling;\n      }\n    }\n    let prevNode = nodeBeforeRange;\n    for (let i = 0; i < nodesToInsertLength; i++) {\n      const nodeToInsert = nodesToInsert[i];\n      if (prevNode !== null && nodeToInsert.is(prevNode)) {\n        nodeBeforeRange = prevNode = prevNode.getPreviousSibling();\n      }\n      const writableNodeToInsert = nodeToInsert.getWritable();\n      if (writableNodeToInsert.__parent === writableSelfKey) {\n        newSize--;\n      }\n      removeFromParent(writableNodeToInsert);\n      const nodeKeyToInsert = nodeToInsert.__key;\n      if (prevNode === null) {\n        writableSelf.__first = nodeKeyToInsert;\n        writableNodeToInsert.__prev = null;\n      } else {\n        const writablePrevNode = prevNode.getWritable();\n        writablePrevNode.__next = nodeKeyToInsert;\n        writableNodeToInsert.__prev = writablePrevNode.__key;\n      }\n      if (nodeToInsert.__key === writableSelfKey) {\n        {\n          throw Error(`append: attempting to append self`);\n        }\n      }\n      // Set child parent to self\n      writableNodeToInsert.__parent = writableSelfKey;\n      nodesToInsertKeys.push(nodeKeyToInsert);\n      prevNode = nodeToInsert;\n    }\n    if (start + deleteCount === oldSize) {\n      if (prevNode !== null) {\n        const writablePrevNode = prevNode.getWritable();\n        writablePrevNode.__next = null;\n        writableSelf.__last = prevNode.__key;\n      }\n    } else if (nodeAfterRange !== null) {\n      const writableNodeAfterRange = nodeAfterRange.getWritable();\n      if (prevNode !== null) {\n        const writablePrevNode = prevNode.getWritable();\n        writableNodeAfterRange.__prev = prevNode.__key;\n        writablePrevNode.__next = nodeAfterRange.__key;\n      } else {\n        writableNodeAfterRange.__prev = null;\n      }\n    }\n    writableSelf.__size = newSize;\n\n    // In case of deletion we need to adjust selection, unlink removed nodes\n    // and clean up node itself if it becomes empty. None of these needed\n    // for insertion-only cases\n    if (nodesToRemoveKeys.length) {\n      // Adjusting selection, in case node that was anchor/focus will be deleted\n      const selection = $getSelection();\n      if ($isRangeSelection(selection)) {\n        const nodesToRemoveKeySet = new Set(nodesToRemoveKeys);\n        const nodesToInsertKeySet = new Set(nodesToInsertKeys);\n        const {\n          anchor,\n          focus\n        } = selection;\n        if (isPointRemoved(anchor, nodesToRemoveKeySet, nodesToInsertKeySet)) {\n          moveSelectionPointToSibling(anchor, anchor.getNode(), this, nodeBeforeRange, nodeAfterRange);\n        }\n        if (isPointRemoved(focus, nodesToRemoveKeySet, nodesToInsertKeySet)) {\n          moveSelectionPointToSibling(focus, focus.getNode(), this, nodeBeforeRange, nodeAfterRange);\n        }\n        // Cleanup if node can't be empty\n        if (newSize === 0 && !this.canBeEmpty() && !$isRootOrShadowRoot(this)) {\n          this.remove();\n        }\n      }\n    }\n    return writableSelf;\n  }\n  /**\n   * @internal\n   *\n   * An experimental API that an ElementNode can override to control where its\n   * children are inserted into the DOM, this is useful to add a wrapping node\n   * or accessory nodes before or after the children. The root of the node returned\n   * by createDOM must still be exactly one HTMLElement.\n   */\n  getDOMSlot(element) {\n    return new ElementDOMSlot(element);\n  }\n  exportDOM(editor) {\n    const {\n      element\n    } = super.exportDOM(editor);\n    if (isHTMLElement(element)) {\n      const indent = this.getIndent();\n      if (indent > 0) {\n        // padding-inline-start is not widely supported in email HTML\n        // (see https://www.caniemail.com/features/css-padding-inline-start-end/),\n        // If you want to use HTML output for email, consider overriding the serialization\n        // to use `padding-right` in RTL languages, `padding-left` in `LTR` languages, or\n        // `text-indent` if you are ok with first-line indents.\n        // We recommend keeping multiples of 40px to maintain consistency with list-items\n        // (see https://github.com/facebook/lexical/pull/4025)\n        element.style.paddingInlineStart = `${indent * 40}px`;\n      }\n    }\n    return {\n      element\n    };\n  }\n  // JSON serialization\n  exportJSON() {\n    return {\n      children: [],\n      direction: this.getDirection(),\n      format: this.getFormatType(),\n      indent: this.getIndent(),\n      // As an exception here we invoke super at the end for historical reasons.\n      // Namely, to preserve the order of the properties and not to break the tests\n      // that use the serialized string representation.\n      ...super.exportJSON()\n    };\n  }\n  // These are intended to be extends for specific element heuristics.\n  insertNewAfter(selection, restoreSelection) {\n    return null;\n  }\n  canIndent() {\n    return true;\n  }\n  /*\n   * This method controls the behavior of a the node during backwards\n   * deletion (i.e., backspace) when selection is at the beginning of\n   * the node (offset 0)\n   */\n  collapseAtStart(selection) {\n    return false;\n  }\n  excludeFromCopy(destination) {\n    return false;\n  }\n  /** @deprecated @internal */\n  canReplaceWith(replacement) {\n    return true;\n  }\n  /** @deprecated @internal */\n  canInsertAfter(node) {\n    return true;\n  }\n  canBeEmpty() {\n    return true;\n  }\n  canInsertTextBefore() {\n    return true;\n  }\n  canInsertTextAfter() {\n    return true;\n  }\n  isInline() {\n    return false;\n  }\n  // A shadow root is a Node that behaves like RootNode. The shadow root (and RootNode) mark the\n  // end of the hiercharchy, most implementations should treat it as there's nothing (upwards)\n  // beyond this point. For example, node.getTopLevelElement(), when performed inside a TableCellNode\n  // will return the immediate first child underneath TableCellNode instead of RootNode.\n  isShadowRoot() {\n    return false;\n  }\n  /** @deprecated @internal */\n  canMergeWith(node) {\n    return false;\n  }\n  extractWithChild(child, selection, destination) {\n    return false;\n  }\n\n  /**\n   * Determines whether this node, when empty, can merge with a first block\n   * of nodes being inserted.\n   *\n   * This method is specifically called in {@link RangeSelection.insertNodes}\n   * to determine merging behavior during nodes insertion.\n   *\n   * @example\n   * // In a ListItemNode or QuoteNode implementation:\n   * canMergeWhenEmpty(): true {\n   *  return true;\n   * }\n   */\n  canMergeWhenEmpty() {\n    return false;\n  }\n\n  /** @internal */\n  reconcileObservedMutation(dom, editor) {\n    const slot = this.getDOMSlot(dom);\n    let currentDOM = slot.getFirstChild();\n    for (let currentNode = this.getFirstChild(); currentNode; currentNode = currentNode.getNextSibling()) {\n      const correctDOM = editor.getElementByKey(currentNode.getKey());\n      if (correctDOM === null) {\n        continue;\n      }\n      if (currentDOM == null) {\n        slot.insertChild(correctDOM);\n        currentDOM = correctDOM;\n      } else if (currentDOM !== correctDOM) {\n        slot.replaceChild(correctDOM, currentDOM);\n      }\n      currentDOM = currentDOM.nextSibling;\n    }\n  }\n}\nfunction $isElementNode(node) {\n  return node instanceof ElementNode;\n}\nfunction isPointRemoved(point, nodesToRemoveKeySet, nodesToInsertKeySet) {\n  let node = point.getNode();\n  while (node) {\n    const nodeKey = node.__key;\n    if (nodesToRemoveKeySet.has(nodeKey) && !nodesToInsertKeySet.has(nodeKey)) {\n      return true;\n    }\n    node = node.getParent();\n  }\n  return false;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n/** @noInheritDoc */\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nclass DecoratorNode extends LexicalNode {\n  constructor(key) {\n    super(key);\n  }\n\n  /**\n   * The returned value is added to the LexicalEditor._decorators\n   */\n  decorate(editor, config) {\n    {\n      throw Error(`decorate: base method not extended`);\n    }\n  }\n  isIsolated() {\n    return false;\n  }\n  isInline() {\n    return true;\n  }\n  isKeyboardSelectable() {\n    return true;\n  }\n}\nfunction $isDecoratorNode(node) {\n  return node instanceof DecoratorNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass RootNode extends ElementNode {\n  /** @internal */\n\n  static getType() {\n    return 'root';\n  }\n  static clone() {\n    return new RootNode();\n  }\n  constructor() {\n    super('root');\n    this.__cachedText = null;\n  }\n  getTopLevelElementOrThrow() {\n    {\n      throw Error(`getTopLevelElementOrThrow: root nodes are not top level elements`);\n    }\n  }\n  getTextContent() {\n    const cachedText = this.__cachedText;\n    if (isCurrentlyReadOnlyMode() || getActiveEditor()._dirtyType === NO_DIRTY_NODES) {\n      if (cachedText !== null) {\n        return cachedText;\n      }\n    }\n    return super.getTextContent();\n  }\n  remove() {\n    {\n      throw Error(`remove: cannot be called on root nodes`);\n    }\n  }\n  replace(node) {\n    {\n      throw Error(`replace: cannot be called on root nodes`);\n    }\n  }\n  insertBefore(nodeToInsert) {\n    {\n      throw Error(`insertBefore: cannot be called on root nodes`);\n    }\n  }\n  insertAfter(nodeToInsert) {\n    {\n      throw Error(`insertAfter: cannot be called on root nodes`);\n    }\n  }\n\n  // View\n\n  updateDOM(prevNode, dom) {\n    return false;\n  }\n\n  // Mutate\n\n  append(...nodesToAppend) {\n    for (let i = 0; i < nodesToAppend.length; i++) {\n      const node = nodesToAppend[i];\n      if (!$isElementNode(node) && !$isDecoratorNode(node)) {\n        {\n          throw Error(`rootNode.append: Only element or decorator nodes can be appended to the root node`);\n        }\n      }\n    }\n    return super.append(...nodesToAppend);\n  }\n  static importJSON(serializedNode) {\n    // We don't create a root, and instead use the existing root.\n    const node = $getRoot();\n    node.setFormat(serializedNode.format);\n    node.setIndent(serializedNode.indent);\n    node.setDirection(serializedNode.direction);\n    return node;\n  }\n  collapseAtStart() {\n    return true;\n  }\n}\nfunction $createRootNode() {\n  return new RootNode();\n}\nfunction $isRootNode(node) {\n  return node instanceof RootNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction editorStateHasDirtySelection(editorState, editor) {\n  const currentSelection = editor.getEditorState()._selection;\n  const pendingSelection = editorState._selection;\n\n  // Check if we need to update because of changes in selection\n  if (pendingSelection !== null) {\n    if (pendingSelection.dirty || !pendingSelection.is(currentSelection)) {\n      return true;\n    }\n  } else if (currentSelection !== null) {\n    return true;\n  }\n  return false;\n}\nfunction cloneEditorState(current) {\n  return new EditorState(new Map(current._nodeMap));\n}\nfunction createEmptyEditorState() {\n  return new EditorState(new Map([['root', $createRootNode()]]));\n}\nfunction exportNodeToJSON(node) {\n  const serializedNode = node.exportJSON();\n  const nodeClass = node.constructor;\n  if (serializedNode.type !== nodeClass.getType()) {\n    {\n      throw Error(`LexicalNode: Node ${nodeClass.name} does not match the serialized type. Check if .exportJSON() is implemented and it is returning the correct type.`);\n    }\n  }\n  if ($isElementNode(node)) {\n    const serializedChildren = serializedNode.children;\n    if (!Array.isArray(serializedChildren)) {\n      {\n        throw Error(`LexicalNode: Node ${nodeClass.name} is an element but .exportJSON() does not have a children array.`);\n      }\n    }\n    const children = node.getChildren();\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      const serializedChildNode = exportNodeToJSON(child);\n      serializedChildren.push(serializedChildNode);\n    }\n  }\n\n  // @ts-expect-error\n  return serializedNode;\n}\nclass EditorState {\n  constructor(nodeMap, selection) {\n    this._nodeMap = nodeMap;\n    this._selection = selection || null;\n    this._flushSync = false;\n    this._readOnly = false;\n  }\n  isEmpty() {\n    return this._nodeMap.size === 1 && this._selection === null;\n  }\n  read(callbackFn, options) {\n    return readEditorState(options && options.editor || null, this, callbackFn);\n  }\n  clone(selection) {\n    const editorState = new EditorState(this._nodeMap, selection === undefined ? this._selection : selection);\n    editorState._readOnly = true;\n    return editorState;\n  }\n  toJSON() {\n    return readEditorState(null, this, () => ({\n      root: exportNodeToJSON($getRoot())\n    }));\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n// TODO: Cleanup ArtificialNode__DO_NOT_USE #5966\nclass ArtificialNode__DO_NOT_USE extends ElementNode {\n  static getType() {\n    return 'artificial';\n  }\n  createDOM(config) {\n    // this isnt supposed to be used and is not used anywhere but defining it to appease the API\n    const dom = document.createElement('div');\n    return dom;\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass ParagraphNode extends ElementNode {\n  /** @internal */\n\n  constructor(key) {\n    super(key);\n    this.__textFormat = 0;\n    this.__textStyle = '';\n  }\n  static getType() {\n    return 'paragraph';\n  }\n  getTextFormat() {\n    const self = this.getLatest();\n    return self.__textFormat;\n  }\n  setTextFormat(type) {\n    const self = this.getWritable();\n    self.__textFormat = type;\n    return self;\n  }\n  hasTextFormat(type) {\n    const formatFlag = TEXT_TYPE_TO_FORMAT[type];\n    return (this.getTextFormat() & formatFlag) !== 0;\n  }\n\n  /**\n   * Returns the format flags applied to the node as a 32-bit integer.\n   *\n   * @returns a number representing the TextFormatTypes applied to the node.\n   */\n  getFormatFlags(type, alignWithFormat) {\n    const self = this.getLatest();\n    const format = self.__textFormat;\n    return toggleTextFormatType(format, type, alignWithFormat);\n  }\n  getTextStyle() {\n    const self = this.getLatest();\n    return self.__textStyle;\n  }\n  setTextStyle(style) {\n    const self = this.getWritable();\n    self.__textStyle = style;\n    return self;\n  }\n  static clone(node) {\n    return new ParagraphNode(node.__key);\n  }\n  afterCloneFrom(prevNode) {\n    super.afterCloneFrom(prevNode);\n    this.__textFormat = prevNode.__textFormat;\n    this.__textStyle = prevNode.__textStyle;\n  }\n\n  // View\n\n  createDOM(config) {\n    const dom = document.createElement('p');\n    const classNames = getCachedClassNameArray(config.theme, 'paragraph');\n    if (classNames !== undefined) {\n      const domClassList = dom.classList;\n      domClassList.add(...classNames);\n    }\n    return dom;\n  }\n  updateDOM(prevNode, dom, config) {\n    return false;\n  }\n  static importDOM() {\n    return {\n      p: node => ({\n        conversion: $convertParagraphElement,\n        priority: 0\n      })\n    };\n  }\n  exportDOM(editor) {\n    const {\n      element\n    } = super.exportDOM(editor);\n    if (isHTMLElement(element)) {\n      if (this.isEmpty()) {\n        element.append(document.createElement('br'));\n      }\n      const formatType = this.getFormatType();\n      element.style.textAlign = formatType;\n      const direction = this.getDirection();\n      if (direction) {\n        element.dir = direction;\n      }\n    }\n    return {\n      element\n    };\n  }\n  static importJSON(serializedNode) {\n    const node = $createParagraphNode();\n    node.setFormat(serializedNode.format);\n    node.setIndent(serializedNode.indent);\n    node.setDirection(serializedNode.direction);\n    node.setTextFormat(serializedNode.textFormat);\n    return node;\n  }\n  exportJSON() {\n    return {\n      ...super.exportJSON(),\n      textFormat: this.getTextFormat(),\n      textStyle: this.getTextStyle()\n    };\n  }\n\n  // Mutation\n\n  insertNewAfter(rangeSelection, restoreSelection) {\n    const newElement = $createParagraphNode();\n    newElement.setTextFormat(rangeSelection.format);\n    newElement.setTextStyle(rangeSelection.style);\n    const direction = this.getDirection();\n    newElement.setDirection(direction);\n    newElement.setFormat(this.getFormatType());\n    newElement.setStyle(this.getTextStyle());\n    this.insertAfter(newElement, restoreSelection);\n    return newElement;\n  }\n  collapseAtStart() {\n    const children = this.getChildren();\n    // If we have an empty (trimmed) first paragraph and try and remove it,\n    // delete the paragraph as long as we have another sibling to go to\n    if (children.length === 0 || $isTextNode(children[0]) && children[0].getTextContent().trim() === '') {\n      const nextSibling = this.getNextSibling();\n      if (nextSibling !== null) {\n        this.selectNext();\n        this.remove();\n        return true;\n      }\n      const prevSibling = this.getPreviousSibling();\n      if (prevSibling !== null) {\n        this.selectPrevious();\n        this.remove();\n        return true;\n      }\n    }\n    return false;\n  }\n}\nfunction $convertParagraphElement(element) {\n  const node = $createParagraphNode();\n  if (element.style) {\n    node.setFormat(element.style.textAlign);\n    setNodeIndentFromDOM(element, node);\n  }\n  return {\n    node\n  };\n}\nfunction $createParagraphNode() {\n  return $applyNodeReplacement(new ParagraphNode());\n}\nfunction $isParagraphNode(node) {\n  return node instanceof ParagraphNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n// https://github.com/microsoft/TypeScript/issues/3841\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nconst DEFAULT_SKIP_INITIALIZATION = false;\nconst COMMAND_PRIORITY_EDITOR = 0;\nconst COMMAND_PRIORITY_LOW = 1;\nconst COMMAND_PRIORITY_NORMAL = 2;\nconst COMMAND_PRIORITY_HIGH = 3;\nconst COMMAND_PRIORITY_CRITICAL = 4;\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n/**\n * Type helper for extracting the payload type from a command.\n *\n * @example\n * ```ts\n * const MY_COMMAND = createCommand<SomeType>();\n *\n * // ...\n *\n * editor.registerCommand(MY_COMMAND, payload => {\n *   // Type of `payload` is inferred here. But lets say we want to extract a function to delegate to\n *   $handleMyCommand(editor, payload);\n *   return true;\n * });\n *\n * function $handleMyCommand(editor: LexicalEditor, payload: CommandPayloadType<typeof MY_COMMAND>) {\n *   // `payload` is of type `SomeType`, extracted from the command.\n * }\n * ```\n */\n\nfunction resetEditor(editor, prevRootElement, nextRootElement, pendingEditorState) {\n  const keyNodeMap = editor._keyToDOMMap;\n  keyNodeMap.clear();\n  editor._editorState = createEmptyEditorState();\n  editor._pendingEditorState = pendingEditorState;\n  editor._compositionKey = null;\n  editor._dirtyType = NO_DIRTY_NODES;\n  editor._cloneNotNeeded.clear();\n  editor._dirtyLeaves = new Set();\n  editor._dirtyElements.clear();\n  editor._normalizedNodes = new Set();\n  editor._updateTags = new Set();\n  editor._updates = [];\n  editor._blockCursorElement = null;\n  const observer = editor._observer;\n  if (observer !== null) {\n    observer.disconnect();\n    editor._observer = null;\n  }\n\n  // Remove all the DOM nodes from the root element\n  if (prevRootElement !== null) {\n    prevRootElement.textContent = '';\n  }\n  if (nextRootElement !== null) {\n    nextRootElement.textContent = '';\n    keyNodeMap.set('root', nextRootElement);\n  }\n}\nfunction initializeConversionCache(nodes, additionalConversions) {\n  const conversionCache = new Map();\n  const handledConversions = new Set();\n  const addConversionsToCache = map => {\n    Object.keys(map).forEach(key => {\n      let currentCache = conversionCache.get(key);\n      if (currentCache === undefined) {\n        currentCache = [];\n        conversionCache.set(key, currentCache);\n      }\n      currentCache.push(map[key]);\n    });\n  };\n  nodes.forEach(node => {\n    const importDOM = node.klass.importDOM;\n    if (importDOM == null || handledConversions.has(importDOM)) {\n      return;\n    }\n    handledConversions.add(importDOM);\n    const map = importDOM.call(node.klass);\n    if (map !== null) {\n      addConversionsToCache(map);\n    }\n  });\n  if (additionalConversions) {\n    addConversionsToCache(additionalConversions);\n  }\n  return conversionCache;\n}\n\n/**\n * Creates a new LexicalEditor attached to a single contentEditable (provided in the config). This is\n * the lowest-level initialization API for a LexicalEditor. If you're using React or another framework,\n * consider using the appropriate abstractions, such as LexicalComposer\n * @param editorConfig - the editor configuration.\n * @returns a LexicalEditor instance\n */\nfunction createEditor(editorConfig) {\n  const config = editorConfig || {};\n  const activeEditor = internalGetActiveEditor();\n  const theme = config.theme || {};\n  const parentEditor = editorConfig === undefined ? activeEditor : config.parentEditor || null;\n  const disableEvents = config.disableEvents || false;\n  const editorState = createEmptyEditorState();\n  const namespace = config.namespace || (parentEditor !== null ? parentEditor._config.namespace : createUID());\n  const initialEditorState = config.editorState;\n  const nodes = [RootNode, TextNode, LineBreakNode, TabNode, ParagraphNode, ArtificialNode__DO_NOT_USE, ...(config.nodes || [])];\n  const {\n    onError,\n    html\n  } = config;\n  const isEditable = config.editable !== undefined ? config.editable : true;\n  let registeredNodes;\n  if (editorConfig === undefined && activeEditor !== null) {\n    registeredNodes = activeEditor._nodes;\n  } else {\n    registeredNodes = new Map();\n    for (let i = 0; i < nodes.length; i++) {\n      let klass = nodes[i];\n      let replace = null;\n      let replaceWithKlass = null;\n      if (typeof klass !== 'function') {\n        const options = klass;\n        klass = options.replace;\n        replace = options.with;\n        replaceWithKlass = options.withKlass || null;\n      }\n      // Ensure custom nodes implement required methods and replaceWithKlass is instance of base klass.\n      {\n        // ArtificialNode__DO_NOT_USE can get renamed, so we use the type\n        const nodeType = Object.prototype.hasOwnProperty.call(klass, 'getType') && klass.getType();\n        const name = klass.name;\n        if (replaceWithKlass) {\n          if (!(replaceWithKlass.prototype instanceof klass)) {\n            throw Error(`${replaceWithKlass.name} doesn't extend the ${name}`);\n          }\n        }\n        if (name !== 'RootNode' && nodeType !== 'root' && nodeType !== 'artificial') {\n          const proto = klass.prototype;\n          ['getType', 'clone'].forEach(method => {\n            // eslint-disable-next-line no-prototype-builtins\n            if (!klass.hasOwnProperty(method)) {\n              console.warn(`${name} must implement static \"${method}\" method`);\n            }\n          });\n          if (\n          // eslint-disable-next-line no-prototype-builtins\n          !klass.hasOwnProperty('importDOM') &&\n          // eslint-disable-next-line no-prototype-builtins\n          klass.hasOwnProperty('exportDOM')) {\n            console.warn(`${name} should implement \"importDOM\" if using a custom \"exportDOM\" method to ensure HTML serialization (important for copy & paste) works as expected`);\n          }\n          if (proto instanceof DecoratorNode) {\n            // eslint-disable-next-line no-prototype-builtins\n            if (!proto.hasOwnProperty('decorate')) {\n              console.warn(`${proto.constructor.name} must implement \"decorate\" method`);\n            }\n          }\n          if (\n          // eslint-disable-next-line no-prototype-builtins\n          !klass.hasOwnProperty('importJSON')) {\n            console.warn(`${name} should implement \"importJSON\" method to ensure JSON and default HTML serialization works as expected`);\n          }\n        }\n      }\n      const type = klass.getType();\n      const transform = klass.transform();\n      const transforms = new Set();\n      if (transform !== null) {\n        transforms.add(transform);\n      }\n      registeredNodes.set(type, {\n        exportDOM: html && html.export ? html.export.get(klass) : undefined,\n        klass,\n        replace,\n        replaceWithKlass,\n        transforms\n      });\n    }\n  }\n  const editor = new LexicalEditor(editorState, parentEditor, registeredNodes, {\n    disableEvents,\n    namespace,\n    theme\n  }, onError ? onError : console.error, initializeConversionCache(registeredNodes, html ? html.import : undefined), isEditable);\n  if (initialEditorState !== undefined) {\n    editor._pendingEditorState = initialEditorState;\n    editor._dirtyType = FULL_RECONCILE;\n  }\n  return editor;\n}\nclass LexicalEditor {\n  /** The version with build identifiers for this editor (since 0.17.1) */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n  constructor(editorState, parentEditor, nodes, config, onError, htmlConversions, editable) {\n    this._parentEditor = parentEditor;\n    // The root element associated with this editor\n    this._rootElement = null;\n    // The current editor state\n    this._editorState = editorState;\n    // Handling of drafts and updates\n    this._pendingEditorState = null;\n    // Used to help co-ordinate selection and events\n    this._compositionKey = null;\n    this._deferred = [];\n    // Used during reconciliation\n    this._keyToDOMMap = new Map();\n    this._updates = [];\n    this._updating = false;\n    // Listeners\n    this._listeners = {\n      decorator: new Set(),\n      editable: new Set(),\n      mutation: new Map(),\n      root: new Set(),\n      textcontent: new Set(),\n      update: new Set()\n    };\n    // Commands\n    this._commands = new Map();\n    // Editor configuration for theme/context.\n    this._config = config;\n    // Mapping of types to their nodes\n    this._nodes = nodes;\n    // React node decorators for portals\n    this._decorators = {};\n    this._pendingDecorators = null;\n    // Used to optimize reconciliation\n    this._dirtyType = NO_DIRTY_NODES;\n    this._cloneNotNeeded = new Set();\n    this._dirtyLeaves = new Set();\n    this._dirtyElements = new Map();\n    this._normalizedNodes = new Set();\n    this._updateTags = new Set();\n    // Handling of DOM mutations\n    this._observer = null;\n    // Used for identifying owning editors\n    this._key = createUID();\n    this._onError = onError;\n    this._htmlConversions = htmlConversions;\n    this._editable = editable;\n    this._headless = parentEditor !== null && parentEditor._headless;\n    this._window = null;\n    this._blockCursorElement = null;\n  }\n\n  /**\n   *\n   * @returns true if the editor is currently in \"composition\" mode due to receiving input\n   * through an IME, or 3P extension, for example. Returns false otherwise.\n   */\n  isComposing() {\n    return this._compositionKey != null;\n  }\n  /**\n   * Registers a listener for Editor update event. Will trigger the provided callback\n   * each time the editor goes through an update (via {@link LexicalEditor.update}) until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerUpdateListener(listener) {\n    const listenerSetOrMap = this._listeners.update;\n    listenerSetOrMap.add(listener);\n    return () => {\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener for for when the editor changes between editable and non-editable states.\n   * Will trigger the provided callback each time the editor transitions between these states until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerEditableListener(listener) {\n    const listenerSetOrMap = this._listeners.editable;\n    listenerSetOrMap.add(listener);\n    return () => {\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener for when the editor's decorator object changes. The decorator object contains\n   * all DecoratorNode keys -> their decorated value. This is primarily used with external UI frameworks.\n   *\n   * Will trigger the provided callback each time the editor transitions between these states until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerDecoratorListener(listener) {\n    const listenerSetOrMap = this._listeners.decorator;\n    listenerSetOrMap.add(listener);\n    return () => {\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener for when Lexical commits an update to the DOM and the text content of\n   * the editor changes from the previous state of the editor. If the text content is the\n   * same between updates, no notifications to the listeners will happen.\n   *\n   * Will trigger the provided callback each time the editor transitions between these states until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerTextContentListener(listener) {\n    const listenerSetOrMap = this._listeners.textcontent;\n    listenerSetOrMap.add(listener);\n    return () => {\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener for when the editor's root DOM element (the content editable\n   * Lexical attaches to) changes. This is primarily used to attach event listeners to the root\n   *  element. The root listener function is executed directly upon registration and then on\n   * any subsequent update.\n   *\n   * Will trigger the provided callback each time the editor transitions between these states until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerRootListener(listener) {\n    const listenerSetOrMap = this._listeners.root;\n    listener(this._rootElement, null);\n    listenerSetOrMap.add(listener);\n    return () => {\n      listener(null, this._rootElement);\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener that will trigger anytime the provided command\n   * is dispatched with {@link LexicalEditor.dispatch}, subject to priority.\n   * Listeners that run at a higher priority can \"intercept\" commands and\n   * prevent them from propagating to other handlers by returning true.\n   *\n   * Listeners are always invoked in an {@link LexicalEditor.update} and can\n   * call dollar functions.\n   *\n   * Listeners registered at the same priority level will run\n   * deterministically in the order of registration.\n   *\n   * @param command - the command that will trigger the callback.\n   * @param listener - the function that will execute when the command is dispatched.\n   * @param priority - the relative priority of the listener. 0 | 1 | 2 | 3 | 4\n   *   (or {@link COMMAND_PRIORITY_EDITOR} |\n   *     {@link COMMAND_PRIORITY_LOW} |\n   *     {@link COMMAND_PRIORITY_NORMAL} |\n   *     {@link COMMAND_PRIORITY_HIGH} |\n   *     {@link COMMAND_PRIORITY_CRITICAL})\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerCommand(command, listener, priority) {\n    if (priority === undefined) {\n      {\n        throw Error(`Listener for type \"command\" requires a \"priority\".`);\n      }\n    }\n    const commandsMap = this._commands;\n    if (!commandsMap.has(command)) {\n      commandsMap.set(command, [new Set(), new Set(), new Set(), new Set(), new Set()]);\n    }\n    const listenersInPriorityOrder = commandsMap.get(command);\n    if (listenersInPriorityOrder === undefined) {\n      {\n        throw Error(`registerCommand: Command ${String(command)} not found in command map`);\n      }\n    }\n    const listeners = listenersInPriorityOrder[priority];\n    listeners.add(listener);\n    return () => {\n      listeners.delete(listener);\n      if (listenersInPriorityOrder.every(listenersSet => listenersSet.size === 0)) {\n        commandsMap.delete(command);\n      }\n    };\n  }\n\n  /**\n   * Registers a listener that will run when a Lexical node of the provided class is\n   * mutated. The listener will receive a list of nodes along with the type of mutation\n   * that was performed on each: created, destroyed, or updated.\n   *\n   * One common use case for this is to attach DOM event listeners to the underlying DOM nodes as Lexical nodes are created.\n   * {@link LexicalEditor.getElementByKey} can be used for this.\n   *\n   * If any existing nodes are in the DOM, and skipInitialization is not true, the listener\n   * will be called immediately with an updateTag of 'registerMutationListener' where all\n   * nodes have the 'created' NodeMutation. This can be controlled with the skipInitialization option\n   * (whose default was previously true for backwards compatibility with &lt;=0.16.1 but has been changed to false as of 0.21.0).\n   *\n   * @param klass - The class of the node that you want to listen to mutations on.\n   * @param listener - The logic you want to run when the node is mutated.\n   * @param options - see {@link MutationListenerOptions}\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerMutationListener(klass, listener, options) {\n    const klassToMutate = this.resolveRegisteredNodeAfterReplacements(this.getRegisteredNode(klass)).klass;\n    const mutations = this._listeners.mutation;\n    mutations.set(listener, klassToMutate);\n    const skipInitialization = options && options.skipInitialization;\n    if (!(skipInitialization === undefined ? DEFAULT_SKIP_INITIALIZATION : skipInitialization)) {\n      this.initializeMutationListener(listener, klassToMutate);\n    }\n    return () => {\n      mutations.delete(listener);\n    };\n  }\n\n  /** @internal */\n  getRegisteredNode(klass) {\n    const registeredNode = this._nodes.get(klass.getType());\n    if (registeredNode === undefined) {\n      {\n        throw Error(`Node ${klass.name} has not been registered. Ensure node has been passed to createEditor.`);\n      }\n    }\n    return registeredNode;\n  }\n\n  /** @internal */\n  resolveRegisteredNodeAfterReplacements(registeredNode) {\n    while (registeredNode.replaceWithKlass) {\n      registeredNode = this.getRegisteredNode(registeredNode.replaceWithKlass);\n    }\n    return registeredNode;\n  }\n\n  /** @internal */\n  initializeMutationListener(listener, klass) {\n    const prevEditorState = this._editorState;\n    const nodeMap = getCachedTypeToNodeMap(prevEditorState).get(klass.getType());\n    if (!nodeMap) {\n      return;\n    }\n    const nodeMutationMap = new Map();\n    for (const k of nodeMap.keys()) {\n      nodeMutationMap.set(k, 'created');\n    }\n    if (nodeMutationMap.size > 0) {\n      listener(nodeMutationMap, {\n        dirtyLeaves: new Set(),\n        prevEditorState,\n        updateTags: new Set(['registerMutationListener'])\n      });\n    }\n  }\n\n  /** @internal */\n  registerNodeTransformToKlass(klass, listener) {\n    const registeredNode = this.getRegisteredNode(klass);\n    registeredNode.transforms.add(listener);\n    return registeredNode;\n  }\n\n  /**\n   * Registers a listener that will run when a Lexical node of the provided class is\n   * marked dirty during an update. The listener will continue to run as long as the node\n   * is marked dirty. There are no guarantees around the order of transform execution!\n   *\n   * Watch out for infinite loops. See [Node Transforms](https://lexical.dev/docs/concepts/transforms)\n   * @param klass - The class of the node that you want to run transforms on.\n   * @param listener - The logic you want to run when the node is updated.\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerNodeTransform(klass, listener) {\n    const registeredNode = this.registerNodeTransformToKlass(klass, listener);\n    const registeredNodes = [registeredNode];\n    const replaceWithKlass = registeredNode.replaceWithKlass;\n    if (replaceWithKlass != null) {\n      const registeredReplaceWithNode = this.registerNodeTransformToKlass(replaceWithKlass, listener);\n      registeredNodes.push(registeredReplaceWithNode);\n    }\n    markNodesWithTypesAsDirty(this, registeredNodes.map(node => node.klass.getType()));\n    return () => {\n      registeredNodes.forEach(node => node.transforms.delete(listener));\n    };\n  }\n\n  /**\n   * Used to assert that a certain node is registered, usually by plugins to ensure nodes that they\n   * depend on have been registered.\n   * @returns True if the editor has registered the provided node type, false otherwise.\n   */\n  hasNode(node) {\n    return this._nodes.has(node.getType());\n  }\n\n  /**\n   * Used to assert that certain nodes are registered, usually by plugins to ensure nodes that they\n   * depend on have been registered.\n   * @returns True if the editor has registered all of the provided node types, false otherwise.\n   */\n  hasNodes(nodes) {\n    return nodes.every(this.hasNode.bind(this));\n  }\n\n  /**\n   * Dispatches a command of the specified type with the specified payload.\n   * This triggers all command listeners (set by {@link LexicalEditor.registerCommand})\n   * for this type, passing them the provided payload. The command listeners\n   * will be triggered in an implicit {@link LexicalEditor.update}, unless\n   * this was invoked from inside an update in which case that update context\n   * will be re-used (as if this was a dollar function itself).\n   * @param type - the type of command listeners to trigger.\n   * @param payload - the data to pass as an argument to the command listeners.\n   */\n  dispatchCommand(type, payload) {\n    return dispatchCommand(this, type, payload);\n  }\n\n  /**\n   * Gets a map of all decorators in the editor.\n   * @returns A mapping of call decorator keys to their decorated content\n   */\n  getDecorators() {\n    return this._decorators;\n  }\n\n  /**\n   *\n   * @returns the current root element of the editor. If you want to register\n   * an event listener, do it via {@link LexicalEditor.registerRootListener}, since\n   * this reference may not be stable.\n   */\n  getRootElement() {\n    return this._rootElement;\n  }\n\n  /**\n   * Gets the key of the editor\n   * @returns The editor key\n   */\n  getKey() {\n    return this._key;\n  }\n\n  /**\n   * Imperatively set the root contenteditable element that Lexical listens\n   * for events on.\n   */\n  setRootElement(nextRootElement) {\n    const prevRootElement = this._rootElement;\n    if (nextRootElement !== prevRootElement) {\n      const classNames = getCachedClassNameArray(this._config.theme, 'root');\n      const pendingEditorState = this._pendingEditorState || this._editorState;\n      this._rootElement = nextRootElement;\n      resetEditor(this, prevRootElement, nextRootElement, pendingEditorState);\n      if (prevRootElement !== null) {\n        // TODO: remove this flag once we no longer use UEv2 internally\n        if (!this._config.disableEvents) {\n          removeRootElementEvents(prevRootElement);\n        }\n        if (classNames != null) {\n          prevRootElement.classList.remove(...classNames);\n        }\n      }\n      if (nextRootElement !== null) {\n        const windowObj = getDefaultView(nextRootElement);\n        const style = nextRootElement.style;\n        style.userSelect = 'text';\n        style.whiteSpace = 'pre-wrap';\n        style.wordBreak = 'break-word';\n        nextRootElement.setAttribute('data-lexical-editor', 'true');\n        this._window = windowObj;\n        this._dirtyType = FULL_RECONCILE;\n        initMutationObserver(this);\n        this._updateTags.add('history-merge');\n        $commitPendingUpdates(this);\n\n        // TODO: remove this flag once we no longer use UEv2 internally\n        if (!this._config.disableEvents) {\n          addRootElementEvents(nextRootElement, this);\n        }\n        if (classNames != null) {\n          nextRootElement.classList.add(...classNames);\n        }\n        {\n          const nextRootElementParent = nextRootElement.parentElement;\n          if (nextRootElementParent != null && ['flex', 'inline-flex'].includes(getComputedStyle(nextRootElementParent).display)) {\n            console.warn(`When using \"display: flex\" or \"display: inline-flex\" on an element containing content editable, Chrome may have unwanted focusing behavior when clicking outside of it. Consider wrapping the content editable within a non-flex element.`);\n          }\n        }\n      } else {\n        // If content editable is unmounted we'll reset editor state back to original\n        // (or pending) editor state since there will be no reconciliation\n        this._editorState = pendingEditorState;\n        this._pendingEditorState = null;\n        this._window = null;\n      }\n      triggerListeners('root', this, false, nextRootElement, prevRootElement);\n    }\n  }\n\n  /**\n   * Gets the underlying HTMLElement associated with the LexicalNode for the given key.\n   * @returns the HTMLElement rendered by the LexicalNode associated with the key.\n   * @param key - the key of the LexicalNode.\n   */\n  getElementByKey(key) {\n    return this._keyToDOMMap.get(key) || null;\n  }\n\n  /**\n   * Gets the active editor state.\n   * @returns The editor state\n   */\n  getEditorState() {\n    return this._editorState;\n  }\n\n  /**\n   * Imperatively set the EditorState. Triggers reconciliation like an update.\n   * @param editorState - the state to set the editor\n   * @param options - options for the update.\n   */\n  setEditorState(editorState, options) {\n    if (editorState.isEmpty()) {\n      {\n        throw Error(`setEditorState: the editor state is empty. Ensure the editor state's root node never becomes empty.`);\n      }\n    }\n\n    // Ensure that we have a writable EditorState so that transforms can run\n    // during a historic operation\n    let writableEditorState = editorState;\n    if (writableEditorState._readOnly) {\n      writableEditorState = cloneEditorState(editorState);\n      writableEditorState._selection = editorState._selection ? editorState._selection.clone() : null;\n    }\n    $flushRootMutations(this);\n    const pendingEditorState = this._pendingEditorState;\n    const tags = this._updateTags;\n    const tag = options !== undefined ? options.tag : null;\n    if (pendingEditorState !== null && !pendingEditorState.isEmpty()) {\n      if (tag != null) {\n        tags.add(tag);\n      }\n      $commitPendingUpdates(this);\n    }\n    this._pendingEditorState = writableEditorState;\n    this._dirtyType = FULL_RECONCILE;\n    this._dirtyElements.set('root', false);\n    this._compositionKey = null;\n    if (tag != null) {\n      tags.add(tag);\n    }\n\n    // Only commit pending updates if not already in an editor.update\n    // (e.g. dispatchCommand) otherwise this will cause a second commit\n    // with an already read-only state and selection\n    if (!this._updating) {\n      $commitPendingUpdates(this);\n    }\n  }\n\n  /**\n   * Parses a SerializedEditorState (usually produced by {@link EditorState.toJSON}) and returns\n   * and EditorState object that can be, for example, passed to {@link LexicalEditor.setEditorState}. Typically,\n   * deserialization from JSON stored in a database uses this method.\n   * @param maybeStringifiedEditorState\n   * @param updateFn\n   * @returns\n   */\n  parseEditorState(maybeStringifiedEditorState, updateFn) {\n    const serializedEditorState = typeof maybeStringifiedEditorState === 'string' ? JSON.parse(maybeStringifiedEditorState) : maybeStringifiedEditorState;\n    return parseEditorState(serializedEditorState, this, updateFn);\n  }\n\n  /**\n   * Executes a read of the editor's state, with the\n   * editor context available (useful for exporting and read-only DOM\n   * operations). Much like update, but prevents any mutation of the\n   * editor's state. Any pending updates will be flushed immediately before\n   * the read.\n   * @param callbackFn - A function that has access to read-only editor state.\n   */\n  read(callbackFn) {\n    $commitPendingUpdates(this);\n    return this.getEditorState().read(callbackFn, {\n      editor: this\n    });\n  }\n\n  /**\n   * Executes an update to the editor state. The updateFn callback is the ONLY place\n   * where Lexical editor state can be safely mutated.\n   * @param updateFn - A function that has access to writable editor state.\n   * @param options - A bag of options to control the behavior of the update.\n   * @param options.onUpdate - A function to run once the update is complete.\n   * Useful for synchronizing updates in some cases.\n   * @param options.skipTransforms - Setting this to true will suppress all node\n   * transforms for this update cycle.\n   * @param options.tag - A tag to identify this update, in an update listener, for instance.\n   * Some tags are reserved by the core and control update behavior in different ways.\n   * @param options.discrete - If true, prevents this update from being batched, forcing it to\n   * run synchronously.\n   */\n  update(updateFn, options) {\n    updateEditor(this, updateFn, options);\n  }\n\n  /**\n   * Focuses the editor\n   * @param callbackFn - A function to run after the editor is focused.\n   * @param options - A bag of options\n   * @param options.defaultSelection - Where to move selection when the editor is\n   * focused. Can be rootStart, rootEnd, or undefined. Defaults to rootEnd.\n   */\n  focus(callbackFn, options = {}) {\n    const rootElement = this._rootElement;\n    if (rootElement !== null) {\n      // This ensures that iOS does not trigger caps lock upon focus\n      rootElement.setAttribute('autocapitalize', 'off');\n      updateEditor(this, () => {\n        const selection = $getSelection();\n        const root = $getRoot();\n        if (selection !== null) {\n          // Marking the selection dirty will force the selection back to it\n          selection.dirty = true;\n        } else if (root.getChildrenSize() !== 0) {\n          if (options.defaultSelection === 'rootStart') {\n            root.selectStart();\n          } else {\n            root.selectEnd();\n          }\n        }\n      }, {\n        onUpdate: () => {\n          rootElement.removeAttribute('autocapitalize');\n          if (callbackFn) {\n            callbackFn();\n          }\n        },\n        tag: 'focus'\n      });\n      // In the case where onUpdate doesn't fire (due to the focus update not\n      // occuring).\n      if (this._pendingEditorState === null) {\n        rootElement.removeAttribute('autocapitalize');\n      }\n    }\n  }\n\n  /**\n   * Removes focus from the editor.\n   */\n  blur() {\n    const rootElement = this._rootElement;\n    if (rootElement !== null) {\n      rootElement.blur();\n    }\n    const domSelection = getDOMSelection(this._window);\n    if (domSelection !== null) {\n      domSelection.removeAllRanges();\n    }\n  }\n  /**\n   * Returns true if the editor is editable, false otherwise.\n   * @returns True if the editor is editable, false otherwise.\n   */\n  isEditable() {\n    return this._editable;\n  }\n  /**\n   * Sets the editable property of the editor. When false, the\n   * editor will not listen for user events on the underling contenteditable.\n   * @param editable - the value to set the editable mode to.\n   */\n  setEditable(editable) {\n    if (this._editable !== editable) {\n      this._editable = editable;\n      triggerListeners('editable', this, true, editable);\n    }\n  }\n  /**\n   * Returns a JSON-serializable javascript object NOT a JSON string.\n   * You still must call JSON.stringify (or something else) to turn the\n   * state into a string you can transfer over the wire and store in a database.\n   *\n   * See {@link LexicalNode.exportJSON}\n   *\n   * @returns A JSON-serializable javascript object\n   */\n  toJSON() {\n    return {\n      editorState: this._editorState.toJSON()\n    };\n  }\n}\nLexicalEditor.version = \"0.22.0+dev.esm\";\n\nexport { $addUpdateTag, $applyNodeReplacement, $cloneWithProperties, $copyNode, $createLineBreakNode, $createNodeSelection, $createParagraphNode, $createPoint, $createRangeSelection, $createRangeSelectionFromDom, $createTabNode, $createTextNode, $getAdjacentNode, $getCharacterOffsets, $getEditor, $getNearestNodeFromDOMNode, $getNearestRootOrShadowRoot, $getNodeByKey, $getNodeByKeyOrThrow, $getPreviousSelection, $getRoot, $getSelection, $getTextContent, $hasAncestor, $hasUpdateTag, $insertNodes, $isBlockElementNode, $isDecoratorNode, $isElementNode, $isInlineElementOrDecoratorNode, $isLeafNode, $isLineBreakNode, $isNodeSelection, $isParagraphNode, $isRangeSelection, $isRootNode, $isRootOrShadowRoot, $isTabNode, $isTextNode, $isTokenOrSegmented, $nodesOfType, $normalizeSelection as $normalizeSelection__EXPERIMENTAL, $onUpdate, $parseSerializedNode, $selectAll, $setCompositionKey, $setSelection, $splitNode, ArtificialNode__DO_NOT_USE, BLUR_COMMAND, CAN_REDO_COMMAND, CAN_UNDO_COMMAND, CLEAR_EDITOR_COMMAND, CLEAR_HISTORY_COMMAND, CLICK_COMMAND, COMMAND_PRIORITY_CRITICAL, COMMAND_PRIORITY_EDITOR, COMMAND_PRIORITY_HIGH, COMMAND_PRIORITY_LOW, COMMAND_PRIORITY_NORMAL, CONTROLLED_TEXT_INSERTION_COMMAND, COPY_COMMAND, CUT_COMMAND, DELETE_CHARACTER_COMMAND, DELETE_LINE_COMMAND, DELETE_WORD_COMMAND, DRAGEND_COMMAND, DRAGOVER_COMMAND, DRAGSTART_COMMAND, DROP_COMMAND, DecoratorNode, ElementNode, FOCUS_COMMAND, FORMAT_ELEMENT_COMMAND, FORMAT_TEXT_COMMAND, INDENT_CONTENT_COMMAND, INSERT_LINE_BREAK_COMMAND, INSERT_PARAGRAPH_COMMAND, INSERT_TAB_COMMAND, IS_ALL_FORMATTING, IS_BOLD, IS_CODE, IS_HIGHLIGHT, IS_ITALIC, IS_STRIKETHROUGH, IS_SUBSCRIPT, IS_SUPERSCRIPT, IS_UNDERLINE, KEY_ARROW_DOWN_COMMAND, KEY_ARROW_LEFT_COMMAND, KEY_ARROW_RIGHT_COMMAND, KEY_ARROW_UP_COMMAND, KEY_BACKSPACE_COMMAND, KEY_DELETE_COMMAND, KEY_DOWN_COMMAND, KEY_ENTER_COMMAND, KEY_ESCAPE_COMMAND, KEY_MODIFIER_COMMAND, KEY_SPACE_COMMAND, KEY_TAB_COMMAND, LineBreakNode, MOVE_TO_END, MOVE_TO_START, OUTDENT_CONTENT_COMMAND, PASTE_COMMAND, ParagraphNode, REDO_COMMAND, REMOVE_TEXT_COMMAND, RootNode, SELECTION_CHANGE_COMMAND, SELECTION_INSERT_CLIPBOARD_NODES_COMMAND, SELECT_ALL_COMMAND, TEXT_TYPE_TO_FORMAT, TabNode, TextNode, UNDO_COMMAND, createCommand, createEditor, getDOMSelection, getDOMTextNode, getEditorPropertyFromDOMNode, getNearestEditorFromDOMNode, isBlockDomNode, isCurrentlyReadOnlyMode, isDOMNode, isDOMTextNode, isDOMUnmanaged, isDocumentFragment, isHTMLAnchorElement, isHTMLElement, isInlineDomNode, isLexicalEditor, isSelectionCapturedInDecoratorInput, isSelectionWithinEditor, resetRandomKey, setDOMUnmanaged, setNodeIndentFromDOM };\n"],
  "mappings": "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",
  "names": ["mutatedNodes", "nodes", "leftTree", "rightTree", "anchorNode", "dirtyElements", "dirtyLeaves", "resolvedNode", "activeEditor"]
}
